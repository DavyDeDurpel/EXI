//
//function ExiController(){
//	this.init();
//};
//
//ExiController.prototype.init = function(){
//	function setPageBackground() {
//
//	}
//	function notFound() {
//
//	}
//
//	function loadNavigationPanel(listView){
//		/** Cleaning up navigation panel **/
//		EXI.clearNavigationPanel();
//		EXI.setLoadingNavigationPanel(true);
//		
//		/** Load data data **/
//		var adapter = new DataAdapter();
//		adapter.onSuccess.attach(function(sender, data) {
//			/** Load panel **/
//			EXI.addNavigationPanel(listView);
//			/** Load data **/
//			listView.store.loadData(data);
//			EXI.setLoadingNavigationPanel(false);
//		});
//		
//		/** Handle error **/
//		adapter.onError.attach(function(sender, data) {
//			EXI.setLoadingNavigationPanel(false);
//		});
//		return adapter;
//	}
//	
//	
//	/** Welcome Page **/
//	Path.map("#/").to(function() {}).enter(setPageBackground);
//	
//	
//	/** 
//	 * Loading navigation panel
//	 *  
//	 * #/session/nav
//	 * #/experiment/nav
//	 * #/macromolecule/nav
//	 * 
//	 * */
//	Path.map("#/:navigation/nav").to(function() {
//		/** Session navigation **/
//		if (this.params['navigation'] == "session") {
//			var listView = new SessionListView();
//			/** When selected move to hash **/
//			listView.onSelect.attach(function(sender, selected) {
//				location.hash = "/session/nav/" + selected[0].sessionId + "/session";
//			});
//			var adapter = loadNavigationPanel(listView);
//			adapter.getSessions();
//		}
//
//		if (this.params['navigation'] == "shipping") {
//			var listView = new ShippingListView();
//			/** When selected move to hash **/
//			listView.onSelect.attach(function(sender, selected) {
//				location.hash = "/shipping/" + selected[0].shippingId + "/main";
//			});
//			var adapter = loadNavigationPanel(listView);
//			adapter.getShippings();
//		}
//		
//		if (this.params['navigation'] == "experiment") {
//			var listView = new ExperimentListView();
//			/** When selected move to hash **/
//			listView.onSelect.attach(function(sender, selected) {
//				location.hash = "/experiment/experimentId/" + selected[0].experimentId + "/main";
//			});
//			var adapter = loadNavigationPanel(listView);
//			adapter.getExperiments();
//		}
//		
//		if (this.params['navigation'] == "template") {
//			var listView = new TemplateListView();
//			/** When selected move to hash **/
//			listView.onSelect.attach(function(sender, selected) {
//				location.hash = "/experiment/templateId/" + selected[0].experimentId + "/main";
//			});
//			var adapter = loadNavigationPanel(listView);
//			adapter.getByExperimentByKey("experimentType", "TEMPLATE");
//		}
//		
//
//		if (this.params['navigation'] == "macromolecule") {
//			alert("not implemented yet");
//		}
//		
//	}).enter(setPageBackground);
//
//	/** Loading a single session on the navigation panel **/
//	Path.map("#/session/nav/:sessionId/session").to(function() {
//		var listView = new ExperimentListView();
//		/** When selected move to hash **/
//		listView.onSelect.attach(function(sender, selected) {
//			location.hash = "/experiment/experimentId/" + selected[0].experimentId + "/main";
//		});
//		var adapter = loadNavigationPanel(listView);
//		adapter.getExperimentsBySessionId(this.params['sessionId']);
//		
//	}).enter(setPageBackground);
//
//	Path.map("#/experiment/experimentId/:experimentId/main").to(function() {
//			var mainView = new ExperimentMainView();
//			EXI.addMainPanel(mainView);
//			mainView.load(this.params['experimentId']);
//					/** Selecting data collections from experiment **/
//			mainView.onSelect.attach(function(sender, element) {
//					EXI.localExtorage.selectedSubtractionsManager.append(element);
//			});
//			mainView.onDeselect.attach(function(sender, element) {
//					EXI.localExtorage.selectedSubtractionsManager.remove(element);
//			});
//
//	}).enter(setPageBackground);
//	
//	
//	/** Loading Experiments **/
//	Path.map("#/experiment/:key/:value/main").to(function() {
//		var adapter = new DataAdapter();
//		EXI.setLoadingMainPanel();
//		adapter.onSuccess.attach(function(sender, data) {
//			EXI.setLoadingMainPanel(false);
//			if (data != null) {
//				if (data.length > 0) {
//					var mainView = null;
//					if (data[0].experimentType == "STATIC") {
//						mainView = new ExperimentMainView();
//						
//					}
//					if (data[0].experimentType == "HPLC") {
//						mainView = new HPLCMainView();
//					}
//					
//					if (data[0].experimentType == "TEMPLATE") {
//						mainView = new TemplateMainView();
//					}
//					
//					EXI.addMainPanel(mainView);
//					mainView.load(data);
//					/** Selecting data collections from experiment **/
//					mainView.onSelect.attach(function(sender, element) {
//						EXI.localExtorage.selectedSubtractionsManager.append(element);
//					});
//					mainView.onDeselect.attach(function(sender, element) {
//						EXI.localExtorage.selectedSubtractionsManager.remove(element);
//					});
//					
//				}
//			}
//		});
//		if ((this.params['key'] == "experimentId")||(this.params['key'] == "templateId")){
//			adapter.getByExperimentId([this.params['value']]);
//		}
//		else{
//			adapter.getByExperimentByKey(this.params['key'], this.params['value']);
//		}
//		
//
//	}).enter(setPageBackground);
//
//	Path.map("#/tool/crysol/main").to(function() {
//		var mainView = new CrysolMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(setPageBackground);
//
//	
//	Path.map("#/tool/subtraction/main").to(function() {
//		var mainView = new SubtractionMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(setPageBackground);
//	
//	Path.map("#/datacollection/:key/:value/main").to(function() {
//		EXI.setLoadingMainPanel();
//		var adapter = new DataAdapter();
//		adapter.onSuccess.attach(function(sender, data) {
//			var mainView = new DataCollectionMainView();
//			EXI.addMainPanel(mainView);
//			mainView.load(data);
//			EXI.setLoadingMainPanel(false);
//			/** Selecting data collections from experiment **/
//			mainView.onSelect.attach(function(sender, element) {
//				EXI.localExtorage.selectedSubtractionsManager.append(element);
//			});
//			mainView.onDeselect.attach(function(sender, element) {
//				EXI.localExtorage.selectedSubtractionsManager.remove(element);
//			});
//		});
//		adapter.getDataCollectionsByKey(this.params['key'], this.params['value']);
//
//	}).enter(setPageBackground);
//
//	
//	Path.map("#/datacollection/:key/:value/primaryviewer").to(function() {
//		var adapter = new DataAdapter();
//		adapter.onSuccess.attach(function(sender, data) {
//			var primaryMainView = new PrimaryDataMainView();
//			EXI.addMainPanel(primaryMainView);
//			primaryMainView.load(data);
//
//		});
//		adapter.getDataCollectionsByKey(this.params['key'], this.params['value']);
//	}).enter(setPageBackground);
//
//	Path.map("#/datacollection/:key/:value/merge").to(function() {
//		var adapter = new DataAdapter();
//		adapter.onSuccess.attach(function(sender, data) {
//			var primaryMainView = new MergeMainView();
//			EXI.addMainPanel(primaryMainView);
//			primaryMainView.load(data);
//
//		});
//		adapter.getDataCollectionsByKey(this.params['key'], this.params['value']);
//	}).enter(setPageBackground);
//
//	Path.map("#/project/:projectId/run/:runId/main").to(function() {
//		var projectId = this.params['projectId'];
//		var runId = this.params['runId'];
//		var exidataAdapter = new ExiDataAdapter();
//		exidataAdapter.onSuccess.attach(function(sender, runs) {
//			for (var i = 0; i < runs.length; i++) {
//				if (runs[i].internalId == runId) {
//					var main = new RunMainView();
//					EXI.addMainPanel(main);
//					main.load(runs[i]);
//				}
//			}
//		});
//		exidataAdapter.getRuns(projectId);
//	}).enter(setPageBackground);
//
//	
//	Path.map("#/prepare/designer/main").to(function() {
//		var mainView = new ExperimentDesignerMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(setPageBackground);
//	
//	
//	Path.map("#/prepare/buffer/main").to(function() {
//		var mainView = new BufferMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(setPageBackground);
//	
//	
//	Path.map("#/shipping/:shippingId/main").to(function() {
//		var mainView = new ShippingMainView();
//		var shippindId = this.params['shippingId'];
//		EXI.addMainPanel(mainView);
//		mainView.load(shippindId);
//	}).enter(setPageBackground);
//	
//	
//	Path.map("#/prepare/stocksolution/main").to(function() {
//		var mainView = new StockSolutionMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(setPageBackground);
//	
//	
//	Path.map("#/prepare/macromolecule/main").to(function() {
//		var mainView = new MacromoleculeMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(setPageBackground);
//	
//	Path.map("#/prepare/templates/main").to(function() {
//		var mainView = new ExperimentDesignerMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(setPageBackground);
//	
//	Path.map("#/prepare/designer").to(function() {
//		var wizardWidget = new WizardWidget({
//			windowMode : true,
//			width : 1200
//		});
//
//		wizardWidget.onFinished.attach(function(sender, result) {
//			var adapter = new DataAdapter();
//			wizardWidget.window.close();
//			EXI.setLoading();
//			adapter.onSuccess.attach(function(sender, experiment) {
//				location.hash = "/experiment/experimentId/" + experiment.experimentId + "/main";
//			});
//			wizardWidget.current.setLoading("ISPyB: Creating experiment");
//			
//			adapter.saveTemplate(result.name, "comments", result.data);
//		});
//
//		var manager = new ProposalUpdater(); 
//		manager.onSuccess.attach(function(sender, proposals){
//			wizardWidget.draw(this.targetId, new MeasurementCreatorStepWizardForm(ProposalManager.getMacromolecules(), ProposalManager.getBuffers()));
//		});
//		manager.get();
//		
//	}).enter(setPageBackground);
//	
//	
//	Path.map("#/welcome/:user/main").to(function() {
//		var user = this.params['shippingId'];
//		var mainView = new WelcomeMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load(user);
//	}).enter(setPageBackground);
//	
//	
//	
//	Path.map("#/login").to(function() {
//		var _this = this;
//		
//		
//		EXI.authenticationForm.show();
//		return;
//		var authenticationForm = new AuthenticationForm();
//		authenticationForm.onAuthenticate.attach(function(sender, args){
//			var authenticationManager = new AuthenticationManager();
//			authenticationManager.onSuccess.attach(function(sender, args){
//				/** This user has been authenticated **/
////				EXI.localExtorage.tokenManager.addToken(args.user, args.token, args.url);
////				debugger
//				EXI.credentialManager.addCredential(args.user, args.roles, args.token, args.url);
////				EXI.mainMenu.addLoggin(args.user,  args.url);
//				authenticationForm.window.close();
//				
//				/** load proposals **/
//				location.hash = "/welcome/" + args.user + "/main";
//				
//				/** Loading projects **/
////				var exidataAdapter = new ExiDataAdapter();
////				exidataAdapter.onSuccess.attach(function(sender, projects){
////					EXI.localExtorage.userManager.setProjects(projects);
////				});
////				exidataAdapter.getUser();
//				
//				/** Loading proposal **/
////				new ProposalUpdater().get(true);
//				
////				window.location.href = 'main.html';
//				
//			});
//			
//			authenticationManager.login(args.user, args.password, args.site);
//			
//		});
//		authenticationForm.show();
//		
//	}).enter(setPageBackground);
//	
//	
//	Path.map("#/logout").to(function() {
//		EXI.credentialManager.logout();
////		if (EXI.localExtorage){
////			EXI.localExtorage.clear();
////		}
////		if (EXI.mainMenu){
////			EXI.mainMenu.setCredentials();
////		}
//		
////		window.location.href = 'main.html';
//		
//	}).enter(setPageBackground);
//	
//	// Here we set a "root route".  You may have noticed that when you landed on this
//	// page you were automatically "redirected" to the "#/users" route.  The definition
//	// below tells PathJS to load this route automatically if one isn't provided.
//	Path.root("#/");
//
//	// The `Path.rescue()` method takes a function as an argument, and will be called when
//	// a route is activated that you have no yet defined an action for.  On this example
//	// page, you'll notice there is no defined route for the "Unicorns!?" link.  Since no
//	// route is defined, it calls this method instead.
//	Path.rescue(notFound);
//	
//	
//};

function AuthenticationManager(){
	this.onSuccess = new Event(this);
	this.onError = new Event(this);
}

/**
 * url to an ISPyB instance http://pc593.embl.fr:8080/ispyb-ws/rest
 * @param user
 * @param password
 * @param url
 */
AuthenticationManager.prototype.login = function(user, password, url){
	var _this = this;
	var fn = function onSuccess(sender, data) {
		_this.onSuccess.notify({
			user : user,
			roles : data.roles,
			token : data.token,
			url : url
	});
	};
		
	var err = function(sender, data) {
		EXI.setError("Permission denied");
		BUI.showError("Your credentials are invalid");
	};
	
	EXI.getDataAdapter({
		onSuccess :fn,
		onError :err
	}).proposal.authentication.authenticate(user, password, url);
	
	
	
};


function Exi(args) {
	var _this = this;
	
	this.headerCssClass = "titlePanel";
	
	/** Active Menu **/
	this.mainMenu = new MainMenu();
	/** When user is not logged in **/
	this.anonymousMenu = null;
	/** When user is logged in **/
	this.userMenu = null;
	
	/** If false when opening a new tab it will close the already open ones **/
	this.keepTabs = false;
	
	
	this.controllers = [new ExiController()];
	
	if (args != null){
		if (args.menu != null){
			this.mainMenu = args.menu;
			this.userMenu = args.menu;
		}
		if (args.anonymousMenu != null){
			this.anonymousMenu = args.anonymousMenu;
		}
		
		if (args.headerCssClass != null){
			this.headerCssClass = args.headerCssClass;
		}
		
		if (args.controllers != null){
			for (var i = 0; i < args.controllers.length; i++) {
				this.controllers.push(args.controllers[i]);
			}
		}
	}
	/** Status bar **/
	this.mainStatusBar = new MainStatusBar();
	
	/** Proposal manager **/
	this.proposalManager = new ProposalManager();
	
	this.credentialManager = new CredentialManager();
	this.credentialManager.onLogout.attach(function(sender){
		_this.mainMenu.populateCredentialsMenu();
		_this.clearMainPanel();
		_this.clearNavigationPanel();
		_this.setAnonymousMenu();
		Ext.getCmp("navigation").collapse();
		location.hash = '/welcome';
	});
	
	
	this.credentialManager.onLogin.attach(function(sender){
		_this.mainMenu.populateCredentialsMenu();
		_this.setUserMenu();
	});
	
	this.credentialManager.onActiveProposalChanged.attach(function(sender){
		_this.mainMenu.populateCredentialsMenu();
	});
	
	/** AUTHENTICATION FORM **/
	this.authenticationForm = new AuthenticationForm();
	this.authenticationForm.onAuthenticate.attach(function(sender, args){
		var authenticationManager = new AuthenticationManager();
		authenticationManager.onSuccess.attach(function(sender, data){
			/** This user has been authenticated **/
			_this.credentialManager.addCredential(data.user, data.roles, data.token, args.site, args.exiUrl, args.properties);
			_this.authenticationForm.window.close();
			
			var credential = EXI.credentialManager.getCredentialByUserName(data.user);
			if (credential.isManager()){
				location.hash = "/welcome/manager/" + data.user + "/main";
			}
			else{
				location.hash = "/welcome/user/" + data.user + "/main";
			}
			
			/** Authenticating EXI **/
			_this.getDataAdapter().exi.offline.authenticate();
			
		});
		
		authenticationManager.login(args.user, args.password, args.site);
	});
	
	
	
	
	this.onAfterRender = new Event(this);
}

Exi.prototype.getDataAdapter = function(args) {
	return new DataAdapterFactory(args);
};

Exi.prototype.setAnonymousMenu = function() {
	this.mainMenu = this.anonymousMenu;
	Ext.getCmp("mainMenu").removeAll();
	Ext.getCmp("mainMenu").add(EXI.mainMenu.getPanel());
};

Exi.prototype.setUserMenu = function() {
	this.mainMenu = this.userMenu;
	Ext.getCmp("mainMenu").removeAll();
	Ext.getCmp("mainMenu").add(EXI.mainMenu.getPanel());
};


Exi.prototype.loadSelected = function(selected) {
//	this.workspacePanel.setSelectedItems(selected);
	/** decollapse workspace panel **/
//	if (Ext.getCmp("workspace").collapsed != false){
//		Ext.getCmp("workspace").expand();
//	}
};


//Exi.prototype.__listenMainViewEvents__ = function(mainView) {
//	var _this = this;
//	if (mainView != null) {
//		mainView.onSelect.attach(function(sender, element) {
//			_this.localExtorage.selectedSubtractionsManager.append(element);
//		});
//		mainView.onDeselect.attach(function(sender, element) {
//			_this.localExtorage.selectedSubtractionsManager.remove(element);
//		});
//	}
//};


/**
 * Adds a new Main panel to the center panel
 * @param mainView
 */
Exi.prototype.addMainPanel = function(mainView) {
	if (!this.keepTabs){
		Ext.getCmp('main_panel').removeAll();
	}
	Ext.getCmp('main_panel').add(mainView.getPanel());
	Ext.getCmp('main_panel').setActiveTab(Ext.getCmp('main_panel').items.length - 1);
};

Exi.prototype.getSelectedDataCollections = function() {
	var selected = [];
	for (var i = 0; i < this.experimentListView.length; i++) {
		selected = selected.concat(this.experimentListView[i].getSelected());
	}
	return selected;
};

Exi.prototype.addNavigationPanel = function(listView) {
	Ext.getCmp('navigation').add(listView.getPanel());
	if (Ext.getCmp("navigation") != null){
		Ext.getCmp("navigation").expand();
	}
};

Exi.prototype.clearNavigationPanel = function() {
	Ext.getCmp('navigation').removeAll();
};

Exi.prototype.clearMainPanel = function() {
	Ext.getCmp('main_panel').removeAll();
};

Exi.prototype.setLoadingNavigationPanel = function(isLoading) {
	Ext.getCmp('navigation').setLoading(isLoading);
};

Exi.prototype.setLoadingMainPanel = function(isLoading) {
	Ext.getCmp('main_panel').setLoading(isLoading);
};

Exi.prototype.setError = function(error) {
	this.mainStatusBar.showError(error);
};

Exi.prototype.setLoading = function(isLoading) {
	if ((isLoading == null) || (isLoading  == true)){
		this.mainStatusBar.showBusy();
	}
	else{
		this.mainStatusBar.showReady();
	}
};

Exi.prototype.getHeader = function(error) {
	return '<img class="titleImage" src="images/logo_EMBL.png"><span class="title">Extended ISPyB</span>';
};

Exi.prototype.show = function() {
	var _this = this;
	Ext.application({
				name : 'ExiSAXS',
				launch : function() {
					Ext.create(
									'Ext.container.Viewport',
									{
										layout : 'border',
										items : [
												{
													region : 'north',
													xtype : 'component',
													padding : 10,
													height : 75,
													html : _this.getHeader(),
													cls : _this.headerCssClass

												}, {
													region : 'north',
													cls : 'toolbarPanel',
													id : 'mainMenu',
													xtype : 'panel',
													width : 400,
													items : _this.mainMenu.getPanel() },

												{
													xtype : 'panel',
													id : 'navigation',
													region : 'west',
													width : 250,
													split : false,
													title : 'Browse by',
													cls : 'navigation',
													collapsible : true,
													collapsed : true
													

												},
//												{
//													xtype : 'panel',
//													id : 'workspace',
//													region : 'east',
//													width : 250,
//													collapsed : true,
//													title : 'Workspace',
//													split : false,
//													layout : 'fit',
////													title : 'Browse by',
//													cls : 'navigation',
//													collapsible : true,
//													items : [_this.workspacePanel.getPanel()]
//
//												},
												{
													region : 'center',
													id : 'main_panel',
													xtype : 'tabpanel',
													cls : 'navigation',
													plain : true,
													items : []
												},
												{
														region : 'south',
														xtype : 'panel',
														cls : 'statusBar',
														bbar : _this.mainStatusBar.getBar() 
												}
													],
										listeners : {
											afterrender : function(component, eOpts) {
														_this.mainMenu.populateCredentialsMenu();
														_this.onAfterRender.notify();
														
//														/** If there is a user login then we show the menu **/
														if (_this.credentialManager.getCredentials() == 0){
															_this.setAnonymousMenu();
														}
														else{
															_this.setUserMenu();
															_this.mainMenu.populateCredentialsMenu();
														}
											} } });
				}

			});
};

function ExiMX() {
	 Exi.call(this, {
		 					menu: new MXMainMenu(),
		 					anonymousMenu: new MainMenu(),
		 					controllers : [new MXExiController(), new OfflineExiController(), new ProposalExiController()],
		 					headerCssClass : 'mxTitlePanel'
	 
	 });	 
}

ExiMX.prototype.loadSelected = Exi.prototype.loadSelected;
ExiMX.prototype.addMainPanel = Exi.prototype.addMainPanel;
ExiMX.prototype.getSelectedDataCollections = Exi.prototype.getSelectedDataCollections;
ExiMX.prototype.addNavigationPanel = Exi.prototype.addNavigationPanel;
ExiMX.prototype.clearNavigationPanel = Exi.prototype.clearNavigationPanel;
ExiMX.prototype.clearMainPanel = Exi.prototype.clearMainPanel;
ExiMX.prototype.setLoadingNavigationPanel = Exi.prototype.setLoadingNavigationPanel;
ExiMX.prototype.setLoadingMainPanel = Exi.prototype.setLoadingMainPanel;
ExiMX.prototype.setError = Exi.prototype.setError;
ExiMX.prototype.setLoading = Exi.prototype.setLoading;
ExiMX.prototype.setLoadingMainPanel = Exi.prototype.setLoadingMainPanel;
ExiMX.prototype.show = Exi.prototype.show;
ExiMX.prototype.setAnonymousMenu = Exi.prototype.setAnonymousMenu;
ExiMX.prototype.setUserMenu = Exi.prototype.setUserMenu;



ExiMX.prototype.getHeader = function(){
	return '<img class="titleImage" src="../images/logo_EMBL.png"><span class="title">ExiMX</span><span class="subtitle">Extended ISPyB for MX<sub style="font-size:10px;color:orange">BETA</sub></span>';
};

ExiMX.prototype.getDataAdapter = function(args){
	return new MxDataAdapterFactory(args);
};





function ExiSAXS() {
	 Exi.call(this, {
		 					menu: new SAXSMainMenu(),
		 					anonymousMenu: new MainMenu(),
		 					controllers : [new SAXSExiController(), new MXExiController(), new OfflineExiController(), new ProposalExiController()]
	 });
}

ExiSAXS.prototype.loadSelected = Exi.prototype.loadSelected;
ExiSAXS.prototype.addMainPanel = Exi.prototype.addMainPanel;
ExiSAXS.prototype.getSelectedDataCollections = Exi.prototype.getSelectedDataCollections;
ExiSAXS.prototype.addNavigationPanel = Exi.prototype.addNavigationPanel;
ExiSAXS.prototype.clearNavigationPanel = Exi.prototype.clearNavigationPanel;
ExiSAXS.prototype.clearMainPanel = Exi.prototype.clearMainPanel;
ExiSAXS.prototype.setLoadingNavigationPanel = Exi.prototype.setLoadingNavigationPanel;
ExiSAXS.prototype.setLoadingMainPanel = Exi.prototype.setLoadingMainPanel;
ExiSAXS.prototype.setError = Exi.prototype.setError;
ExiSAXS.prototype.setLoading = Exi.prototype.setLoading;
ExiSAXS.prototype.setLoadingMainPanel = Exi.prototype.setLoadingMainPanel;
ExiSAXS.prototype.show = Exi.prototype.show;
ExiSAXS.prototype.setAnonymousMenu = Exi.prototype.setAnonymousMenu;
ExiSAXS.prototype.setUserMenu = Exi.prototype.setUserMenu;

ExiSAXS.prototype.getHeader = function(){
	return '<img class="titleImage" src="../images/logo_EMBL.png"><span class="title">ExiSAXS</span><span class="subtitle">Extended ISPyB for SAXS<sub style="font-size:10px;color:orange">BETA</sub></span>';
};

ExiSAXS.prototype.getDataAdapter = function(args){
	return new SaxsDataAdapterFactory(args);
};





function MainStatusBar(){
	
	
}

MainStatusBar.prototype.getBar = function(){
	this.statusBar =  Ext.create('Ext.ux.StatusBar', {
		id : 'main-status-bar',
	    text: 'Ready',
	    iconCls: 'accept',
	    busyIconCls: 'busy',
	    busyText: 'Connecting to servers...',
	    cls : 'statusBar',
		statusAlign : 'right'
	});
	return this.statusBar;
};

MainStatusBar.prototype.showBusy = function(){
	this.statusBar.showBusy();
};

MainStatusBar.prototype.showError = function(error){
	this.statusBar.clearStatus();
	this.statusBar.setStatus({
	    text: error,
	    iconCls: 'error'
	});
};

MainStatusBar.prototype.showReady = function(){
	this.statusBar.clearStatus();
	this.statusBar.setStatus({
	    text: 'Ready',
	    iconCls: 'accept'
	});
};





/**
 * Super class for all the data adapters
 * Based on $ and Event it will make a GET/POST call to an given URL
 * if success then onSuccess will be notified otherwise on Error will be notified
 * 
 * Example:
 * 
 * function successed (sender, data){
 * 	alert("It worked");
 * }
 * var adapter = new DataAdapter({async : true, onSuccess: successed }).get("http://example.com/get")
 * 
 * 
**/
function DataAdapter(args) {
	this.async = true;
	this.onSuccess = new Event(this);
	this.onError = new Event(this);
	
	if (args != null) {
		if (args.async != null) {
			this.async = args.async;
		}
		if (args.onSuccess != null) {
			this.onSuccess.attach(args.onSuccess);
		}
		if (args.onError != null) {
			this.onError.attach(args.onError);
		}
	}
	
}

/**
 * Input: url = "http://server.com/{token}/proposal/{proposal}/shipment/list"
 * Output will be the url with the strings {token} and {proposal} replaced by the values connection.token and connection.proposal
 */
DataAdapter.prototype.getUrl = function(connection, url){
	return connection.url + url.replace("{token}", connection.token).replace("{proposal}", connection.proposal).replace("{username}", connection.username);
};


DataAdapter.prototype.get = function(url){
	var _this = this;

	if (EXI != null){
		EXI.setLoading();
	}

	var connections = EXI.credentialManager.getConnections();
	if (connections.length == 1){
		$.ajax({
			  url: this.getUrl(connections[0], url),
			  type: 'get',
			  async : this.async,
			  statusCode: {
		            400 : function(){
		                BUI.showError('400 : bad request');
		            },
		            401 : function(){
		                EXI.setError('401 : Unauthorized. Your session is not valid or may have expired');
		            },
		            403 : function(){
		                BUI.showError('403 : forbidden');
		            },
		            404 : function(){
		                BUI.showError('404 : not found');
		            },
		            415 : function(){
		                BUI.showError('415 : type not allowed');
		            },
		            500 : function(){
		                BUI.showError('500 : internal server error');
		            }
		        },
			  success: function(data){ 
				  _this.onSuccess.notify(data);
				  if (EXI != null){
					  EXI.setLoading(false);
				  }
			  },
			  error: function(error){
				  _this.onError.notify(error);
				   EXI.setError(error.responseText);
			  }
			});
	}
	else{
		BUI.showError("Number of connections > 1");
	}
	

//	if (connections.length == 2){
//		function success(dataset1, dataset2){
//			 _this.onSuccess.notify(dataset1[0].concat(dataset2[0]));
//			 if (exiSAXS != null){
//				  exiSAXS.setLoading(false);
//			 }
//		}
//		function error(error){
//			 _this.onError.notify(error);
//			  _this.onError.notify(error);
//			  if (exiSAXS != null){
//				  exiSAXS.setError(error.responseText);
//			  }
//		}
//		$.when( 
//				$.ajax({
//							url: connections[0].url + url.replace("%TOKEN%", connections[0].token).replace("%PROPOSAL%", connections[0].proposal).replace("%USER%", connections[0].username),
//							async : this.async,
//							type: 'get'
//						}), 
//			    $.ajax({
//			    	url: connections[1].url + url.replace("%TOKEN%", connections[1].token).replace("%PROPOSAL%", connections[1].proposal).replace("%USER%", connections[1].username),
//			    			async : this.async,
//			    			type: 'get'
//					 })
//			)
//		  .then( success, error);
//	}
};

DataAdapter.prototype.post = function(url, data){
	var _this = this;
	/** exiSAXS could be not defined yed **/
	if (EXI != null){
		EXI.setLoading();
	}
	var connections = EXI.credentialManager.getConnections();
	 url = this.getUrl(connections[0], url);
	 $.ajax({
		  type: "POST",
		  url: url,
		  data: data,
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			  if (EXI != null){
				  EXI.setLoading(false);
			  }
		  },
		  error: function(error){
			  _this.onError.notify(error);
			  if (EXI != null){
				  EXI.setError(error);
			  }
		  }
	});
	 
};



function ExiDataAdapter(args){
	this.async = true;
	this.onSuccess = new Event(this);
	this.onError = new Event(this);
	
	if (args != null) {
		if (args.async != null) {
			this.async = args.async;
		}
		if (args.onSuccess != null) {
			this.onSuccess.attach(args.onSuccess);
		}
		if (args.onError != null) {
			this.onError.attach(args.onError);
		}
	}

}

ExiDataAdapter.prototype.getUrl = function(url){
	var connection = EXI.credentialManager.getConnections()[0];
	return connection.exiUrl + url.replace("{token}", connection.token).replace("{username}", connection.username);
};


ExiDataAdapter.prototype.call = function(url){
	var _this = this;
//	var connections = EXI.credentialManager.getConnections();

	$.ajax({
		  url: this.getUrl(url),
		  type: 'get',
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			  if (exiSAXS != null){
				  exiSAXS.setLoading(false);
			  }
		  },
		  error: function(error){
			  _this.onError.notify(error);
			  if (exiSAXS != null){
				  exiSAXS.setError(error);
			  }
		  }
	});

};

ExiDataAdapter.prototype.postcall = function(url, data){
	var _this = this;
	var connections = EXI.credentialManager.getConnections();
	
	$.ajax({
		  url: connections[0].exiUrl + url,
		  type: 'post',
		  data : data,
		  success: function(data){ 
			  _this.onSuccess.notify(data);
			  if (exiSAXS != null){
				  exiSAXS.setLoading(false);
			  }
		  },
		  error: function(error){
			  _this.onError.notify(error);
			  if (exiSAXS != null){
				  exiSAXS.setError(error);
			  }
		  }
	});

};

ExiDataAdapter.prototype.getToolUrl = function(){
	return this.getUrl('/{token}/tool');
};

ExiDataAdapter.prototype.authenticate = function(){
	this.call('/{token}/user/{username}/authenticate');
};

ExiDataAdapter.prototype.getProject = function(){
	this.call('/{token}/project/list');
};

ExiDataAdapter.prototype.getRuns = function(projectId){
	this.call('/{token}/project/{0}/run/list'.format([ projectId]));
};

ExiDataAdapter.prototype.save = function(user){
	this.postcall('/{token}/user/save'.format([ tokens[0].token]), {user : JSON.stringify(user)});
};

ExiDataAdapter.prototype.getFileContent = function(fileId){
	this.call('/file/{0}/content'.format([ fileId]));
};

ExiDataAdapter.prototype.getFileImage = function(fileId){
	return this.getUrl('/file/{0}/image'.format([ fileId]));
};


function ExiDataAdapterGroup(args){
	this.offline = new ExiDataAdapter(args);
}



function AutoProcIntegrationDataAdapter(args){
	DataAdapter.call(this, args);
}

AutoProcIntegrationDataAdapter.prototype.get = DataAdapter.prototype.get;
AutoProcIntegrationDataAdapter.prototype.post = DataAdapter.prototype.post;
AutoProcIntegrationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

AutoProcIntegrationDataAdapter.prototype.getByDataCollectionId= function(dataCollectionId){
	this.get('/{token}/proposal/{proposal}/mx/autoprocintegration/datacollection/{0}/list'.format( [dataCollectionId]));
};


AutoProcIntegrationDataAdapter.prototype.getXScaleCompleteness= function(autoProcIntegrationIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/completeness'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleRfactor= function(autoProcIntegrationIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/rfactor'.format( [autoProcIntegrationIdList.toString()]));
};


AutoProcIntegrationDataAdapter.prototype.getXScaleISigma= function(autoProcIntegrationIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/isigma'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleCC2= function(autoProcIntegrationIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/cc2'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleSigmaAno= function(autoProcIntegrationIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/sigmaano'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleWilson= function(autoProcIntegrationIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/wilson'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getXScaleAnnoCorrection= function(autoProcIntegrationIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoprocintegration/{0}/xscale/anomcorr'.format( [autoProcIntegrationIdList.toString()]));
};

AutoProcIntegrationDataAdapter.prototype.getDownloadAttachmentUrl= function(autoProcAttachmentId){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, '/{token}/proposal/{proposal}/mx/autoproc/autoprocattachmentid/{0}/download'.format( [autoProcAttachmentId.toString()]));
};


AutoProcIntegrationDataAdapter.prototype.getPhasingByAutoprocIds= function(autoProcListId){
	 this.get('/{token}/proposal/{proposal}/mx/phasing/autoprocid/{0}/list'.format( [autoProcListId.toString()]));
};

function DataCollectionDataAdapter(args){
	DataAdapter.call(this, args);
}

DataCollectionDataAdapter.prototype.get = DataAdapter.prototype.get;
DataCollectionDataAdapter.prototype.post = DataAdapter.prototype.post;
DataCollectionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DataCollectionDataAdapter.prototype.getBySessionsId= function(sessionsId){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/session/{0}/list'.format( [sessionsId.toString()]));
};

DataCollectionDataAdapter.prototype.getByDataCollectionId= function(dataColletionIds){
	 this.get('/{token}/proposal/{proposal}/mx/datacollection/{0}/get'.format( [dataColletionIds.toString()]));
};

DataCollectionDataAdapter.prototype.getThumbNailById= function(imageId){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/mx/image/{0}/thumbnail'.format([ imageId])));
};

DataCollectionDataAdapter.prototype.getImageById= function(imageId){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/mx/image/{0}/get'.format([ imageId])));
};


DataCollectionDataAdapter.prototype.getCrystalSnapshotByDataCollectionId= function(dataCollectionId, id){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/mx/datacollection/{0}/crystalsnaphot/{1}/get'.format([ dataCollectionId, id])));
};










function MxDataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
	this.mx = new MxDataAdapterGroup(args);
	this.saxs = new SaxsDataAdapterGroup(args);
	this.exi = new ExiDataAdapterGroup(args);
}















































function MxDataAdapterGroup(args){
	this.autoProcIntegrationDataAdapter = new AutoProcIntegrationDataAdapter(args);
	this.dataCollection = new DataCollectionDataAdapter(args);
}



function AuthenticationDataAdapter(args){
	DataAdapter.call(this, args);
}

AuthenticationDataAdapter.prototype.get = DataAdapter.prototype.get;
AuthenticationDataAdapter.prototype.post = DataAdapter.prototype.post;
AuthenticationDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


AuthenticationDataAdapter.prototype.authenticate = function(user, password, url){
	var _this = this;
	
	var site = "ESRF";
	/** SITE **/
	if (url.indexOf("embl-hamburg") != -1){
		site = "EMBL";
	}
	if (url.indexOf("192.109.31.39") != -1){
		site = "EMBL";
	}
	
	
	$.ajax({
		  url: url + '/authenticate?site=' + site,
		  type: 'post',
		  data: {
			  		login : user,
			  		password : password
		  },
		  success: function(data){
			   _this.onSuccess.notify(data);
		  },
		  error: function(error){
			  _this.onError.notify(error);
		  }
	});
};

function DataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
}

function DewarDataAdapter(args){
	DataAdapter.call(this, args);
}

DewarDataAdapter.prototype.get = DataAdapter.prototype.get;
DewarDataAdapter.prototype.post = DataAdapter.prototype.post;
DewarDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DewarDataAdapter.prototype.saveDewar= function(shippingId, dewar){
    var url = ('/{token}/proposal/{proposal}/shipping/{0}/dewar/save'.format( [shippingId]));
	this.post(url, dewar);
};

DewarDataAdapter.prototype.removeDewar= function(shippingId, dewarId){
	var url = ('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/remove'.format( [shippingId, dewarId]));
	this.get(url);
};

DewarDataAdapter.prototype.addDewar= function(shippingId){
   this.saveDewar(shippingId, {});
};


function ProposalDataAdapter(args){
	DataAdapter.call(this, args);
}

ProposalDataAdapter.prototype.get = DataAdapter.prototype.get;
ProposalDataAdapter.prototype.post = DataAdapter.prototype.post;
ProposalDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ProposalDataAdapter.prototype.getProposals= function(){
	this.get('/{token}/proposal/list');
};


ProposalDataAdapter.prototype.getProposalsInfo= function(){
	this.get('/{token}/proposal/{proposal}/technique/saxs/get');
};

ProposalDataAdapter.prototype.getProposalBySessionId= function(sessionId){
	this.get('/{token}/proposal/session/{0}/list'.format([sessionId]));
};

ProposalDataAdapter.prototype.update= function(){
	if (EXI != null){
		if (EXI.proposalManager != null){
			this.onSuccess.attach(function(sender, proposals){
				localStorage.setItem("proposals", JSON.stringify(proposals));
			});
			/** This makes that this attach will be executed in first position **/
			this.onSuccess._listeners.reverse();
		}
	}
	this.getProposalsInfo();
};
function ProposalDataAdapterGroup(args){
	this.authentication = new AuthenticationDataAdapter(args);
	this.dewar = new DewarDataAdapter(args);
	this.proposal = new ProposalDataAdapter(args);
	this.shipping = new ShippingDataAdapter(args);
	this.session = new SessionDataAdapter(args);
}
function SessionDataAdapter(args){
	DataAdapter.call(this, args);
}

SessionDataAdapter.prototype.get = DataAdapter.prototype.get;
SessionDataAdapter.prototype.post = DataAdapter.prototype.post;
SessionDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SessionDataAdapter.prototype.getSessions = function(){
	this.get('/{token}/proposal/{proposal}/session/list');
};



SessionDataAdapter.prototype.getSessionsByDate = function(startDate, endDate){
	this.get('/{token}/proposal/session/list?startdate={0}&enddate={1}'.format([startDate, endDate]));
};
function ShippingDataAdapter(args){
	DataAdapter.call(this, args);
}

ShippingDataAdapter.prototype.get = DataAdapter.prototype.get;
ShippingDataAdapter.prototype.post = DataAdapter.prototype.post;
ShippingDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ShippingDataAdapter.prototype.getShippings = function(){
	this.get('/{token}/proposal/{proposal}/shipping/list');
};

ShippingDataAdapter.prototype.getShipment = function(shippingId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/get'.format([shippingId]));
};

ShippingDataAdapter.prototype.getDewarsByShipmentId = function(shippingId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/list'.format([shippingId]));
};

ShippingDataAdapter.prototype.getLabContacts = function(){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/list');
};

ShippingDataAdapter.prototype.getScientists = function(){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/smis/list');
};

ShippingDataAdapter.prototype.getLabContactById = function(labContactId){
	this.get('/{token}/proposal/{proposal}/shipping/labcontact/{0}/get'.format([labContactId]));
};

ShippingDataAdapter.prototype.saveLabContact = function(labcontact){
    var url = ('/{token}/proposal/{proposal}/shipping/labcontact/save');
	this.post(url, {
		labcontact : JSON.stringify(labcontact)
	});
};

ShippingDataAdapter.prototype.saveShipment = function(shipment ){
	this.post('/{token}/proposal/{proposal}/shipping/save', shipment);
};

ShippingDataAdapter.prototype.addPuck = function(shippingId, dewarId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/add'.format([shippingId, dewarId]));
};

ShippingDataAdapter.prototype.getContainerById = function(shippingId, dewarId, containerId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/get'.format([shippingId, dewarId, containerId]));
};

ShippingDataAdapter.prototype.removeContainerById = function(shippingId, dewarId, containerId){
	this.get('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/remove'.format([shippingId, dewarId, containerId]));
};

ShippingDataAdapter.prototype.saveContainer = function(shippingId, dewarId, containerId, puck){
    var url = ('/{token}/proposal/{proposal}/shipping/{0}/dewar/{1}/puck/{2}/save'.format([shippingId, dewarId, containerId]));
	this.post(url, {
		puck : JSON.stringify(puck)
	});
};


function ProposalManager() {

}

ProposalManager.prototype.get = function(forceUpdate) {
	if ((localStorage.getItem("proposals") == null)||(forceUpdate)){
		var onSuccess= function(sender, proposals){
			localStorage.setItem("proposals", JSON.stringify(proposals));
		};
		EXI.getDataAdapter({async : false, onSuccess : onSuccess}).proposal.proposal.getProposalsInfo();
		
		
	}
	return JSON.parse(localStorage.getItem("proposals"));
};

ProposalManager.prototype.clear = function() {
	localStorage.removeItem('proposals');
};


ProposalManager.prototype.getSessions = function() {
	if (localStorage.getItem("sessions") == null){
		var onSuccess= function(sender, sessions){
			localStorage.setItem("sessions", JSON.stringify(sessions));
		};
		EXI.getDataAdapter({async : false, onSuccess : onSuccess}).proposal.session.getSessions();
	}
	return JSON.parse(localStorage.getItem("sessions"));
};

ProposalManager.prototype.getFutureSessions = function() {
	var sessions = this.getSessions();
	var today = moment();
	var futureSessions = [];
	for (var i = 0; i < sessions.length; i++) {
		if (today.diff(sessions[i].startDate) < 0){
			futureSessions.push(sessions[i]);
		}
	}
	return futureSessions;
};


ProposalManager.prototype.getBufferColors = function() {
	return [ "#ffffcc", "#c7e9b4", "#7fcdbb", "#41b6c4", "#2c7fb8", "#253494" ];
};

ProposalManager.prototype.getLabcontacts = function() {
	var proposals = this.get();
	return proposals[0].labcontacts;
};

ProposalManager.prototype.getLabcontactById = function(labContactId) {
	var labContacts = this.getLabcontacts();
	for (var i = 0; i < labContacts.length; i++) {
		if (labContacts[i].labContactId == labContactId){
			return labContacts[i];
		}
	}
};

ProposalManager.prototype.getPlateTypeById = function(plateTypeId) {
	var types = this.getPlateTypes();
	for (var i = 0; i < types.length; i++) {
		if (types[i].plateTypeId == plateTypeId) {
			return types[i];
		}
	}
	return null;
};

ProposalManager.prototype.getPlateTypes = function() {
	var proposals = this.get();
	/** TODO: This depends on proposal **/
	return proposals[0].plateTypes;

};

ProposalManager.prototype.getPlateByFlavour = function() {
	var plateTypes = this.get()[0].plateTypes;
	return [ plateTypes[0], plateTypes[2], plateTypes[3] ];
};

ProposalManager.prototype.getBufferById = function(bufferId) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].buffers.length; j++) {
			if (proposals[i].buffers[j].bufferId == bufferId) {
				return proposals[i].buffers[j];
			}
		}
	}
};

ProposalManager.prototype.getMacromoleculeById = function(macromoleculeId) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].macromolecules.length; j++) {
			if (proposals[i].macromolecules[j].macromoleculeId == macromoleculeId) {
				return proposals[i].macromolecules[j];
			}
		}
	}
};

ProposalManager.prototype.getMacromoleculeByAcronym = function(acronym) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].macromolecules.length; j++) {
			if (proposals[i].macromolecules[j].acronym == acronym) {
				return proposals[i].macromolecules[j];
			}
		}
	}
};

ProposalManager.prototype.getStockSolutionById = function(stockSolutionId) {
	var proposals = this.get();
	for (var i = 0; i < proposals.length; i++) {
		for (var j = 0; j < proposals[i].stockSolutions.length; j++) {
			if (proposals[i].stockSolutions[j].stockSolutionId == stockSolutionId) {
				return proposals[i].stockSolutions[j];
			}
		}
	}
};

ProposalManager.prototype.getBuffers = function() {
	var proposals = this.get();
	var buffers = [];
	for (var i = 0; i < proposals.length; i++) {
		buffers = buffers.concat(proposals[i].buffers);
	}
	return buffers;
};

ProposalManager.prototype.getMacromolecules = function() {
	var proposals = this.get();
	var macromolecules = [];
	for (var i = 0; i < proposals.length; i++) {
		macromolecules = macromolecules.concat(proposals[i].macromolecules);
	}
	return macromolecules;
};

ProposalManager.prototype.getProposals = function() {
	var proposals = this.get();
	var result = [];
	for (var i = 0; i < proposals.length; i++) {
		proposals[i].proposal[0]["proposal"] = proposals[i].proposal[0].code + proposals[i].proposal[0].number;
		result = result.concat(proposals[i].proposal);
	}
	return result;
};

ProposalManager.prototype.getProposalById = function(proposalId) {
	var proposals = this.get();
	var result = [];
	for (var i = 0; i < proposals.length; i++) {
		if (proposals[i].proposal[0].proposalId == proposalId){
			return proposals[i].proposal[0];
		}
	}
	return result;
};

ProposalManager.prototype.getStockSolutions = function() {
	return this.get()[0].stockSolutions;
};

ProposalManager.prototype.getProteins = function() {
	return this.get()[0].proteins;
};

ProposalManager.prototype.getProteinByAcronym = function(acronym) {
	var proteins = this.getProteins();
	for (var i = 0; i < proteins.length; i++) {
		if (proteins[i].acronym == acronym){
			return proteins[i];
		}
	}
	return null;
};

ProposalManager.prototype.getStockSolutionsBySpecimen = function(macromoleculeId, bufferId) {
	var result = [];
	var stockSolutions = this.getStockSolutions();
	for (var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].macromoleculeId == macromoleculeId) {
			if (stockSolutions[i].bufferId == bufferId) {
				result.push(stockSolutions[i]);
			}
		}
	}
	return result;
};

ProposalManager.prototype.getUnpackedStockSolutions = function() {
	var stockSolutions = this.getStockSolutions();
	var result = [];
	for (var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].boxId == null) {
			result.push(stockSolutions[i]);
		}
	}
	return result;
};

ProposalManager.prototype.getStockSolutionsByDewarId = function(dewarId) {
	var stockSolutions = this.getStockSolutions();
	var result = [];
	for (var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].boxId == dewarId) {
			result.push(stockSolutions[i]);
		}
	}
	return result;
};

function BufferSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

BufferSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
BufferSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
BufferSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

BufferSaxsDataAdapter.prototype.getBuffers= function(){
	this.get('/{token}/proposal/{proposal}/saxs/buffer/list');
};

BufferSaxsDataAdapter.prototype.saveBuffer= function(buffer){
    var url = ('/{token}/proposal/{proposal}/saxs/buffer/save');
	this.post(url, {buffer : JSON.stringify(buffer)});
};
function DataCollectionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

DataCollectionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
DataCollectionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
DataCollectionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByMacromoleculeAcronym= function(macromoleculeAcronym){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/macromoleculeAcronym/{0}/list'.format( [ macromoleculeAcronym]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByKey= function(key, value){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/{0}/{1}/list'.format( [ key, value.toString()]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByDataCollectionId= function(dataCollectionIds){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/dataCollectionId/{0}/list'.format( [ dataCollectionIds]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByIdList= function(dataCollectionIds){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/{0}/list'.format( [ dataCollectionIds]));
};

DataCollectionSaxsDataAdapter.prototype.getDataCollectionsByExperimentId= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/datacollection/experimentId/{0}/list'.format( [ experimentId]));
};



/**
 * 
 * This class represents an data Acquisition
 * 
 * @json a json with the serialization of Experiment3VO
 * 
 */
function Experiment(json) {
	this.json = json;
	this.onSaved = new Event(this);
	this.onError = new Event(this);

	this.name = json.name;
	this.experimentId = json.experimentId;
	this.creationDate = json.creationDate;

	/** For all specimens asynchronous **/
	this.onPlateSaved = new Event(this);

	this.bufferColors =  $.extend({}, EXI.proposalManager.getBufferColors());
	
	this.specimenBuffersColors = this.getSpecimenColors();
	
	for ( var bufferId in this.bufferColors) {
		this.bufferColors[bufferId] = 'black';
	}
	this.setMacromoleculesColors();
}

Experiment.prototype.getSpecimenColorByBufferId = function(specimenId) {
	return this.specimenBuffersColors[specimenId];
};

Experiment.prototype.setMacromoleculesColors = function (){
	var colors = [
					"#66c2a5",
					"#fc8d62",
					"#8da0cb",
					"#e78ac3",
					"#a6d854",
					"#ffd92f",
					"#e5c494"];
	
	
	this.macromoleculeColors = {};
	var macromolecules = this.getMacromolecules();
	for (var i = 0; i < macromolecules.length; i++) {
		this.macromoleculeColors[macromolecules[i].macromoleculeId] = colors[i%colors.length];
	}
};

Experiment.prototype.getHPLCMacromolecule = function() {
	var dcs = this.getDataCollections();
	if (dcs.length >  0){
		for ( var i = 0; i < 1; i++) {
			var meToDc = dcs[i].measurementtodatacollection3VOs;
			if (meToDc != null){
				for ( var j = 0; j < meToDc.length; j++) {
					if (meToDc[j].dataCollectionOrder == 2){
						return this.getSampleById(this.getMeasurementById(meToDc[j].measurementId).specimenId).macromolecule3VO;
					}
				}
			}
		}
	}
};

/**
 * If ((specimen1.specimenId <> specimen2.specimenId)&&(specimen1.bufferId == specimen2.bufferId)) then specimen1.color < specimen2.color
 */
Experiment.prototype.getSpecimenColors = function() {
	var specimens = this.getSamples();
	var bufferSamples = [];

	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].macromolecule3VO === null) {
			bufferSamples.push(specimens[i]);
		}
	}

	var colors = {};
	var buffercolors =  EXI.proposalManager.getBufferColors();
	for ( i = 0; i < bufferSamples.length; i++) {
		colors[bufferSamples[i].specimenId] = buffercolors[i % buffercolors.length];
	}
	return colors;
};

Experiment.prototype.getBuffers = function() {
	var samples = this.getSamples();
	var bufferHash = {};
	var buffers = [];
	if (samples !== null) {
		for ( var i = 0; i < samples.length; i++) {
			if (bufferHash[samples[i].bufferId] === null) {
				buffers.push(BIOSAXS.proposal.getBufferById(samples[i].bufferId));
				bufferHash[samples[i].bufferId] = true;
			}
		}
	}
	return buffers;
};

/** BUFFER **/
Experiment.prototype.getBufferById = function(bufferId) {
	return  EXI.proposalManager.getBufferById(bufferId);
};

/** STOCK SOLUTION **/
Experiment.prototype.getStockSolutions = function() {
	return this.json.stockSolution3VOs;
};

Experiment.prototype.getStockSolutionById = function(stockSolutionId) {
	var stockSolutions = this.getStockSolutions();
	for ( var i = 0; i < stockSolutions.length; i++) {
		if (stockSolutions[i].stockSolutionId == stockSolutionId) {
			return stockSolutions[i];
		}
	}
};

/** This method gets all the macromolecules of the Experiment **/
Experiment.prototype.getMacromolecules = function() {
	var specimens = this.getSamples();
	var macromoleculeIds = {};
	
	var macromolecules = [];
	for (var i = 0; i < specimens.length; i++) {
		if (specimens[i].macromolecule3VO != null){
			if (macromoleculeIds[specimens[i].macromolecule3VO.macromoleculeId] == null){
				macromolecules.push(specimens[i].macromolecule3VO);
				macromoleculeIds[specimens[i].macromolecule3VO.macromoleculeId] = true;
			}
		}
	}
	return macromolecules;
};

/** Return an array with all the specimens collected, it means, where run3VO is not null **/
Experiment.prototype.getMeasurementsWithSubtractionAssociated = function() {
	var specimens = this.getMeasurements();
	var specimenCollected = [];
	for ( var i = 0; i < specimens.length; i++) {
		var specimen = specimens[i];
		if (specimen.run3VO !== null) {
			specimenCollected.push(specimen);
		}
	}
	return specimenCollected;
};

Experiment.prototype.getSamples = function() {
	return this.json.samples3VOs;
};

/** Deprecated changed to getSpecimenById **/
Experiment.prototype.getSampleById = function(specimenId) {
	return this.getSpecimenById(specimenId);
};

Experiment.prototype.getSpecimenById = function(specimenId) {
	var samples = this.getSamples();
	for ( var i = 0; i < samples.length; i++) {
		if (samples[i].specimenId == specimenId) {
			return samples[i];
		}
	}
	return null;
};

Experiment.prototype.getSpecimenByDataCollectionId = function(dataCollectionId) {
	var dataCollection = this.getDataCollectionById(dataCollectionId);
	var measurementHash = {};
	var results = [];
	for ( var j = 0; j < dataCollection.measurementtodatacollection3VOs.length; j++) {
		var measurement = this.getMeasurementById(dataCollection.measurementtodatacollection3VOs[j].measurementId);
		if (measurementHash[measurement.specimenId] == null) {
			results.push(measurement);
			measurementHash[measurement.specimenId] = true;
		}
	}
	return results;
};

Experiment.prototype.setSpecimenById = function(specimen) {
	for ( var i = 0; i < this.json.samples3VOs.length; i++) {
		if (this.json.samples3VOs[i].specimenId == specimen.specimenId) {
			this.json.samples3VOs[i] = specimen;
			return;
		}
	}
	console.log("Specimen with id: " + specimen.specimenId + " not found");
};

Experiment.prototype.setMeasurement = function(measurement) {
	var measurements = this.getMeasurements();
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].measurementId == measurement.measurementId) {
			measurements[i] = measurement;
			return;
		}
	}
};

Experiment.prototype.getConcentrations = function() {
	var concentrations = {};
	var specimens = this.getMeasurements();
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].concentration != null) {
			concentrations[specimens[i].concentration] = [ specimens[i].concentration ];
		}
	}
	var concValues = [];
	for ( var conc in concentrations) {
		if (conc != "null") {
			concValues.push(conc);
		}

	}
	return concValues;
};

Experiment.prototype.getConcentrationsBysample = function(sample) {
	var concentrations = {};
	var samples = this.getSamples();
	for ( var i = 0; i < samples.length; i++) {
		if (samples[i].macromolecule3VO != null) {
			if (samples[i].macromolecule3VO.macromoleculeId == sample.macromolecule3VO.macromoleculeId) {
				if (samples[i].concentration != null) {
					concentrations[samples[i].concentration] = [ samples[i].concentration ];
				}
			}
		}
	}
	var concValues = [];
	for ( var conc in concentrations) {
		if (conc != "null") {
			concValues.push(conc);
		}

	}
	return concValues;
};

Experiment.prototype.setSpecimen = function(specimen) {
	var buffers = this.getBuffers();
	for ( var i = 0; i < buffers.length; i++) {
		var buffer = buffers[i];
		for ( var j = 0; j < buffer.specimen3VOs.length; j++) {
			var specimen3vo = buffer.specimen3VOs[j];
			if (specimen3vo.specimenId == specimen.specimenId) {
				buffer.specimen3VOs[j] = specimen;
				return buffer;
			}
		}
	}
};

/** SAMPLE PLATES **/
Experiment.prototype.getSamplePlates = function() {
	return this.json.samplePlate3VOs;
};

Experiment.prototype.getSamplePlateById = function(samplePlateId) {
	var plates = this.getSamplePlates();
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].samplePlateId == samplePlateId) {
			return plates[i];
		}
	}
};

Experiment.prototype.getSamplePlateBySlotPositionColumn = function(slotPositionColumn) {
	var plates = this.getSamplePlates();
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].slotPositionColumn == slotPositionColumn) {
			return plates[i];
		}
	}
};

Experiment.prototype.getSpecimenByPosition = function(samplePlateId, rowNumber, columnNumber) {
	return this.getSampleByPosition();
};

Experiment.prototype.getSpecimensBySamplePlateId = function(samplePlateId) {
	var specimens = this.getSamples();
	var result = [];
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].sampleplateposition3VO != null) {
			if (specimens[i].sampleplateposition3VO.samplePlateId == samplePlateId) {
				result.push(specimens[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getSampleByPosition = function(samplePlateId, rowNumber, columnNumber) {
	var specimens = this.getSamples();
	var result = [];
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].sampleplateposition3VO != null) {
			if ((specimens[i].sampleplateposition3VO.samplePlateId == samplePlateId) && (specimens[i].sampleplateposition3VO.rowNumber == rowNumber) && (specimens[i].sampleplateposition3VO.columnNumber == columnNumber)) {
				result.push(specimens[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getPlateGroups = function() {
	var plates = this.getSamplePlates();
	var plateGroups = [];
	var keys = {};
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].plategroup3VO != null) {
			var id = plates[i].plategroup3VO.plateGroupId;
			if (keys[id] == null) {
				plateGroups.push(plates[i].plategroup3VO);
				keys[id] = true;
			}
		}
	}
	return plateGroups;
};

Experiment.prototype.getPlatesByPlateGroupId = function(plateGroupId) {
	var plates = this.getSamplePlates();
	var result = [];
	for ( var i = 0; i < plates.length; i++) {
		if (plates[i].plategroup3VO != null) {
			if (plates[i].plategroup3VO.plateGroupId == plateGroupId) {
				result.push(plates[i]);
			}
		}
	}
	return result;
};

Experiment.prototype.getMeasurements = function() {
	var speciments = [];
	var samples = this.getSamples();
	if (samples == null) {
		return [];
	}
	for ( var i = 0; i < samples.length; i++) {
		var sample = samples[i];
		for ( var j = 0; j < sample.measurements.length; j++) {
			speciments.push(sample.measurements[j]);
		}
	}
	return speciments;
};

Experiment.prototype.getMeasurementById = function(measurementId) {
	var specimens = this.getMeasurements();
	for ( var i = 0; i < specimens.length; i++) {
		if (specimens[i].measurementId == measurementId) {
			return specimens[i];
		}
	}
	return null;
};

Experiment.prototype.getMeasurementByDataCollectionId = function(dataCollectionId) {
	var result = [];
	var dataCollection = this.getDataCollectionById(dataCollectionId);
	for ( var i = 0; i < dataCollection.measurementtodatacollection3VOs.length; i++) {
		result.push(this.getMeasurementById(dataCollection.measurementtodatacollection3VOs[i].measurementId));
	}
	return result;
};

/** Data Collection **/

Experiment.prototype.getDataCollections = function() {
	var dc = this.json.dataCollections;
	var dataCollections = [];
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].measurementtodatacollection3VOs.length != 0) {
			dataCollections.push(dc[i]);
		}
	}
	return dataCollections;
};

Experiment.prototype.getDataCollectionsBySpecimenId = function(specimenId) {
	var measurements = this.getMeasurementsBySpecimenId(specimenId);
	var result = [];
	var resultHash = {};
	for ( var i = 0; i < measurements.length; i++) {
		var measurement = measurements[i];
		var dcs = this.getDataCollectionByMeasurementId(measurement.measurementId);
		for ( var j = 0; j < dcs.length; j++) {
			if (resultHash[dcs[j].dataCollectionId] == null) {
				resultHash[dcs[j].dataCollectionId] = true;
				result.push(dcs[j]);
			}
		}
	}
	return result;
};

Experiment.prototype.getMeasurementsBySpecimenId = function(specimenId) {
	var measurements = this.getMeasurements();
	var result = [];
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].specimenId == specimenId) {
			result.push(measurements[i]);
		}
	}
	return result;
};

Experiment.prototype.getDataCollectionByMeasurementId = function(measurementId) {
	var dc = this.getDataCollections();
	var result = [];
	
	function localSort(a, b) {
		return a.dataCollectionOrder - b.dataCollectionOrder;
	}
	
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].measurementtodatacollection3VOs.length != 0) {
			for ( var j = 0; j < dc[i].measurementtodatacollection3VOs.length; j++) {
				var measurement = dc[i].measurementtodatacollection3VOs[j];
				if (measurement.measurementId == measurementId) {
					/** Sorting by dataCollectionOrder **/
					dc[i].measurementtodatacollection3VOs.sort(localSort);
					result.push(dc[i]);
				}
			}
		}
	}
	return result;
};

Experiment.prototype.getSubtractionById = function(subtractionId) {
	var dc = this.getDataCollections();
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].substraction3VOs != null) {
			if (dc[i].substraction3VOs.length > 0) {
				for ( var j = 0; j < dc[i].substraction3VOs.length; j++) {
					if (dc[i].substraction3VOs[j].subtractionId == subtractionId) {
						return dc[i].substraction3VOs[j];
					}
				}
			}
		}
	}
	return null;
};

Experiment.prototype.getDataCollectionById = function(dataCollectionId) {
	var dc = this.json.dataCollections;
	for ( var i = 0; i < dc.length; i++) {
		if (dc[i].dataCollectionId == dataCollectionId) {
			return dc[i];
		}
	}
};

/** For a specimen calculates the volume to load adding all the volume to load of all the measurements **/
Experiment.prototype.getVolumeToLoadBySampleId = function(specimenId) {
	var sample = this.getSpecimenById(specimenId);
	if (sample != null) {
		var volumeToLoad = 0;
		for ( var i = 0; i < sample.measurements.length; i++) {
			volumeToLoad = volumeToLoad + Number(sample.measurements[i].volumeToLoad);
		}
		return volumeToLoad;
	}
};


function ExperimentList(experiments){
	this.experiments = experiments;
	
	this.macromoleculeColors = {}; 
	
	for (var i = 0; i < experiments.length; i++) {
		this.macromoleculeColors = $.extend({}, this.macromoleculeColors, experiments[i].macromoleculeColors); 
	}
}

ExperimentList.prototype.getSpecimenColorByBufferId = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var color = experiment.getSpecimenColorByBufferId(bufferId);
		if (color != null){
			return color;
		}
	}
	return 'black';
};

ExperimentList.prototype.getColorByMacromoleculeId = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var color = experiment.getColorByMacromoleculeId(bufferId);
		if (color != null){
			return color;
		}
	}
	return 'black';
};


ExperimentList.prototype.getMeasurements = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			result.push(measurements[j]);
		} 
	} 
	return result;
};

ExperimentList.prototype.getMeasurementByDataCollectionId = function (dataCollectionId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var dataCollection = this.experiments[i].getMeasurementByDataCollectionId(dataCollectionId);
		if (dataCollection.length != 0){
			return dataCollection;
		}
	}
	return [];
};

ExperimentList.prototype.getMergesByMeasurements = function (measurements){
	var merges = [];
	for ( var i = 0; i < measurements.length; i++) {
		if (measurements[i].merge3VOs != null){
			for ( var j = 0; j < measurements[i].merge3VOs.length; j++) {
				merges.push(measurements[i].merge3VOs[j]);
			}
		}
	}
	return merges;
};

ExperimentList.prototype.getSamplePlateById = function (samplePlateId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var samplePlate = this.experiments[i].getSamplePlateById(samplePlateId);
		if (samplePlate != null){
			return samplePlate;
		}
	}
	return null;
};

ExperimentList.prototype.getMergesByDataCollectionId = function (dataCollectionId){
	return this.getMergesByMeasurements(this.getMeasurementByDataCollectionId(dataCollectionId));
};

ExperimentList.prototype.getMerges = function (){
	return this.getMergesByMeasurements(this.getMeasurements());
};

ExperimentList.prototype.getDataCollectionById = function (dataCollectionId){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var dc = experiment.getDataCollectionById(dataCollectionId);
		if (dc != null){
			return dc;
		}
	}
	return result;
};

ExperimentList.prototype.getDataCollectionByMeasurementId = function (measurementId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var result = experiment.getDataCollectionByMeasurementId(measurementId);
		if (result != null){
			return result;
		}
	}
	return null;
};


ExperimentList.prototype.getMeasurementsNotCollected = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			if (measurements[j].run3VO == null){
				result.push(measurements[j]);
			}
		}
	}
	return result;
};

ExperimentList.prototype.getMeasurementsCollected = function (){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var experiment = this.experiments[i];
		var measurements = experiment.getMeasurements();
		for ( var j = 0; j < measurements.length; j++) {
			if (measurements[j].run3VO != null){
				result.push(measurements[j]);
			}
		}
	}
	return result;
};

ExperimentList.prototype.getMeasurementById = function (specimenId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var specimen = this.experiments[i].getMeasurementById(specimenId);
		if (specimen != null){
			return specimen;
		}
	}
	return null;
};

ExperimentList.prototype.getBufferById = function (bufferId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var buffer = this.experiments[i].getBufferById(bufferId);
		if (buffer != null){
			return buffer;
		}
	}
	return null;
};

ExperimentList.prototype.getSampleById = function (sampleId){
	for ( var i = 0; i < this.experiments.length; i++) {
		var sample = this.experiments[i].getSampleById(sampleId);
		if (sample != null){
			return sample;
		}
	}
	return null;
};

ExperimentList.prototype.getSamplesByCondition = function (macromoleculeId, bufferId){
	var result = [];
	for ( var i = 0; i < this.experiments.length; i++) {
		var samples = this.experiments[i].getSamples();
		for ( var j = 0; j < samples.length; j++) {
			if (samples[j].macromolecule3VO != null){
				if (samples[j].macromolecule3VO.macromoleculeId == macromoleculeId){
					if (samples[j].bufferId == bufferId){
						result.push(samples[j]);
					}
				}
			}
		}
	}
	return result;
};

ExperimentList.prototype.getFrames = function (mergesList){
	var frames = [];
	for ( var i = 0; i < mergesList.length; i++) {
		var merge = mergesList[i];
		if (merge.framelist3VO != null){
			if (merge.framelist3VO.frametolist3VOs != null){
				for ( var j = 0; j < merge.framelist3VO.frametolist3VOs.length; j++) {
					var frame = merge.framelist3VO.frametolist3VOs[j].frame3VO;
					if (frame!= null){
						frames.push(frame);
					}
				}
			}
		}
	}
	return frames;
};

function ExperimentSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

ExperimentSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
ExperimentSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
ExperimentSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ExperimentSaxsDataAdapter.prototype.getByExperimentByKey= function(key, value){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/{1}/list'.format( [key.toString(), value.toString()]));
};

ExperimentSaxsDataAdapter.prototype.getExperiments= function(){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/list');
};

ExperimentSaxsDataAdapter.prototype.getExperimentById= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/get'.format( [experimentId]));
};

ExperimentSaxsDataAdapter.prototype.getExperimentsBySessionId= function(sessionId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/session/{0}/list'.format( [ sessionId]));
};

ExperimentSaxsDataAdapter.prototype.getByExperimentId= function(experimentIds){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/experimentId/{0}/list'.format( [ experimentIds]));
};

ExperimentSaxsDataAdapter.prototype.saveExperiment = function(experimentId, name, comments ){
    var url = ('/{token}/proposal/{proposal}/saxs/experiment/{0}/save'.format([experimentId]));
	this.post(url, {
						name : name,
						comments : comments
	});
};
function FrameSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

FrameSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
FrameSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
FrameSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

FrameSaxsDataAdapter.prototype.getFramesByAverageId= function(averageId){
	this.get('/{0}/saxs/{1}/frame/average/{0}/list'.format( [averageId.toString()]));
};

FrameSaxsDataAdapter.prototype.getFramesURL = function(frames, averages, subtractions,sampleaverages, bufferaverages, models){
	if (frames == null){
		frames = [];
	}
	if (averages == null){
		averages = [];
	}
	if (subtractions == null){
		subtractions = [];
	}
	if (sampleaverages == null){
		sampleaverages = [];
	}
	if (bufferaverages == null){
		bufferaverages = [];
	}
	
	if (models == null){
		models = [];
	}
	
	var connection = EXI.credentialManager.getConnections()[0];
	return connection.url + ('/{0}/proposal/{1}/saxs/frame/datplot?frame={2}&average={3}&subtracted={4}&sampleaverage={5}&bufferaverage={6}&models={7}'.format([ connection.token,connection.user, frames.toString(), averages.toString(),subtractions.toString(), sampleaverages.toString(), bufferaverages.toString(), models.toString() ]));
};

function HPLCSaxsDataAdapter(args){
	 DataAdapter.call(this, args);
}

HPLCSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
HPLCSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
HPLCSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

HPLCSaxsDataAdapter.prototype.getHPLCOverviewByExperimentId= function(experimentId){
	this.get('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/overview'.format( [experimentId]));
};

HPLCSaxsDataAdapter.prototype.getHPLCFramesScatteringURL= function(experimentId, frameIdList){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/saxs/experiment/{0}/hplc/frame/{1}/get?operation=log'.format( [experimentId, frameIdList.toString()])));
};

function MacromoleculeSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

MacromoleculeSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
MacromoleculeSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
MacromoleculeSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

MacromoleculeSaxsDataAdapter.prototype.saveMacromolecule = function(macromolecule){
    var url = ('/{token}/proposal/{proposal}/saxs/macromolecule/save');
	this.post(url, {macromolecule : JSON.stringify(macromolecule)});
};

MacromoleculeSaxsDataAdapter.prototype.getMacromolecules= function(){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/list');
};


MacromoleculeSaxsDataAdapter.prototype.getContactDescriptionUploadFileURL= function(macromoleculeId){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/upload'.format([macromoleculeId])));
};

MacromoleculeSaxsDataAdapter.prototype.removeContactDescriptionFile= function(macromoleculeId){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/contactfile/remove'.format([macromoleculeId]));
};


MacromoleculeSaxsDataAdapter.prototype.getAddPDBURL= function(macromoleculeId){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/upload'.format([macromoleculeId])));
};

MacromoleculeSaxsDataAdapter.prototype.removeStructure= function(macromoleculeId, structureId){
	this.get('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/remove'.format([macromoleculeId, structureId]));
};

MacromoleculeSaxsDataAdapter.prototype.saveStructure= function(macromoleculeId, structureId,  multiplicity, symmetry){
	var url = ('/{token}/proposal/{proposal}/saxs/macromolecule/{0}/pdb/{1}/save'.format([macromoleculeId, structureId]));
	this.post(url, {
						symmetry : symmetry,
						multiplicity : multiplicity
	});
		
};
function MeasurementSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

MeasurementSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
MeasurementSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
MeasurementSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

MeasurementSaxsDataAdapter.prototype.saveMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/save');
	this.post(url, {measurement : JSON.stringify(measurement)});
};

MeasurementSaxsDataAdapter.prototype.removeMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/{0}/remove'.format([measurement.measurementId]));
	this.get(url);
};

MeasurementSaxsDataAdapter.prototype.sortMeasurements= function(experimentId, type){
    this.get('/{token}/proposal/{proposal}/saxs/measurement/experiment/{0}/type/{1}/sort'.format( [experimentId, type]));
};
function ModelSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

ModelSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
ModelSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
ModelSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

ModelSaxsDataAdapter.prototype.saveMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/save');
    this.post(url, {measurement : JSON.stringify(measurement)});
};

ModelSaxsDataAdapter.prototype.removeMeasurement= function(measurement){
    var url = ('/{token}/proposal/{proposal}/saxs/measurement/{0}/remove'.format([measurement.measurementId]));
    this.get(url);
};

ModelSaxsDataAdapter.prototype.getPDB= function(models, superpositions){
    var url = ('/{token}/proposal/{proposal}/saxs/modeling/pdb/get');
    this.post(url, {models : JSON.stringify(models)});

};
function SaxsDataAdapterFactory(args){
	this.proposal = new ProposalDataAdapterGroup(args);
	this.mx = new MxDataAdapterGroup(args);
	this.saxs = new SaxsDataAdapterGroup(args);
	this.exi = new ExiDataAdapterGroup(args);
}















































function SaxsDataAdapterGroup(args){
	this.experiment = new ExperimentSaxsDataAdapter(args);
	this.buffer = new BufferSaxsDataAdapter(args);
	this.macromolecule= new MacromoleculeSaxsDataAdapter(args);
	this.hplc = new HPLCSaxsDataAdapter(args);
	this.measurement = new MeasurementSaxsDataAdapter(args);
	this.specimen = new SpecimenSaxsDataAdapter(args);
	this.stockSolution = new StockSolutionSaxsDataAdapter(args);
	this.subtraction = new SubtractionSaxsDataAdapter(args);
	this.dataCollection = new DataCollectionSaxsDataAdapter(args);
	this.template = new TemplateSaxsDataAdapter(args);
	this.frame = new FrameSaxsDataAdapter(args);
	this.model = new ModelSaxsDataAdapter(args);
}



function SpecimenSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

SpecimenSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
SpecimenSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
SpecimenSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SpecimenSaxsDataAdapter.prototype.saveSpecimen= function(specimen){
    var url = ('/{token}/proposal/{proposal}/saxs/specimen/save');
	this.post(url, {specimen : JSON.stringify(specimen)});
};

SpecimenSaxsDataAdapter.prototype.mergeSpecimens= function(sourceSpecimenId, targetSpecimenId){
    var url = ('/{token}/proposal/{proposal}/saxs/specimen/merge');
	this.post(url, {sourceSpecimenId : sourceSpecimenId, targetSpecimenId : targetSpecimenId });
};
function StockSolutionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

StockSolutionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
StockSolutionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
StockSolutionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

StockSolutionSaxsDataAdapter.prototype.getStockSolutions= function(){
	this.get('/{token}/proposal/{proposal}/saxs/stocksolution/list');
};

StockSolutionSaxsDataAdapter.prototype.saveStockSolution= function(stocksolution){
    var url = ('/{token}/proposal/{proposal}/saxs/stocksolution/save');
	this.post(url, {stocksolution : JSON.stringify(stocksolution)});
};
function SubtractionSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

SubtractionSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
SubtractionSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
SubtractionSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;

SubtractionSaxsDataAdapter.prototype.getSubtractionsBySubtractionIdList= function(subtractionIdList){
	this.get('/{token}/proposal/{proposal}/saxs/subtraction/{0}/list'.format( [subtractionIdList.toString()]));
};

//SubtractionSaxsDataAdapter.prototype.getFramesBySubtractionId= function(subtractionId){
//	this.get('/{0}/saxs/{1}/frame/subtraction/{2}/list'.format( [subtractionId.toString()]));
//};

//SubtractionSaxsDataAdapter.prototype.getFramesMergeURL = function(subtractionIdList, from, to, scale){
//	var tokens = exiSAXS.localExtorage.tokenManager.getTokens();
//	return tokens[0].url +  ('/{0}/saxs/{1}/frame/subtractionId/{2}/datplotmerge?from={3}&to={4}&scale={5}'.format([tokens[0].token, tokens[0].user, subtractionIdList.toString(), from.toString(),to.toString(), scale.toString() ]));
//};

//SubtractionSaxsDataAdapter.prototype.getMergeURL = function(subtractionIdList, from, to, scale){
//	var tokens = exiSAXS.localExtorage.tokenManager.getTokens();
//	return tokens[0].url + ('/{0}/saxs/{1}/frame/subtractionId/{2}/merge?from={3}&to={4}&scale={5}'.format([ tokens[0].token, tokens[0].user,subtractionIdList.toString(), from.toString(),to.toString(), scale.toString() ]));
//};


SubtractionSaxsDataAdapter.prototype.getImage = function(subtractionId, imageType){
	var connection = EXI.credentialManager.getConnections()[0];
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/saxs/subtraction/{0}/image/{1}'.format([ subtractionId, imageType])));
};

SubtractionSaxsDataAdapter.prototype.getZip = function(subtractionId){
	var connection = EXI.credentialManager.getConnections()[0];
//	return connection.url + ('/{token}/proposal/{proposal}/saxs/subtraction/{0}/zip'.format([ subtractionId]));
	return this.getUrl(connection, ('/{token}/proposal/{proposal}/saxs/subtraction/{0}/zip'.format([ subtractionId])));
};
function TemplateSaxsDataAdapter(args){
	DataAdapter.call(this, args);
}

TemplateSaxsDataAdapter.prototype.get = DataAdapter.prototype.get;
TemplateSaxsDataAdapter.prototype.post = DataAdapter.prototype.post;
TemplateSaxsDataAdapter.prototype.getUrl = DataAdapter.prototype.getUrl;


TemplateSaxsDataAdapter.prototype.getTemplateSourceFile = function(experimentId, type){
	var connections = EXI.credentialManager.getConnections();
	return this.getUrl(connections[0], ('/{token}/proposal/{proposal}/saxs/experiment/{0}/samplechanger/type/{1}/template'.format([  experimentId, type])));
};


TemplateSaxsDataAdapter.prototype.saveTemplate = function(name, comments, measurements, experimentId ){
    var url = ('/{token}/proposal/{proposal}/saxs/experiment/save');
	this.post(url, {name : name,
					comments : comments,
					experimentId : experimentId,
					measurements : measurements.toString()
	});
};


function MainMenu(args) {
	this.id = BUI.id();
	this.loginButtonId = 'loginButton' + this.id;
	this.cssClass = 'mainMenu';
	this.isHidden = true;
	if (args != null){
		if (args.cssClass != null){
			this.cssClass = args.cssClass;
		}
		if (args.isHidden != null){
			this.isHidden = args.isHidden;
		}
	}
}

MainMenu.prototype.getMenuItems = function() { return [];};


/**
 * If there is a credential then home tab will redirect to the welcome page (either manager or user)
 */
MainMenu.prototype.getHomeItem = function() { 
	return {
		text : this._convertToHTMLWhiteSpan("Home"),
		cls : 'ExiSAXSMenuToolBar',
		icon : '../images/icon/rsz_ic_home_black_24dp.png',
		handler : function(){
				if (EXI.credentialManager.getCredentials() != null){
					if (EXI.credentialManager.getCredentials().length > 0){
						var username = EXI.credentialManager.getCredentials()[0].username;
						var credential = EXI.credentialManager.getCredentialByUserName(EXI.credentialManager.getCredentials()[0].username);
						if (credential.isManager()){
							location.hash = "/welcome/manager/" + username + "/main";
						}
						else{
							location.hash = "/welcome/user/" + username + "/main";
						}
					}
					else{
						BUI.showError("You should sign up");
					}
				}
				else{
					BUI.showError("You should sign up");
				}
		}
	};
};

MainMenu.prototype.getShipmentItem = function() { 
	var _this = this;
	function onItemCheck(item, checked) {
		if (item.text == "Shipments") {
			location.hash = "/proposal/shipping/nav";
		}
		if (item.text == "Manage shipping addresses") {
			location.hash = "/proposal/addresses/nav";
		}
		if (item.text == "Shipment List") {
			location.hash = "/proposal/shipping/nav";
		}
	}

	function getBiosaxsMenu() {
		var _this = this;
		function onItemCheck(item, checked) {
			if (item.text == "Stock Solutions") {
				location.hash = "/saxs/stocksolution/nav";
			}
			
		}

		return Ext.create('Ext.menu.Menu', {
			items : [ 
						{
							text : 'Stock Solutions',
							icon : '../images/icon/testtube.png',
							handler : onItemCheck 
						} 
			] });
	}
	
	return {
		text : this._convertToHTMLWhiteSpan("Shipment"),
		cls : 'ExiSAXSMenuToolBar',
//		hidden : this.isHidden,
		menu : Ext.create('Ext.menu.Menu', {
			items : [ 
						{
							text : 'BioSAXS',
							icon : '../images/icon/macromolecule.png',
							menu: getBiosaxsMenu()
						}, 
						{
							text : 'Manage shipping addresses',
							icon : '../images/icon/contacts.png',
							handler : onItemCheck 
						}, 
						{
							text : 'Shipments',
							icon : '../images/icon/shipping.png',
							handler : onItemCheck 
						} 
					] })
	};

};


MainMenu.prototype.getHelpMenu = function() {
	var _this = this;
	function onItemCheck(item, checked) {
		if (item.text == "ISPyB Web services API Map") {
			window.open('/exi/documentation/ispyb-api-ws/print.html');
		}
		if (item.text == "Job list") {
			location.hash = "/tool/list";
		}
	}

	return Ext.create('Ext.menu.Menu', {
		items : [

		{
			text : 'Developer',
			checked : false,
			group : 'theme',
			menu : {       
                    items: [
                        {
                            text: 'ISPyB Web services API Map',
                            handler: onItemCheck
                        }, {
                            text: 'How to retrieve data from ISPyB?',
                            handler: onItemCheck
                        }, {
                            text: 'EXI Router',
                            handler: onItemCheck
                        }, {
                            text: 'EXI List Views Objects',
                            handler: onItemCheck
                        }, {
                            text: 'EXI Main View Objects',
                            handler: onItemCheck
                        }
                    ]
                }
		},
		"-",
		{
				text : 'About',
				checked : false,
				group : 'theme',
				handler : onItemCheck }
		] });
};

MainMenu.prototype.getAddCredentialMenu = function() {
	if (EXI.credentialManager.getCredentials() != null){
		if (EXI.credentialManager.getCredentials().length > 0){
			return {
				icon : '../images/icon/rsz_1ic_input_black_24dp.png',
				height : 30,
				text : 'Add',
				handler : function() {
						window.location.href = '#/login';
				} 
			};
		}
	}
};

MainMenu.prototype.populateCredentialsMenu = function() {
	this.credentialsMenu.removeAll();
	var credentialDisplay = "";
	if (EXI.credentialManager.getCredentials() != null) {
		for (var i = 0; i < EXI.credentialManager.getCredentials().length; i++) {
			credentialDisplay = EXI.credentialManager.getCredentials()[i].username;
			if (EXI.credentialManager.getCredentials()[i].activeProposals.length > 0) {
				for (var j = 0; j < EXI.credentialManager.getCredentials()[i].activeProposals.length; j++) {
					credentialDisplay = EXI.credentialManager.getCredentials()[i].activeProposals[j] + "@" + EXI.credentialManager.getCredentials()[i].username;
					this.credentialsMenu.add({
						text : credentialDisplay,
						icon : "../images/icon/rsz_esrflogo80.gif",
						disabled : true });
				}
			} else {
				this.credentialsMenu.add({
					text : credentialDisplay,
					icon : "../images/icon/rsz_esrflogo80.gif",
					disabled : true });
				
			}
			
			
		}
	} 
	if (EXI.credentialManager.getCredentials().length > 0){
		Ext.getCmp(this.loginButtonId).setText("<span style='color:white'>Log out <span style='font-weight:bold;'>" + credentialDisplay + " </span> </span>");
		Ext.getCmp(this.loginButtonId).setIcon("../images/rsz_logout.png");
	}
	else{
		Ext.getCmp(this.loginButtonId).setText("<span style='color:white'>Sign In</span>");
		Ext.getCmp(this.loginButtonId).setIcon("../images/rsz_login.png");
	}
	
	
};

MainMenu.prototype._convertToHTMLWhiteSpan = function(text) {
	return '<span style="color:white">' + text +'</span>';
};

MainMenu.prototype.isLoggedIn = function() {
	return (EXI.credentialManager.getCredentials().length > 0);
};


MainMenu.prototype.getLoginButton = function() {
	var icon =  "../images/rsz_login.png";
	var text =  this._convertToHTMLWhiteSpan("Sign In");
	
	if (EXI.credentialManager.getCredentials().length > 0){
		icon =  "../images/rsz_logout.png";
		text =  this._convertToHTMLWhiteSpan("log out");
	}
	
	return {
		xtype 	: 'splitbutton',
		id		: this.loginButtonId,
		text 	: text,
		cls 	: 'button_log_out',
		icon 	: icon,
		menu 	: this.credentialsMenu,
		handler : function() {
			if (EXI.credentialManager.getCredentials().length == 0){
				location.hash = "/login";
			}
			else{
				location.hash = "/logout";
			}
		} 
	};
};

MainMenu.prototype.getPanel = function() {
	var _this = this;
	
	this.credentialsMenu = new Ext.menu.Menu({
		id : _this.id + "menu",
		items : [
		         _this.getAddCredentialMenu()
         ] 
	});
	
	var items  = this.getMenuItems();
	items.push('->');
	items.push(this.getLoginButton());
	
	this.tb = Ext.create('Ext.toolbar.Toolbar', {
		cls : this.cssClass,
		listeners : {
			afterrender : function(component, eOpts) {
			} 
		},
		items : items
		}
	);
	return this.tb;
};

function MXMainMenu() {
	this.id = BUI.id();
	 MainMenu.call(this, {cssClass : 'mxMainMenu'});
}

MXMainMenu.prototype.populateCredentialsMenu = MainMenu.prototype.populateCredentialsMenu;
MXMainMenu.prototype.init = MainMenu.prototype.init;
MXMainMenu.prototype.getPanel = MainMenu.prototype.getPanel;
MXMainMenu.prototype._convertToHTMLWhiteSpan = MainMenu.prototype._convertToHTMLWhiteSpan;
MXMainMenu.prototype.getAddCredentialMenu = MainMenu.prototype.getAddCredentialMenu;
MXMainMenu.prototype.getLoginButton = MainMenu.prototype.getLoginButton;
MXMainMenu.prototype.setText = MainMenu.prototype.setText;
MXMainMenu.prototype.getHomeItem = MainMenu.prototype.getHomeItem;
MXMainMenu.prototype.getHelpMenu = MainMenu.prototype.getHelpMenu;
MXMainMenu.prototype.getShipmentItem = MainMenu.prototype.getShipmentItem;

MXMainMenu.prototype.getMenuItems = function() {
	return [
		this.getHomeItem(),
		this.getShipmentItem(),
        {
				text : this._convertToHTMLWhiteSpan("Data Explorer"),
				cls : 'ExiSAXSMenuToolBar',
				menu : this.getDataExplorerMenu() 
		},
		{
			text : this._convertToHTMLWhiteSpan("Offline Data Analysis"),
			cls : 'ExiSAXSMenuToolBar',
			menu : this.getOnlineDataAnalisysMenu() 
		}, 
		{
			text : this._convertToHTMLWhiteSpan("Help"),
			cls : 'ExiSAXSMenuToolBar',
			menu : this.getHelpMenu() 
		}, 
		'->',
		{
			xtype : 'textfield',
			name : 'field1',
			value : '1460800',
			emptyText : 'search by data collection Id',
			listeners : {
				specialkey : function(field, e) {
					if (e.getKey() == e.ENTER) {
						location.hash = "/autoprocintegration/datacollection/" + field.getValue() + "/main";
					}
				} 
			} 
		}
	];
};



MXMainMenu.prototype.getOnlineDataAnalisysMenu = function() {
	var _this = this;
	function onItemCheck(item, checked) {
		if (item.text == "Dimple") {
			location.hash = "/tool/dimple/main";
		}
		if (item.text == "Job list") {
			location.hash = "/tool/list";
		}
	}

	return Ext.create('Ext.menu.Menu', {
		items : [
//		{
//		    text: 'Radio Options',
//		    menu: {        // <-- submenu by nested config object
//		        items: [
//		            // stick any markup in a menu
//		            '<b class="menu-title">Choose a Theme</b>',
//		            {
//		                text: 'Aero Glass',
//		                checked: true,
//		                group: 'theme',
//		                checkHandler: onItemCheck
//		            }, {
//		                text: 'Vista Black',
//		                checked: false,
//		                group: 'theme',
//		                checkHandler: onItemCheck
//		            }, {
//		                text: 'Gray Theme',
//		                checked: false,
//		                group: 'theme',
//		                checkHandler: onItemCheck
//		            }, {
//		                text: 'Default Theme',
//		                checked: false,
//		                group: 'theme',
//		                checkHandler: onItemCheck
//		            }
//		        ]
//		    }
//		},
		{
			text : 'Dimple',
			checked : false,
			group : 'theme',
			handler : onItemCheck },
			"-",
			{
				text : 'Job list',
				checked : false,
				group : 'theme',
				handler : onItemCheck }
		] });
};
 
MXMainMenu.prototype.getDataExplorerMenu = function() {
	function onItemCheck(item, checked) {
		if (item.text == "Sessions") {
			location.hash = "/session/nav";
		}
		if (item.text == "Experiments") {
			location.hash = "/experiment/nav";
		}
	}
	return Ext.create('Ext.menu.Menu', {
		items : [ 
			{
				text : 'Sessions',
				icon : '../images/icon/sessions.png',
				handler : onItemCheck 
			}
//			,
//			{
//				text : 'Experiments',
//				checked : false,
//				group : 'theme',
//				handler : onItemCheck 
//			} 
		] 
	});
};


function SAXSMainMenu() {
	this.id = BUI.id();
	MainMenu.call(this, {isHidden : false, cssClass : 'mainMenu'});
}

SAXSMainMenu.prototype.populateCredentialsMenu = MainMenu.prototype.populateCredentialsMenu;
SAXSMainMenu.prototype.init = MainMenu.prototype.init;
SAXSMainMenu.prototype.getPanel = MainMenu.prototype.getPanel;
SAXSMainMenu.prototype._convertToHTMLWhiteSpan = MainMenu.prototype._convertToHTMLWhiteSpan;
SAXSMainMenu.prototype.getAddCredentialMenu = MainMenu.prototype.getAddCredentialMenu;
SAXSMainMenu.prototype.getLoginButton = MainMenu.prototype.getLoginButton;
SAXSMainMenu.prototype.setText = MainMenu.prototype.setText;
SAXSMainMenu.prototype.getHelpMenu = MainMenu.prototype.getHelpMenu;
SAXSMainMenu.prototype.getHomeItem = MainMenu.prototype.getHomeItem;
SAXSMainMenu.prototype.getShipmentItem = MainMenu.prototype.getShipmentItem;


SAXSMainMenu.prototype.getMenuItems = function() {
	
	
	
	return [	
    	this.getHomeItem(),
    	this.getShipmentItem(),
    	{
				text : this._convertToHTMLWhiteSpan("Prepare Experiment"),
				cls : 'ExiSAXSMenuToolBar',
				hidden : this.isHidden,
				menu : this.getPreparationMenu() 
		}, {
				text : this._convertToHTMLWhiteSpan("Data Explorer"),
				cls : 'ExiSAXSMenuToolBar',
				hidden : this.isHidden,
				menu : this.getDataExplorerMenu() 
		},
//		{
//			text : '<span style="color:white">Offline Data Analysis</span>',
//			cls : 'ExiSAXSMenuToolBar',
//			hidden : this.isHidden,
//			menu : this.getOnlineDataAnalisysMenu() 
//		}, 
		{
			text : this._convertToHTMLWhiteSpan("Help"),
			cls : 'ExiSAXSMenuToolBar',
			menu : this.getHelpMenu() 
		}, 
		'->', 
		{
			xtype : 'textfield',
			name : 'field1',
			emptyText : 'search macromolecule',
			hidden : this.isHidden,
			listeners : {
				specialkey : function(field, e) {
					if (e.getKey() == e.ENTER) {
						location.hash = "/datacollection/macromoleculeAcronym/" + field.getValue() + "/main";
					}
				} 
			} 
	}
	];
};




SAXSMainMenu.prototype.getPreparationMenu = function() {
	var _this = this;
	function onItemCheck(item, checked) {
		if (item.text == "Macromolecules") {
			location.hash = "/saxs/macromolecule/nav";
		}
		if (item.text == "Buffers") {
			location.hash = "/saxs/buffer/nav";
		}

		if (item.text == "Sample Tracking") {
			location.hash = "/saxs/shipping/nav";
		}

		if (item.text == "My Experiments") {
			location.hash = "/saxs/template/nav";
		}
	}

	return Ext.create('Ext.menu.Menu', {
		items : [ 
	          {
				text : 'Macromolecules',
				icon : '../images/icon/macromolecule.png',
				handler : onItemCheck 
			}, 
			{
				text : 'Buffers',
				icon : '../images/icon/buffer.jpg',
				handler : onItemCheck 
			}, 
//			"-", 
//			{
//				text : 'Stock Solutions',
//				icon : '../images/icon/testtube.png',
//				handler : onItemCheck 
//			}, 
//			{
//				text : 'Sample Tracking',
//				icon : '../images/icon/shipping.png',
//				menu:this.getSampleTrackingMenu()
//			}, 
			"-", 
			{
				text : 'My Experiments',
				icon : '../images/icon/edit.png',
				handler : onItemCheck 
			}

		] });
};

SAXSMainMenu.prototype.getDataExplorerMenu = function() {
	function onItemCheck(item, checked) {
		if (item.text == "Sessions") {
			location.hash = "/proposal/session/nav";
		}
		if (item.text == "Experiments") {
			location.hash = "/experiment/nav";
		}
	}
	return Ext.create('Ext.menu.Menu', {
		items : [ 
			{
				text : 'Sessions',
				icon : '../images/icon/sessions.png',
				handler : onItemCheck 
			}
		] 
	});
};

SAXSMainMenu.prototype.getDataReductionMenu = function() {
	var _this = this;
	function onItemCheck(item, checked) {
		if (item.text == "Sessions") {
			_this.onSessionClicked.notify();
		}
		if (item.text == "Subtraction") {
			location.hash = "/tool/subtraction/main";
		}
		if (item.text == "Experiments") {
			_this.onExperimentClicked.notify();
		}
	}

	return Ext.create('Ext.menu.Menu', {
		items : [ {
			text : '<span class="menuCategoryItem">SEC</span>' }, "-", {
			text : 'Background Test' }, {
			text : 'Baseline Checker' }, {
			text : 'Frame Merge' }, "-", {
			text : '<span class="menuCategoryItem">INDIVIDUAL CONCENTRATION</span>' }, "-", {
			text : 'Subtraction',
			checked : false,
			group : 'theme',
			checkHandler : onItemCheck }, {
			text : 'Average' }, "-", {
			text : '<span class="menuCategoryItem">COMBINING</span>' }, "-", {
			text : 'Merging tool' } ] });
};



SAXSMainMenu.prototype.getOnlineDataAnalisysMenu = function() {
	var _this = this;
	function onItemCheck(item, checked) {
		if (item.text == "Structure Validation") {
			location.hash = "/tool/crysol/main";
		}
		if (item.text == "Job list") {
			location.hash = "/tool/list";
		}
	}

	return Ext.create('Ext.menu.Menu', {
		items : [
		{
			text : 'Structure Validation',
			checked : false,
			group : 'theme',
			handler : onItemCheck },
			"-",
			{
				text : 'Job list',
				checked : false,
				group : 'theme',
				handler : onItemCheck }
		] });
};


/*function SelectionMenu() {

	
	
}

SelectionMenu.prototype.openViewer = function() {
	var ids = exiSAXS.localExtorage.selectedSubtractionsManager.getDataCollectionIds();
	location.hash = "/datacollection/dataCollectionId/" + ids.toString() +"/primaryviewer";
};

SelectionMenu.prototype.openMerge = function() {
	var ids = exiSAXS.localExtorage.selectedSubtractionsManager.getDataCollectionIds();
	location.hash = "/datacollection/dataCollectionId/" + ids.toString() +"/merge";
};

SelectionMenu.prototype.clear = function() {
	exiSAXS.localExtorage.selectedSubtractionsManager.clear();
	
};


SelectionMenu.prototype.getPanel = function() {
	var _this = this;
	var tb = Ext.create('Ext.toolbar.Toolbar', {
	    height : 50,
	   
	    items: [
	        {
	            xtype: 'splitbutton',
	            text : 'Actions',
	            menu: new Ext.menu.Menu({
	                items: [
	                    	{text: 'Open Viewer', handler: function(){ _this.openViewer(); }},
	                    	{text: 'Open Merging Tool', handler: function(){  _this.openMerge(); }},
	                    	"-",
	                    	{text: 'Create new Project from Selection', handler: function(){ alert("Item 2 clicked"); }},
	                    	"-",
	                    	{text: 'Discard Selection', handler: function(){_this.clear(); }}
	                    
	                    
	                ]
	            })
	        }
	    ]
	});
	return tb;
};
*/

function ExiController(){
	this.init();
}

ExiController.prototype.loadNavigationPanel = function(listView) {
	/** Cleaning up navigation panel * */
	EXI.clearNavigationPanel();
	EXI.setLoadingNavigationPanel(true);
	
	var onSuccess = function(sender, data) {
		/** Load panel * */
		EXI.addNavigationPanel(listView);
		/** Load data * */
		listView.load(data);
		EXI.setLoadingNavigationPanel(false);
	};
	
	/** Handle error * */
	var onError = function(sender, data) {
		EXI.setLoadingNavigationPanel(false);
	};
	
	/** Load data data * */
	return EXI.getDataAdapter({ onSuccess : onSuccess, onError : onError });
};

ExiController.prototype.init = function(){
	function setPageBackground() {

	}
	function notFound() {

	}

	/** Welcome Page **/
	Path.map("#/").to(function() {
		location.hash = '/welcome';
	}).enter(setPageBackground);
	
	Path.map("#/login").to(function() {
		EXI.authenticationForm.show();
	}).enter(setPageBackground);
	
	
	Path.map("#/welcome").to(function() {
		EXI.addMainPanel(new WelcomeMainView());
	}).enter(setPageBackground);
	
	Path.map("#/welcome/user/:user/main").to(function() {
		var user = this.params['user'];
		var mainView = new UserWelcomeMainView();
		EXI.addMainPanel(mainView);
		mainView.load(user);
	}).enter(setPageBackground);
	

	Path.map("#/welcome/manager/:user/main").to(function() {
		var user = this.params['user'];
		var mainView = new ManagerWelcomeMainView();
		EXI.addMainPanel(mainView);
		mainView.load(user);
	}).enter(setPageBackground);
	
	
	Path.map("#/logout").to(function() {
		EXI.credentialManager.logout();
		EXI.proposalManager.clear();
		
	}).enter(setPageBackground);
	
	// Here we set a "root route".  You may have noticed that when you landed on this
	// page you were automatically "redirected" to the "#/users" route.  The definition
	// below tells PathJS to load this route automatically if one isn't provided.
	Path.root("#/");

	// The `Path.rescue()` method takes a function as an argument, and will be called when
	// a route is activated that you have no yet defined an action for.  On this example
	// page, you'll notice there is no defined route for the "Unicorns!?" link.  Since no
	// route is defined, it calls this method instead.
	Path.rescue(notFound);
	
	
};

function MXExiController() {
	this.init();
}

MXExiController.prototype.routeNavigation = function() {
	function loadNavigationPanel(listView) {
		/** Cleaning up navigation panel * */
		EXI.clearNavigationPanel();
		EXI.setLoadingNavigationPanel(true);

		var onSuccess = function(sender, data) {
			/** Load panel * */
			EXI.addNavigationPanel(listView);
			/** Load data * */
			listView.load(data);
			EXI.setLoadingNavigationPanel(false);
		};
		
		/** Handle error * */
		var onError = function(sender, data) {
			EXI.setLoadingNavigationPanel(false);
		};
		
		/** Load data data * */
		return EXI.getDataAdapter({ onSuccess : onSuccess, onError : onError });

	}
	/**
	 * Loading navigation panel
	 * 
	 * #/session/nav #/experiment/nav #/macromolecule/nav
	 * 
	 */
	Path.map("#/mx/:navigation/nav").to(function() {
		/** Session navigation * */
		if (this.params['navigation'] == "session") {
			EXI.clearNavigationPanel();
			EXI.setLoadingNavigationPanel(true);
			var listView = new SessionListView();
			listView.onSelect.attach(function(sender, selected) {
				location.hash = "/datacollection/session/" + selected[0].sessionId + "/main";
			});
			EXI.addNavigationPanel(listView);
			
			listView.load(EXI.proposalManager.getSessions());
			EXI.setLoadingNavigationPanel(false);
		}

	}).enter(this.setPageBackground);

	/** Loading a single session on the navigation panel * */
//	Path.map("#/session/nav/:sessionId/session").to(function() {
//		location.hash = "/datacollection/session/" + this.params['sessionId'] +"/main";
//	}).enter(this.setPageBackground);
	
	
	
	Path.map("#/autoprocintegration/datacollection/:datacollectionId/main").to(function() {
		
		var mainView = new AutoProcIntegrationMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['datacollectionId']);
		/** Selecting data collections from experiment * */
		mainView.onSelect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.append(element);
		});
		mainView.onDeselect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.remove(element);
		});

	}).enter(this.setPageBackground);
	
	
	
	Path.map("#/mx/datacollection/session/:sessionId/main").to(function() {
		var mainView = new DataCollectionMxMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['sessionId']);
		/** Selecting data collections from experiment * */
		mainView.onSelect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.append(element);
		});
		mainView.onDeselect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.remove(element);
		});

	}).enter(this.setPageBackground);

	Path.map("#/mx/datacollection/:dataCollectionId/image/:imageId/main").to(function() {
		var mainView = new ImageMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['imageId'], this.params['dataCollectionId']);
	}).enter(this.setPageBackground);

	Path.map("#/mx/image/:imageId/main").to(function() {
		var mainView = new ImageMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['imageId']);

	}).enter(this.setPageBackground);

	
};

MXExiController.prototype.setPageBackground = function() {

};

MXExiController.prototype.notFound = function() {

};


MXExiController.prototype.init = function() {
	var _this = this;

	function setPageBackground() {
		_this.setPageBackground();
	}
	function notFound() {
		_this.notFound();
	}

	this.routeNavigation();

	Path.rescue(notFound);

};

function OfflineExiController() {
	this.init();
}

OfflineExiController.prototype.setPageBackground = function() {

};

OfflineExiController.prototype.notFound = function() {

};

OfflineExiController.prototype.init = function() {
	var _this = this;

		function setPageBackground() {
			_this.setPageBackground();
		}
		function notFound() {
			_this.notFound();
		}


		Path.map("#/tool/dimple/main").to(function() {
			var mainView = new DimpleMainView();
			EXI.addMainPanel(mainView);
			mainView.load();
		}).enter(this.setPageBackground);
		
		
		Path.map("#/tool/crysol/main").to(function() {
			var mainView = new CrysolMainView();
			EXI.addMainPanel(mainView);
			mainView.load();
		}).enter(this.setPageBackground);

		Path.map("#/tool/subtraction/main").to(function() {
			var mainView = new SubtractionMainView();
			EXI.addMainPanel(mainView);
			mainView.load();
		}).enter(this.setPageBackground);
		
		Path.map("#/tool/list").to(function() {
			var project = null;
			var listView = new RunListView();
			/** When selected move to hash * */
			listView.onSelect.attach(function(sender, selected) {
				var runId = selected[0].internalId;
				var projectId = project.internalId;
				if (selected[0].tool == "Dimple"){
					location.hash = "/project/" +projectId + "/dimple/" + runId + "/main";
				}
				else{
					location.hash = "/project/" +projectId + "/run/" + runId + "/main";
				}
			});

			/** Cleaning up navigation panel * */
			EXI.clearNavigationPanel();
			EXI.setLoadingNavigationPanel(true);

			
			var onSuccess = function(sender, data) {
				project = data[0];
				/** Load panel * */
				EXI.addNavigationPanel(listView);
				/** Load data * */
				listView.load(data[0].runs.reverse());
				EXI.setLoadingNavigationPanel(false);
			};
			
			/** Handle error * */
			var onError = function(sender, data) {
				EXI.setLoadingNavigationPanel(false);
			};
			
			EXI.getDataAdapter({onSuccess : onSuccess, onError :onError}).exi.offline.getProject();
		}).enter(this.setPageBackground);
		

	Path.map("#/project/:projectId/run/:runId/main").to(function() {
		var projectId = this.params['projectId'];
		var runId = this.params['runId'];

		var onSuccess = function(sender, runs) {
			for (var i = 0; i < runs.length; i++) {
				if (runs[i].internalId == runId) {
					var main = new RunMainView();
					EXI.addMainPanel(main);
					main.load(runs[i]);
				}
			}
		};
		var onError = function(sender) {
			BUI.showError("There was an error");
		};
		
		EXI.getDataAdapter({onSuccess : onSuccess, onError :onError}).exi.offline.getRuns(projectId);
	}).enter(this.setPageBackground);


	Path.map("#/project/:projectId/dimple/:runId/main").to(function() {
		var projectId = this.params['projectId'];
		var runId = this.params['runId'];

		var onSuccess = function(sender, runs) {
			for (var i = 0; i < runs.length; i++) {
				if (runs[i].internalId == runId) {
					var main = new DimpleRunMainView();
					EXI.addMainPanel(main);
					main.load(runs[i]);
				}
			}
		};
		var onError = function(sender) {
			BUI.showError("There was an error");
		};
		
		EXI.getDataAdapter({onSuccess : onSuccess, onError :onError}).exi.offline.getRuns(projectId);
	}).enter(this.setPageBackground);
	
	Path.rescue(notFound);

};

function ProposalExiController() {
	this.init();
}

ProposalExiController.prototype.loadNavigationPanel = ExiController.prototype.loadNavigationPanel;

ProposalExiController.prototype.setPageBackground = function() {
};

ProposalExiController.prototype.notFound = function() {
};

ProposalExiController.prototype.init = function() {
	var _this = this;

		function setPageBackground() {
			_this.setPageBackground();
		}
		function notFound() {
			_this.notFound();
		}

		function loadNavigationPanel(listView) {
			return _this.loadNavigationPanel(listView);
		}
		
		var listView = null;
		var adapter = null;
		
		Path.map("#/proposal/:navigation/nav").to(function() {
			/** Session navigation * */
			if (this.params['navigation'] == "session") {
				listView = new SessionListView();
				/** When selected move to hash * */
				listView.onSelect.attach(function(sender, selected) {
					location.hash = "/session/nav/" + selected[0].sessionId + "/session";
				});
				adapter = loadNavigationPanel(listView);
				adapter.proposal.session.getSessions();
			}
			
			if (this.params['navigation'] == "addresses") {
				EXI.clearNavigationPanel();
				EXI.setLoadingNavigationPanel(true);
				listView = new AddressListView();
				listView.onSelect.attach(function(sender, selected) {
					location.hash = "/proposal/address/" + selected[0].labContactId + "/main";
				});
				
				EXI.addNavigationPanel(listView);
				
				adapter = loadNavigationPanel(listView);
				adapter.proposal.shipping.getLabContacts();
				
				/** Loading welcome page **/
				EXI.addMainPanel(new AddressWelcomeMainView());
			}
			
			if (this.params['navigation'] == "shipping") {
				listView = new ShippingListView();
				/** When selected move to hash * */
				listView.onSelect.attach(function(sender, selected) {
					location.hash = "/shipping/" + selected[0].shippingId + "/main";
				});
				adapter = loadNavigationPanel(listView);
				adapter.proposal.shipping.getShippings();
				
				/** Loading welcome page **/
				EXI.addMainPanel(new ShippingWelcomeMainView());
				
			}
		}).enter(this.setPageBackground);
	

		Path.map("#/shipping/:shippingId/main").to(function() {
			var mainView = new ShippingMainView();
			EXI.addMainPanel(mainView);
			mainView.load(this.params['shippingId']);
		}).enter(this.setPageBackground);

		Path.map("#/shipping/main").to(function() {
			var mainView = new ShippingMainView();
			EXI.addMainPanel(mainView);
			mainView.load();
		}).enter(this.setPageBackground);
		
		Path.map("#/proposal/address/:lacontactId/main").to(function() {
			var mainView = new AddressMainView();
			EXI.addMainPanel(mainView);
			mainView.load(this.params['lacontactId']);
		}).enter(this.setPageBackground);
		

		Path.map("#/puck/:containerId/main").to(function() {
			var mainView = new PuckMainView();
			EXI.addMainPanel(mainView);
			mainView.load(this.params['containerId']);
		}).enter(this.setPageBackground);
		
};

function SAXSExiController() {
	this.init();
}

SAXSExiController.prototype.loadNavigationPanel = ExiController.prototype.loadNavigationPanel;

SAXSExiController.prototype.routeNavigation = function() {
	var _this = this;
	function loadNavigationPanel(listView) {
		return _this.loadNavigationPanel(listView);
	}

	/**
	 * Loading navigation panel
	 * 
	 * #/session/nav #/experiment/nav #/macromolecule/nav
	 * 
	 */
	Path.map("#/saxs/:navigation/nav").to(function() {
		var listView = null;
		
		if (this.params['navigation'] == "buffer") {
			EXI.clearNavigationPanel();
			EXI.setLoadingNavigationPanel(true);
			listView = new BufferListView();
			listView.onSelect.attach(function(sender, selected) {
				location.hash = "/buffer/" + selected[0].bufferId + "/main";
			});
			EXI.addNavigationPanel(listView);
			listView.load(EXI.proposalManager.getBuffers());
			EXI.setLoadingNavigationPanel(false);
			
			/** Loading welcome page **/
			EXI.addMainPanel(new BufferWelcomeMainView());
			
		}
		
		if (this.params['navigation'] == "stocksolution") {
			EXI.clearNavigationPanel();
			EXI.setLoadingNavigationPanel(true);
			listView = new StockSolutionListView();
			listView.onSelect.attach(function(sender, selected) {
				location.hash = "/stocksolution/" + selected[0].stockSolutionId + "/main";
			});
			EXI.addNavigationPanel(listView);
			listView.load(EXI.proposalManager.getStockSolutions());
			EXI.setLoadingNavigationPanel(false);
			
			/** Loading welcome page **/
			EXI.addMainPanel(new StockSolutionWelcomeMainView());
			
		}
		
		if (this.params['navigation'] == "macromolecule") {
			EXI.clearNavigationPanel();
			EXI.setLoadingNavigationPanel(true);
			listView = new MacromoleculeListView();
			listView.onSelect.attach(function(sender, selected) {
				location.hash = "/macromolecule/" + selected[0].macromoleculeId + "/main";
			});
			EXI.addNavigationPanel(listView);
			listView.load(EXI.proposalManager.getMacromolecules());
			EXI.setLoadingNavigationPanel(false);
			
			/** Loading welcome page **/
			EXI.addMainPanel(new MacromoleculeWelcomeMainView());
			
		}
		
		if (this.params['navigation'] == "template") {
			EXI.clearNavigationPanel();
			EXI.setLoadingNavigationPanel(true);
			
			listView = new TemplateListView();
			/** When selected move to hash * */
			listView.onSelect.attach(function(sender, selected) {
				location.hash = "/experiment/templateId/" + selected[0].experimentId + "/main";
			});
			var adapter = loadNavigationPanel(listView);
			adapter.saxs.experiment.getByExperimentByKey("experimentType", "TEMPLATE");
			
			/** Loading welcome page **/
			EXI.addMainPanel(new ExperimentWelcomeMainView());
		}


	}).enter(this.setPageBackground);

	/** Loading a single session on the navigation panel * */
	Path.map("#/session/nav/:sessionId/session").to(function() {
		
		var listView = new ExperimentListView();
		
		/** When selected move to hash * */
		listView.onSelect.attach(function(sender, selected) {
			if (selected[0].experimentType == "HPLC"){
				location.hash = "/experiment/hplc/" + selected[0].experimentId + "/main";
			}
			if ((selected[0].experimentType == "STATIC")||(selected[0].experimentType == "CALIBRATION")){
				location.hash = "/experiment/experimentId/" + selected[0].experimentId + "/main";
			}
			if (selected[0].experimentType == "TEMPLATE"){
				location.hash = "/experiment/templateId/" + selected[0].experimentId + "/main";
			}
		});
		loadNavigationPanel(listView).saxs.experiment.getExperimentsBySessionId(this.params['sessionId']);

	}).enter(this.setPageBackground);
};

SAXSExiController.prototype.setPageBackground = function() {

};

SAXSExiController.prototype.notFound = function() {

};

SAXSExiController.prototype.routeExperiment = function() {
	Path.map("#/experiment/experimentId/:experimentId/main").to(function() {
		var mainView = new ExperimentMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['experimentId']);
		/** Selecting data collections from experiment * */
		mainView.onSelect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.append(element);
		});
		mainView.onDeselect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.remove(element);
		});

	}).enter(this.setPageBackground);
	
	Path.map("#/experiment/hplc/:experimentId/main").to(function() {
		var mainView = new HPLCMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['experimentId']);
		/** Selecting data collections from experiment * */
		mainView.onSelect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.append(element);
		});
		mainView.onDeselect.attach(function(sender, element) {
			EXI.localExtorage.selectedSubtractionsManager.remove(element);
		});

	}).enter(this.setPageBackground);
	

	/** Loading Experiments * */
	Path.map("#/experiment/:key/:value/main").to(function() {
		EXI.setLoadingMainPanel();
		var onSuccess = function(sender, data) {
			EXI.setLoadingMainPanel(false);
			if (data != null) {
				if (data.length > 0) {
					var mainView = null;
					if (data[0].experimentType == "STATIC") {
						mainView = new ExperimentMainView();

					}
					if (data[0].experimentType == "HPLC") {
						mainView = new HPLCMainView();
					}

					if (data[0].experimentType == "TEMPLATE") {
						mainView = new TemplateMainView();
					}

					EXI.addMainPanel(mainView);
					mainView.load(data);
					/** Selecting data collections from experiment * */
					mainView.onSelect.attach(function(sender, element) {
						EXI.localExtorage.selectedSubtractionsManager.append(element);
					});
					mainView.onDeselect.attach(function(sender, element) {
						EXI.localExtorage.selectedSubtractionsManager.remove(element);
					});

				}
			}
		};
		if ((this.params['key'] == "experimentId") || (this.params['key'] == "templateId")) {
			EXI.getDataAdapter({onSuccess : onSuccess}).saxs.experiment.getByExperimentId([ this.params['value'] ]);
		} else {
			EXI.getDataAdapter({onSuccess : onSuccess}).saxs.experiment.getByExperimentByKey(this.params['key'], this.params['value']);
		}

	}).enter(this.setPageBackground);
};





SAXSExiController.prototype.routeDataCollection = function() {
	Path.map("#/datacollection/macromoleculeAcronym/:value/main").to(function() {
		/** Loading navidation menu **/
		EXI.setLoadingMainPanel("Searching " + this.params['value']+  "...");
		var onSuccess = function(sender, dataCollections) {
			if (dataCollections != null){
				if (dataCollections.length > 0){
					var mainView = new DataCollectionMainView();
					EXI.addMainPanel(mainView);
					mainView.load(dataCollections);
					/** Selecting data collections from experiment * */
					mainView.onSelect.attach(function(sender, element) {
						EXI.localExtorage.selectedSubtractionsManager.append(element);
					});
					mainView.onDeselect.attach(function(sender, element) {
						EXI.localExtorage.selectedSubtractionsManager.remove(element);
					});
					
					var listView = new DataCollectionListView();
					listView.onSelect.attach(function(sender, selected) {
						mainView.filter( selected[0].macromoleculeId, selected[0].bufferAcronym);
					});
					EXI.addNavigationPanel(listView);
					listView.load(dataCollections);
					EXI.setLoadingNavigationPanel(false);
				}
				else{
					BUI.showWarning("No macromolecule has been found");
				}
			}
			else{
				BUI.showWarning("No data to display");
			}
//			EXI.setLoadingNavigationPanel(false);
			EXI.setLoadingMainPanel(false);
		};
		EXI.getDataAdapter({onSuccess : onSuccess}).saxs.dataCollection.getDataCollectionsByKey(this.params['key'], this.params['value']);

	}).enter(this.setPageBackground);
	
	
	Path.map("#/saxs/datacollection/:key/:value/main").to(function() {
		EXI.setLoadingMainPanel();
		var onSuccess = function(sender, data) {
			var mainView = new DataCollectionMainView();
			EXI.addMainPanel(mainView);
			mainView.load(data);
			EXI.setLoadingMainPanel(false);
			/** Selecting data collections from experiment * */
			mainView.onSelect.attach(function(sender, element) {
				EXI.localExtorage.selectedSubtractionsManager.append(element);
			});
			mainView.onDeselect.attach(function(sender, element) {
				EXI.localExtorage.selectedSubtractionsManager.remove(element);
			});
		};
		EXI.getDataAdapter({onSuccess : onSuccess}).saxs.dataCollection.getDataCollectionsByKey(this.params['key'], this.params['value']);
	}).enter(this.setPageBackground);

	Path.map("#/saxs/datacollection/:key/:value/primaryviewer").to(function() {
		var onSuccess = function(sender, data) {
			var primaryMainView = new PrimaryDataMainView();
			EXI.addMainPanel(primaryMainView);
			primaryMainView.load(data);

		};
		EXI.getDataAdapter({onSuccess : onSuccess}).saxs.dataCollection.getDataCollectionsByKey(this.params['key'], this.params['value']);
	}).enter(this.setPageBackground);
	
	Path.map("#/saxs/datacollection/:key/:value/merge").to(function() {
		var onSuccess = function(sender, data) {
			var primaryMainView = new MergeMainView();
			EXI.addMainPanel(primaryMainView);
			primaryMainView.load(data);

		};
		EXI.getDataAdapter({onSuccess : onSuccess}).saxs.dataCollection.getDataCollectionsByKey(this.params['key'], this.params['value']);
	}).enter(this.setPageBackground);
};



SAXSExiController.prototype.routePrepare = function() {
	Path.map("#/buffer/:bufferId/main").to(function() {
		var mainView = new BufferMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['bufferId']);
	}).enter(this.setPageBackground);
	
	Path.map("#/buffer/add").to(function() {
		var mainView = new BufferMainView();
		EXI.addMainPanel(mainView);
	}).enter(this.setPageBackground);
	
	Path.map("#/macromolecule/:macromoleculeId/main").to(function() {
		var mainView = new MacromoleculeMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['macromoleculeId']);
	}).enter(this.setPageBackground);
	
	Path.map("#/macromolecule/add").to(function() {
		var mainView = new MacromoleculeMainView();
		EXI.addMainPanel(mainView);
	}).enter(this.setPageBackground);
	
	Path.map("#/stocksolution/:stocksolutionId/main").to(function() {
		var mainView = new StockSolutionMainView();
		EXI.addMainPanel(mainView);
		mainView.load(this.params['stocksolutionId']);
	}).enter(this.setPageBackground);
	
	Path.map("#/stocksolution/add").to(function() {
		var mainView = new StockSolutionMainView();
		EXI.addMainPanel(mainView);
		mainView.load();
	}).enter(this.setPageBackground);
	
	
	Path.map("#/prepare/stocksolution/main").to(function() {
		var mainView = new StockSolutionMainView();
		EXI.addMainPanel(mainView);
		mainView.load();
	}).enter(this.setPageBackground);
	
	

//	Path.map("#/prepare/macromolecule/main").to(function() {
//		var mainView = new MacromoleculeMainView();
//		EXI.addMainPanel(mainView);
//		mainView.load();
//	}).enter(this.setPageBackground);

	Path.map("#/prepare/templates/main").to(function() {
		var mainView = new ExperimentDesignerMainView();
		EXI.addMainPanel(mainView);
		mainView.load();
	}).enter(this.setPageBackground);
	
	Path.map("#/prepare/shipmentpreparation").to(function() {
		var mainView = new ShipmentPreparationMainView();
		EXI.addMainPanel(mainView);
		mainView.load();
	}).enter(this.setPageBackground);
	
	
	
//	Path.map("#/prepare/shipment").to(function() {
//		var _this = this;
//		var shipmentForm = new ShipmentForm({
//			creationMode : true,
//			showTitle : false
//		});
//		shipmentForm.onSaved.attach(function(sender, shipment) {
//			location.hash = "/shipping/" + shipment.shippingId + "/main";
//			window.close();
//		});
//		var window = Ext.create('Ext.window.Window', {
//			title : 'New Shipment',
//			height : 600,
//			width : 800,
//			modal : true,
//			layout : 'fit',
//			items : [ shipmentForm.getPanel() ]
//		}).show();
//	}).enter(this.setPageBackground);
	

	Path.map("#/prepare/designer").to(function() {
			var mainView = new DesignerMainView();
			EXI.addMainPanel(mainView);
			mainView.load();
//			function() {
//				var wizardWidget = new WizardWidget({
//					windowMode : true,
//					width : 1200 });
//
//				wizardWidget.onFinished.attach(function(sender, result) {
//					wizardWidget.window.close();
//					EXI.setLoading();
//					var onSuccess = (function(sender, experiment) {
//						location.hash = "/experiment/templateId/" + experiment.experimentId + "/main";
//					});
//					wizardWidget.current.setLoading("ISPyB: Creating experiment");
//					EXI.getDataAdapter({onSuccess : onSuccess}).saxs.template.saveTemplate(result.name, result.comments, result.data);
//				});
//
//				wizardWidget.draw(this.targetId, new MeasurementCreatorStepWizardForm(EXI.proposalManager.getMacromolecules(),EXI.proposalManager.getBuffers()));

			}).enter(this.setPageBackground);
};

SAXSExiController.prototype.init = function() {
	var _this = this;

	function setPageBackground() {
		_this.setPageBackground();
	}
	function notFound() {
		_this.notFound();
	}

	this.routeNavigation();
	this.routeExperiment();
	this.routeDataCollection();
	this.routePrepare();

	

	Path.map("#/project/:projectId/run/:runId/main").to(function() {
		var projectId = this.params['projectId'];
		var runId = this.params['runId'];

		var onSuccess = function(sender, runs) {
			for (var i = 0; i < runs.length; i++) {
				if (runs[i].internalId == runId) {
					var main = new RunMainView();
					EXI.addMainPanel(main);
					main.load(runs[i]);
				}
			}
		};
		
		var onError = function(sender, runs) {
			
		};
		
		EXI.getDataAdapter({onSuccess : onSuccess, onError :onError}).exi.offline.getRuns(projectId);
//		exidataAdapter.getRuns(projectId);
	}).enter(this.setPageBackground);
	

	Path.rescue(notFound);

};


function Credential(username, roles, token, url, exiUrl,activeProposals, properties) {
	this.username = username.toLowerCase();
	this.roles = roles;
	this.url = url;
	this.exiUrl = exiUrl;
	this.token = token;
	this.activeProposals = activeProposals;
	this.properties = properties;
}

Credential.prototype.isManager = function() {
	return this._checkRole("manager");
};

Credential.prototype.isLocalContact = function() {
	return this._checkRole("localcontact");
};

Credential.prototype._checkRole = function(role) {
	return JSON.stringify(this.roles).toLowerCase().indexOf(role) != -1;
};

function CredentialManager(){
	this.onLogin = new Event(this);
	this.onLogout = new Event(this);
	this.onActiveProposalChanged = new Event(this);
}

CredentialManager.prototype.addCredential = function(username, roles, token, url, exiUrl, properties){
	var credential = new Credential(username, roles, token, url, exiUrl, [], properties);
	/** Writing to ExtLocalStorage * */
	if (localStorage.getItem("credentials") == null) {
		localStorage.setItem("credentials", "[]");
	}
	var credentials = this.getCredentials();
	credentials.push(credential);
	localStorage.setItem("credentials", JSON.stringify(credentials));
	this.onLogin.notify(credential);
};

CredentialManager.prototype.getCredentials = function(){
	var credentials = [];
	if (JSON.parse(localStorage.getItem("credentials")) != null){
		credentials = JSON.parse(localStorage.getItem("credentials"));
	}
	return credentials;
};

/** Given a beamline name it return MX or SAXS **/
CredentialManager.prototype.getTechniqueByBeamline = function(beamlineName){
	var connections = this.getConnections();
	for (var i = 0; i < connections.length; i++) {
		if (JSON.stringify(connections[i].beamlines.MX).toUpperCase().indexOf(beamlineName.toUpperCase()) != -1){
			return "MX";
		}
		if (JSON.stringify(connections[i].beamlines.SAXS).toUpperCase().indexOf(beamlineName.toUpperCase()) != -1){
			return "SAXS";
		}
	}
	return "UNKNOW";
	
};

CredentialManager.prototype.getConnections = function(){
	var credentials = this.getCredentials();
	var connectors = [];
	for (var i = 0; i < credentials.length; i++) {
		if (credentials[i].activeProposals.length > 0){
			for (var j = 0; j < credentials[i].activeProposals.length; j++) {
				connectors.push({
					username : credentials[i].username,
					url : credentials[i].url,
					exiUrl : credentials[i].exiUrl,
					token : credentials[i].token,
					beamlines : credentials[i].properties.beamlines,
					proposal : credentials[i].activeProposals[j] });
			}
		}
		else{
				connectors.push({
					username : credentials[i].username,
					url : credentials[i].url,
					exiUrl : credentials[i].exiUrl,
					token : credentials[i].token,
					beamlines : credentials[i].properties.beamlines,
					proposal : null 
				});
		}
	}
	return connectors;
};

CredentialManager.prototype.getCredentialByUserName = function(username, roles, token, url){
	var credentials = this.getCredentials();
	for (var i = 0; i < credentials.length; i++) {
		if (credentials[i].username == username) {
			return new Credential(
					credentials[i].username, 
					credentials[i].roles, 
					credentials[i].token, 
					credentials[i].url,
					credentials[i].activeProposals);
		}
	}
};

CredentialManager.prototype.logout = function(username, roles, token, url){
	localStorage.removeItem('credentials');
	this.onLogout.notify();
};

CredentialManager.prototype.setActiveProposal = function(username, proposal){
	var credentials = this.getCredentials();
	for (var i = 0; i < credentials.length; i++) {
		if (credentials[i].username.toLowerCase() == username.toLowerCase()) {
			credentials[i].activeProposals = [proposal];
			localStorage.setItem("credentials", JSON.stringify(credentials));
			localStorage.removeItem("sessions");
			this.onActiveProposalChanged.notify();
		}
	}
};


var BUI = {
	//interval : 60000,
	interval : 40000,
	rainbow : function(numOfSteps, step) {
		// This function generates vibrant, "evenly spaced" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.
		// Adam Cole, 2011-Sept-14
		// HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
		var r, g, b;
		var h = step / numOfSteps;
		var i = ~~(h * 6);
		var f = h * 6 - i;
		var q = 1 - f;
		switch (i % 6) {
			case 0:
				r = 1; g = f; b = 0;
				break;
			case 1:
				r = q; g = 1; b = 0;
				break;
			case 2:
				r = 0; g = 1; b = f;
				break;
			case 3:
				r = 0; g = q; b = 1;
				break;
			case 4:
				r = f; g = 0; b = 1;
				break;
			case 5:
				r = 1; g = 0; b = q;
				break;
		}
		var c = "#" + ("00" + (~~(r * 255)).toString(16)).slice(-2) + ("00" + (~~(g * 255)).toString(16)).slice(-2) + ("00" + (~~(b * 255)).toString(16)).slice(-2);
		return (c);
	},
	groupBy : function(array , f ){
		/**
		 * Groups an array based on a function
		 * Example:
		 * 		data =  this.groupBy(data, function(item){
		 * 			return [item.bufferAcronym];
		 *		});
		 * 
		 */
		  var groups = {};
		  array.forEach( function( o )
		  {
		    var group = JSON.stringify( f(o) );
		    groups[group] = groups[group] || [];
		    groups[group].push( o );  
		  });
		  return Object.keys(groups).map( function( group ){
			  return groups[group]; 
		  });
	},
		
	getFileNameByPath : function(filePath) {
		if (filePath != null){
			var split = filePath.split("/");
			if (split.length > 0){
				return split[split.length - 1];
			}
		}
		return "Not file";
	},
	getUpdateInterval : function() {
		this.interval = this.interval + 2000;
		return this.interval;
	},
	getRadiationDamageThreshold : function() {
		return 0.7;
	},
	getQualityThreshold : function() {
		return 0.7;
	},
	getCreateShipmentURL : function() {
		return '/ispyb/user/viewProjectList.do?reqCode=display&menu=create_shipment';
	},
	getCreateShipmentList : function() {
		return '/ispyb/user/viewProjectList.do?reqCode=display&menu=list_shipment';
	},
	getShippingURL : function(shippingId) {
		return '/ispyb/user/viewProjectList.do?reqCode=display&menu=shipment&shippingId=' + shippingId;
	},

	getMacromoleculeResultsURLByMultipleSearch : function(array) {
		return '/ispyb/user/viewProjectList.do?reqCode=display&menu=macromolecule&search=' +
		        JSON.stringify(array).replace(new RegExp("\"", 'g'), "'");
	},
	getMacromoleculeResultsURL : function(macromoleculeId) {
		return '/ispyb/user/viewProjectList.do?reqCode=display&menu=macromolecule&macromoleculeId=' + macromoleculeId;
	},
	getMacromoleculeBufferResultsURL : function(macromoleculeId, bufferId) {
		return '/ispyb/user/viewProjectList.do?reqCode=display&menu=macromolecule&bufferId=' + bufferId + '&macromoleculeId=' + macromoleculeId;
	},

	getMacromoleculeHeader : function(macromoleculeId) {

		function getHTMLSource(macromoleculeId) {
			if (macromoleculeId != null) {
				var html = BUI.createFormLabel("Name :", BIOSAXS.proposal.getMacromoleculeById(macromoleculeId).name, 75, 400);
				html = html + BUI.createFormLabel("Acronym :", BIOSAXS.proposal.getMacromoleculeById(macromoleculeId).acronym, 75, 400);
				if (BIOSAXS.proposal.getMacromoleculeById(macromoleculeId).comments != null) {
					html = html + BUI.createFormLabel("Comments :", BIOSAXS.proposal.getMacromoleculeById(macromoleculeId).comments, 75, 400);
				}
				return html;
			}
		}

		return Ext.create('Ext.container.Container', {
			frame : false,
			layout : 'hbox',
			title : 'Macromolecule',
			bodyPadding : '5',
			width : 890,
			margin : '0 0 10 0',
			height : 100,
			style : {
				borderColor : '#BDBDBD',
				borderStyle : 'solid',
				borderWidth : '1px'
			},
			fieldDefaults : {
				msgTarget : 'side',
				labelWidth : 100
			},
			items : [ {
				margin : "10 0 0 10",
				width : 475,
				border : 0,
				html : getHTMLSource(macromoleculeId)
			}, {
				margin : "10 0 0 10",
				width : 475,
				border : 0,
				html : BUI.getZipHTMLByMacromoleculeId(macromoleculeId)
			}
			]
		});
	},

	getZipHTMLByMacromoleculeId : function(macromoleculeId) {
		if (macromoleculeId != null) {
			var fileName = BIOSAXS.proposal.getMacromoleculeById(macromoleculeId).acronym;
			return "<div><a style='color:blue;' href='/ispyb/user/dataadapter.do?reqCode=getZipFileByMacromoleculeId&fileName=" + fileName +
				"&macromoleculeId=" + macromoleculeId + "'><img src='../images/download.png' /> Download</a></div>";
		}
	},
	getZipHTMLByExperimentId : function(experimentId, filename) {
		if (filename == null){
			filename = "experiment";
		}
		return "<div><a style='color:blue;' href='/ispyb/user/dataadapter.do?reqCode=getZipFileByExperimentId&fileName=" + filename +
		       "&experimentId=" + experimentId + "'><img src='../images/download.png' /> Download</a></div>";
	},
	
	getZipURLByAverageId : function(averageId, filename) {
		if (filename == null){
			filename = "experiment";
		}
		return "/ispyb/user/dataadapter.do?reqCode=getZipFileByAverageListId&f&mergeIdsList=" + averageId + "&fileName=" + filename;
	},
	getZipURLBySubtractionId : function(subtractionId, filename) {
		if (filename == null){
			filename = "experiment";
		}
		return "/ispyb/user/dataadapter.do?reqCode=getZipFileByAverageListId&f&subtractionIdList=" + subtractionId + "&fileName=" + filename;
	},
	
	
	getZipHTMLByFrameRangeId : function(experimentId, start, end) {
		var fileName = "experiment";
		return "<div><a style='color:blue;' href='/ispyb/user/dataadapter.do?reqCode=getZipFileH5ByFramesRange&f&experimentId=" + experimentId + 
		       "&start=" + Number(start) +"&end="+ Number(end)+"'><img src='../images/download.png' /> Download</a></div>";
	},
	getZipFrameHPLCUrl : function(experimentId, start, end) {
		return "/ispyb/user/dataadapter.do?reqCode=getZipFileH5ByFramesRange&f&experimentId=" + experimentId + "&start=" + Number(start) +"&end="+ Number(end);
	},
	
	getQueueUrl : function() {
		return "/ispyb/user/dataadapter.do?reqCode=getPagingCompactAnalysisByProposalId";
	},
	
	getQueueUrlByExperiment: function(experimentId) {
		return "/ispyb/user/dataadapter.do?reqCode=getPagingCompactAnalysisByExperimentId&f&experimentId=" + experimentId;
	},
	getStandardDeviation : function(values) {
		var sum = 0;
		var count = 0;
		var avg = null;

		var curatedValues = [];
		for ( var i = 0; i < values.length; i++) {
			var value = values[i];
			if (value != null) {
				if (!isNaN(value)) {
					count = count + 1;
					sum = sum + Number(value);
					curatedValues.push(Number(value));
				}
			}
		}

		if (count > 0) {
			avg = sum / count;
		} else {
			avg = sum;
		}
		var aux = 0;
		for ( i = 0; i < curatedValues.length; i++) {
			aux = aux + Math.pow(curatedValues[i] - avg, 2);
		}
		/** std **/
		var std = Math.sqrt(aux / count);
		return {
			std : (std),
			sum : (sum),
			avg : (avg),
			validNumber : count,
			totalNumber : values.length,
			values : values
		};
	},
	
	getHTMLTableForFrameAveraged : function(bufferAcronym, macromoleculeAcronym, bbmerges, molmerges, bamerges, totalframes, bufferId,macromoleculeId, macromoleculeColor) {
		
		function getFrameSpan(framesMerged, total) {
			return "<td style='font:normal 9px tahoma,arial,verdana,sans-serif;color:" + "black" + "'>(" + framesMerged + " of " + total + ")</td>";
		}

		function getColorFrame(framesMerged, total) {
			if (framesMerged / total < 0.5) {
				return "#FA5858";
			}
			if ((framesMerged / total >= 0.5) && (framesMerged / total < 0.8)) {
				return "#FF9900";
			}
			return "white";
		}

		function getRow(color, acroynm, framesMerged, totalframes) {
			return 	"<tr style='background-color:" +
					getColorFrame(framesMerged, totalframes) +
					";height:12px;padding:1px;'><td style=' width:10px; height:10px;'> "  +
					BUI.getRectangleColorDIV(color, 10, 10) +
					"</td> <td style='padding:5px;'> " + acroynm + "</td>" +
					getFrameSpan(framesMerged, totalframes) + "</tr>";
		}

		var html = "<table style='margin: 1,1,1,1;width:100%;font:normal 10px tahoma,arial,verdana,sans-serif;'>";

		/** Buffer Before **/
		if (bufferAcronym != null) {
			if (bbmerges != null) {
				color = BIOSAXS.proposal.bufferColors[bufferId];
				html = html + getRow(color, bufferAcronym, bbmerges, totalframes);
			}
		}

		/** Molecule **/
		if (macromoleculeAcronym != null) {
			if (molmerges != null) {
				if (macromoleculeColor == null){
					color = BIOSAXS.proposal.macromoleculeColors[macromoleculeId];
				}
				else{
					color = macromoleculeColor; //BIOSAXS.proposal.macromoleculeColors[macromoleculeId];
				}
				html = html + getRow(color, macromoleculeAcronym, molmerges, totalframes);
			}
		}

		/** Buffer After **/
		if (bufferAcronym != null) {
			if (bamerges != null) {
				color = BIOSAXS.proposal.bufferColors[bufferId];
				html = html + getRow(color, bufferAcronym, bamerges, totalframes);
			}
		}
		return html + "</table>";
	},
	isWebGLEnabled : function(return_context) {
		if (!!window.WebGLRenderingContext) {
			var canvas = document.createElement("canvas");
			names = [ "webgl", "experimental-webgl", "moz-webgl", "webkit-3d" ];
			context = false;
			for ( var i = 0; i < 4; i++) {
				try {
					context = canvas.getContext(names[i]);
					if (context && typeof context.getParameter == "function") {
						// WebGL is enabled                    
						if (return_context) {
							// return WebGL object if the function's argument is present
							return {
								name : names[i],
								gl : context
							};
						}
						// else, return just true
						return true;
					}
				} catch (e) {
				}
			}
			// WebGL is supported, but disabled
			return false;
		}
		// WebGL not supported28.    
		return false;
	},
	getHTMLTableForPrefixes : function(bufferBeforeaverageFilePath, averageFilePath, bufferAfterAverageFilePath) {

		function getRow(bufferBeforeaverageFilePath) {
			file = bufferBeforeaverageFilePath;
			try {
				file = bufferBeforeaverageFilePath.split("/")[bufferBeforeaverageFilePath.split("/").length - 1];
			} catch (e) {
				file = "NA";
			}
			return "<tr><td  style='height:12px;padding:5px;'>" + file + "</td></tr>";
		}
		var html = "<table style='margin: 1,1,1,1;width:100%;font:normal 10px tahoma,arial,verdana,sans-serif;'>";

		/** Buffer Before **/
		if (bufferBeforeaverageFilePath != null) {
			html = html + getRow(bufferBeforeaverageFilePath);
		}

		/** Molecule **/
		if (averageFilePath != null) {
			html = html + getRow(averageFilePath);
		}

		/** Buffer After **/
		if (bufferAfterAverageFilePath != null) {
			html = html + getRow(bufferAfterAverageFilePath);
		}
		return html + "</table>";
	},

	getBaseURL : function() {
		return '/ispyb/user/dataadapter.do';
	},

	getPrintcomponentURL : function(dewarId) {
		return '/ispyb/user/viewDewarAction.do?reqCode=generateLabels&dewarId=' + dewarId;

	},
	getPDBVisualizerURL : function(modelId, subtractionId, experimentId) {
		return '/ispyb/user/viewProjectList.do?reqCode=display&menu=PDBVisualizer&modelId=' + modelId + '&experimentId=' + experimentId +
			'&subtractionId=' + subtractionId;
	},

	getURL : function() {
		return this.getBaseURL() + '?reqCode=getImage';

	},
	getAbinitioImageURL : function() {
		return this.getBaseURL() + '?reqCode=getAbinitioImage';
	},
	getNSDImageURL : function(modelListId) {
		return BUI.getAbinitioImageURL() + '&type=NSD&modelListId=' + modelListId;
	},
	getCHI2ImageURL : function(modelListId) {
		return BUI.getAbinitioImageURL() + '&type=CHI2&modelListId=' + modelListId;
	},
	getModelFile : function(type, modelId, format) {
		return this.getBaseURL() + '?reqCode=getModelFile' + "&type=" + type + "&modelId=" + modelId + "&format=" + format;
	},
	getPdbURL : function() {
		return this.getBaseURL() + '?reqCode=getPdbFiles';
	},
	getStvArray : function(value, error) {
		value = Number(value);
		error = Number(error);
		return [ value - error, value, value + error ];
	},
	getPointArrayForDygraph : function(x, y, error) {
		return [ x, BUI.getStvArray(y, error) ];
	},
	createDIV : function(text, width, className, backgroundColor) {
		var nameContainer = document.createElement("div");
		var nameSpan = document.createElement("span");
		if (className != null) {
			nameSpan.setAttribute("class", className);
		}
		if (backgroundColor != null) {
			nameSpan.setAttribute("style", "float:left;width:" + width + "px;height:18px;background-color:" + backgroundColor);
		} else {
			nameSpan.setAttribute("style", "float:left;width:" + width + "px;height:18px;");
		}
		nameSpan.appendChild(document.createTextNode(text));
		nameContainer.appendChild(nameSpan);
		return nameContainer;
	},

	createFormLabel : function(labelText, text, labelWidth, textWidth, backgroundColor) {
		var div = document.createElement("div");

		div.appendChild(BUI.createDIV(labelText, labelWidth, "bLabel", backgroundColor));
		div.appendChild(BUI.createDIV(text, textWidth, "btext", backgroundColor));
		return div.innerHTML;
	},

	createTextArea : function(labelText, text, labelWidth, rows, cols) {
		var div = document.createElement("div");
		div.appendChild(BUI.createDIV(labelText, labelWidth, "bLabel"));
		var textArea = document.createElement("textarea");
		textArea.setAttribute("rows", rows);
		textArea.setAttribute("cols", cols);
		textArea.appendChild(document.createTextNode(text));
		div.appendChild(textArea);
		return div.innerHTML;
	},

	showBetaWarning : function() {
		alert("ISPyB for Biosaxs version Beta has not this functionality enabled");
	},

	formatValuesErrorUnitsScientificFormat : function(val, error, unit, args) {
		var fontSize = 14;
		var decimals = 2;
		var errorFontSize = 10;
		/** line break **/
		var lineBreak = false;
		if (args != null) {
			if (args.fontSize != null) {
				fontSize = args.fontSize;
			}
			if (args.decimals != null) {
				decimals = args.decimals;
			}
			if (args.errorFontSize != null) {
				errorFontSize = args.errorFontSize;
			}
			if (args.lineBreak != null) {
				lineBreak = args.lineBreak;
			}

		}

		if (val == "") {
			return "";
		}
		if (error == null) {
			return "<span style='font-size:" + fontSize + "px'>" + Number(val).toFixed(decimals) + "</span>";
		}
		var html = "<span style='font-size:" + fontSize + "px'>" + Number(val).toFixed(decimals) + "<span style='font-size:" + errorFontSize +
			   "px;color:gray'>  " + unit + "</span></span>";
		if (lineBreak) {
			html = html + "<br/>";
		}
		return html + "<span style='font-size:" + errorFontSize + "px'> &#177; " + Number(Number(error).toFixed(3)).toExponential() +
			      "</span></span>";
	},

	formatValuesErrorUnits : function(val, error, unit, args) {
		var fontSize = 16;
		var decimals = 2;
		var errorFontSize = 10;
		/** line break **/
		var lineBreak = true;
		if (args != null) {
			if (args.fontSize != null) {
				fontSize = args.fontSize;
			}
			if (args.decimals != null) {
				decimals = args.decimals;
			}
			if (args.errorFontSize != null) {
				errorFontSize = args.errorFontSize;
			}
			if (args.lineBreak != null) {
				lineBreak = args.lineBreak;
			}

		}

		if (val == "") {
			return "";
		}
		if (error == null) {
			return "<span style='font-size:" + fontSize + "px'>" + Number(val).toFixed(decimals) + "</span>";
		}
		var html = "<span style='font-size:" + fontSize + "px'>" + Number(val).toFixed(decimals) + "<span style='font-size:" + errorFontSize +
			   "px;color:gray'>  " + unit + "</span></span>";
		if (lineBreak) {
			html = html + "<br/>";
		}
		return html + "<span style='font-size:" + errorFontSize + "px'> &#177; " + Number(Number(error).toFixed(8)).toExponential() +
			      "</span></span>";
	},

	formatValuesUnits : function(val, unit, args) {
		var fontSize = 12;
		var decimals = 2;
		var unitsFontSize = 10;
		if (args != null) {
			if (args.fontSize != null) {
				fontSize = args.fontSize;
			}
			if (args.decimals != null) {
				decimals = args.decimals;
			}
			if (args.unitsFontSize != null) {
				unitsFontSize = args.unitsFontSize;
			}

		}

		if (val == "") {
			return "";
		}
		
		if (unit == null) {
			return "<span style='font-size:" + fontSize + "px'>" + Number(val).toFixed(decimals) + "</span>";
		}
		return "<span style='font-size:" + fontSize + "px'>" + Number(val).toFixed(decimals) + " </span><span style='font-size:" + unitsFontSize +
		       "px;color:gray'>  " + unit + "</span></span>";
	},

	getGreenButton : function(text, args) {
		var width = 70;
		var height = 20;
		if (args != null) {
			if (args.width != null) {
				width = args.width;
			}
			if (args.height != null) {
				height = args.height;
			}
		}

		return '<input type="button" name="btn" style= "font-size:9px;width:' + width + 'px; height:' + height + 'px" class="btn-green" value="' + text + '"/>';
	},
	getBlueButton : function(text, args) {
			var width = 70;
			var height = 20;
			if (args != null) {
				if (args.width != null) {
					width = args.width;
				}
				if (args.height != null) {
					height = args.height;
				}
			}

			return '<input type="button" name="btn" style= "font-size:9px;width:' + width + 'px; height:' + height + 'px" class="btn-blue" value="' + text + '"/>';
	},

	getSubmitGreenButton : function(text) {
		return '<input type="submit" type="button" name="btn" class="btn-green" value="' + text + '"/>';
	},

	getRedButton : function(text) {
		return '<input type="button"  name="btn" class="btn-red" value="' + text + '" />';

	},
	getRectangleColorDIV : function(color, height, width) {
		return '<div style="border: 1px solid gray;background-color: ' + color + '; height:' + height + 'px;width:' + width + 'px" ></div>';
	},

	openBufferWindow : function(bufferId) {
		var window = new BufferWindow();
		window.draw(tabs.experiment.getBufferById(bufferId), tabs.experiment);
	},

	/** Render for safety levels on grids **/
	safetyRenderer : function(val, y, specimen) {
		var color = val;
		if (val == "YELLOW") {
			color = "#E9AB17";
		}
		return '<span style="color:' + color + ';">' + val + '</span>';
	},

	getSampleColor : function() {
		return '#CB181D';
	},

	getLightSampleColor : function() {
		return '#FCBBA1';
	},

	getBufferColor : function() {
		return '#6A51A3';
	},
	getLightBufferColor : function() {
		return '#BCBDDC';
	},

	formatConcentration : function(val) {
		if (val != null) {
			return "<span style='font-size:16px'>" + Number(val).toFixed(2) + "</span><span style='font-size:9px'> mg/ml </span>";
		}
		return val;
	},

	formatVolume : function(sample, volume) {
		if (Number(sample.data.volumeToLoad) > Number(sample.data.volume)) {
			return "<span style='color:red;font-weight:bold;'>" + volume + "</span><span style='font-size:9;color:red;'> ï¿½l</span>";
		}
		if (Number(sample.data.volumeToLoad) == Number(sample.data.volume)) {
			return "<span style='color:orange;font-weight:bold;'>" + volume + "</span><span style='font-size:9;color:orange;'> ï¿½l</span>";
		}
		return "<span>" + volume + "</span><span style='font-size:9'> ï¿½l</span>";
	},

	getProposal : function() {
		return new Proposal();
	},

	getSampleNameRenderer : function(val, y, record) {
		var sample = record.data;
		if (record.raw.macromolecule3VO == null) {
			return '<span style="color:blue;">' + sample.code + '</span>';
		} else {
			return '<span style="color:green;">' + sample.code + '</span>';
		}
	},

	getSafetyLevels : function() {
		var safetyLevels = [];
		safetyLevels.push({
			safetyLevelId : "",
			name : "UNKNOWN"
		});
		safetyLevels.push({
			safetyLevelId : 1,
			name : "GREEN"
		});
		safetyLevels.push({
			safetyLevelId : 2,
			name : "YELLOW"
		});
		safetyLevels.push({
			safetyLevelId : 3,
			name : "RED"
		});
		return safetyLevels;
	},

	getErrorColor : function() {
		return '#F6CED8';
	},
	getWarningColor : function() {
		return '#F5DA81';
	},
	getValidColor : function() {
		return '#E0F8E0';
	},
	getSamplePlateLetters : function() {
		return [ "A", "B", "C", "D", "E", "F", "G", "H" ];
	},
	getSamplePositionHTML : function(sample, experiment) {
		var plate = "";
		var row = "";
		var column = "";
		var rows = this.getSamplePlateLetters();
		if (sample.sampleplateposition3VO != null) {
			var samplePlate = experiment.getSamplePlateById(sample.sampleplateposition3VO.samplePlateId);
			if (samplePlate != null) {
				plate = (samplePlate.slotPositionColumn);
				row = (sample.sampleplateposition3VO.rowNumber);
				column = (sample.sampleplateposition3VO.columnNumber);
				//				   var html = "<span style='font-weight:italic'>Plate: </span>" + "<span style='font-weight:bold'>" + plate + "</span>";
				//				   html = html +  "<span style='font-weight:italic'>, Row: </span>" + "<span style='font-weight:bold'>" +  rows[row - 1] + "</span>";
				//				   html = html +  "<span style='font-weight:italic'>, Column: </span>" + "<span style='font-weight:bold'>" + column + "</span>";
				var html = "<span style='font-weight:italic'>Plate: </span><span style='font-weight:bold'>" + plate +
					   "</span>-<span style='font-weight:bold'>" + rows[row - 1] + "</span><span style='font-weight:bold'>" + column + "</span>";
				return html;
			}
		}
		return "";
	},

	getSafetyLabelName : function(safetyLevelId) {
		var safetyLevels = BUI.getSafetyLevels();
		for ( var i = 0; i < safetyLevels.length; i++) {
			if (safetyLevels[i].safetyLevelId == safetyLevelId) {
				return safetyLevels[i].name;
			}
		}
		return "UNKNOWN";
	},
	/** generate random id **/
	id : function() {
		var text = "";
		var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

		for ( var i = 0; i < 5; i++){
			text += possible.charAt(Math.floor(Math.random() * possible.length));
		}

		return "ExiSAXS" + text;
	},
	showWarning : function(message) {
		Ext.Msg.show({
			title : 'Warning',
			msg : message,
			icon : Ext.Msg.WARNING,
			animEl : 'elId'
		});
	},
	showError : function(message) {
		Ext.Msg.show({
			title : 'Warning',
			msg : message,
			icon : Ext.Msg.ERROR,
			animEl : 'elId'
		});
	},
	getTipHTML : function(message) {
		//return "<div  class='panelMacro' ><table class='tipMacro'><colgroup span='1'><col span='1' width='24'><col span='1'></colgroup><tbody><tr><td colspan='1' rowspan='1' valign='top'><img align='middle' src='https://cwiki.apache.org/confluence/images/emoticons/check.gif' width='16' height='16' alt='' border='0'></td><td colspan='1' rowspan='1'><b>Tip</b><br clear='none'>"
		//		+ message + "</td></tr></tbody></table></div>";
		return "<div  class='panelMacro' ><table class='tipMacro'><colgroup span='1'><col span='1' width='24'><col span='1'></colgroup><tbody><tr><td colspan='1' rowspan='1' valign='top'></td><td colspan='1' rowspan='1'><b>Tip</b><br clear='none'>" +
			message + "</td></tr></tbody></table></div>";
	},

	getWarningHTML : function(message) {
		return "<div class='panelMacro' ><table class='warningMacro'><colgroup span='1'><col span='1' width='24'><col span='1'></colgroup><tbody><tr><td colspan='1' rowspan='1' valign='top'></td><td colspan='1' rowspan='1'><b>Warning</b><br clear='none'>" +
			message + "</td></tr></tbody></table></div>";
	},

	getErrorHTML : function(message) {
		return "<div class='panelMacro' ><table class='errorMacro'><colgroup span='1'><col span='1' width='24'><col span='1'></colgroup><tbody><tr><td colspan='1' rowspan='1' valign='top'><img align='middle' src='https://cwiki.apache.org/confluence/images/emoticons/forbidden.gif' width='16' height='16' alt='' border='0'></td><td colspan='1' rowspan='1'><b>Error</b><br clear='none'>" +
			message + "</td></tr></tbody></table></div>";
	},

	getProgessBar : function(percentage, text) {
		/** percentage 100% green **/
		var color = "#0a0";

		color = "#99CC00";
		if (percentage > 100) {
			color = "yellow";
			percentage = 100;
		}
		if (isNaN(percentage)) {
			color = "white";
			percentage = 0;
		}

		var defaultText = percentage + "%";
		if (text != null) {
			defaultText = text;
		}

		return "<div class='meter-wrap'><div class='meter-value' style='background-color: " + color + " ; width: " + percentage +
		       "%;'><div class='meter-text'>" + defaultText + "</div></div></div>";
	},
	getFileName : function(filePath){
		if (filePath != null){
			return filePath.split("/")[filePath.split("/").length - 1];
		}
		return "";
	}

};

//
//
//
//
//Ext.define('Ext.form.field.RequiredNumber', {
//	extend : 'Ext.form.field.Number',
//	alias : 'widget.requirednumberfield',
//	alternateClassName : [ 'Ext.form.RequiredNumberField', 'Ext.form.RequiredNumber' ],
//	config : {
//		cls : 'custom-field-text-required'
//	},
//
//	initComponent : function() {
//		var me = this;
//		me.callParent();
//		me.setMinValue(me.minValue);
//		me.setMaxValue(me.maxValue);
//	},
//
//	onChange : function() {
//		if ((this.getValue() == null) || String(this.getValue()).length == 0) {
//			this.addCls('custom-field-text-required');
//		} else {
//			this.removeCls('custom-field-text-required');
//		}
//		this.toggleSpinners();
//		this.callParent(arguments);
//	}
//});
//
//
//Ext.define('Ext.form.field.RequiredText', {
//	extend : 'Ext.form.field.Text',
//	alias : 'widget.requiredtext',
//	requires : [ 'Ext.form.field.VTypes', 'Ext.layout.component.field.Text' ],
//	alternateClassName : [ 'Ext.form.RequiredTextField', 'Ext.form.RequiredText' ],
//	config : {
//		cls : 'custom-field-text-required'
//	},
//	initComponent : function() {
//		var me = this;
//		if (me.allowOnlyWhitespace === false) {
//			me.allowBlank = false;
//		}
//		me.callParent();
//		me.addEvents(
//		/**
//		 * @event autosize
//		 * Fires when the **{@link #autoSize}** function is triggered and the field is resized according to the
//		 * {@link #grow}/{@link #growMin}/{@link #growMax} configs as a result. This event provides a hook for the
//		 * developer to apply additional logic at runtime to resize the field if needed.
//		 * @param {Ext.form.field.Text} this This text field
//		 * @param {Number} width The new field width
//		 */
//		'autosize',
//
//		/**
//		 * @event keydown
//		 * Keydown input field event. This event only fires if **{@link #enableKeyEvents}** is set to true.
//		 * @param {Ext.form.field.Text} this This text field
//		 * @param {Ext.EventObject} e
//		 */
//		'keydown',
//		/**
//		 * @event keyup
//		 * Keyup input field event. This event only fires if **{@link #enableKeyEvents}** is set to true.
//		 * @param {Ext.form.field.Text} this This text field
//		 * @param {Ext.EventObject} e
//		 */
//		'keyup',
//		/**
//		 * @event keypress
//		 * Keypress input field event. This event only fires if **{@link #enableKeyEvents}** is set to true.
//		 * @param {Ext.form.field.Text} this This text field
//		 * @param {Ext.EventObject} e
//		 */
//		'keypress');
//		me.addStateEvents('change');
//		me.setGrowSizePolicy();
//	},
//	checkChange : function() {
//		if ((this.getValue() == null) || String(this.getValue()).length == 0) {
//			this.addCls('custom-field-text-required');
//		} else {
//			this.removeCls('custom-field-text-required');
//		}
//	}
//});







var BIOSAXS_COMBOMANAGER = {
	getComboProposal : function(args) {
		var labelWidth = null;
		var width = 400;
		
		var id ='proposalIdCombo';
		if (args != null){
			if (args.labelWidth != null){
				labelWidth = args.labelWidth;
			}
			if (args.width != null){
				width = args.width;
			}
			if (args.id != null){
				id = args.id;
			}
		}
		var proposalStore = Ext.create('Ext.data.Store', {
			fields : [ 'code', 'number', 'title', 'proposalId', 'proposal' ],
			data : EXI.proposalManager.getProposals() });

		return Ext.create('Ext.form.ComboBox', {
			fieldLabel : 'Proposal',
			id : id,
			width : width,
			store : proposalStore,
			labelWidth : labelWidth,
			queryMode : 'local',
			displayField : 'proposal',
			valueField : 'proposalId' 
		});
	},
	
	getComboMacromoleculeByMacromolecules : function(macromolecules, args) {
		var labelWidth = 150;
		var margin = "0 0 5 0";
		var width = 300;

		if (args != null) {
			if (args.labelWidth != null) {
				labelWidth = args.labelWidth;
			}
			if (args.margin != null) {
				margin = args.margin;
			}
			if (args.width != null) {
				width = args.width;
			}
		}

		var store = Ext.create('Ext.data.Store', {
			fields : [ 'macromoleculeId', 'acronym' ],
			data : macromolecules,
			sorters : [ 'acronym' ]
		});

		return Ext.create('Ext.form.ComboBox', {
			fieldLabel : 'Macromolecules',
			labelWidth : labelWidth,
			width : width,
			margin : margin,
			store : store,
			editable: false,
			queryMode : 'local',
			displayField : 'acronym',
			valueField : 'macromoleculeId'
		});
	},
	getComboBuffers : function(buffers, args) {
		var labelWidth = 150;
		var margin = "0 0 5 0";
		var width = 300;
		var fieldLabel = 'Buffer';

		if (args != null) {
			if (args.labelWidth != null) {
				labelWidth = args.labelWidth;
			}
			if (args.margin != null) {
				margin = args.margin;
			}
			if (args.width != null) {
				width = args.width;
			}
			if (args.noLabel != null) {
				fieldLabel = null;
			}
		}

		var store = Ext.create('Ext.data.Store', {
			fields : [ 'bufferId', 'acronym' ],
			data : buffers,
			sorters : [ 'acronym' ]
		});

		return Ext.create('Ext.form.ComboBox', {
			fieldLabel : fieldLabel,
			labelWidth : labelWidth,
			width : width,
			margin : margin,
			editable: false,
			store : store,
			queryMode : 'local',
			displayField : 'acronym',
			valueField : 'bufferId'
		});
	},
	getComboSessions : function(sessions, args) {
		var labelWidth = 150;
		var margin = "0 0 5 0";
		var width = 300;

		if (args != null) {
			if (args.labelWidth != null) {
				labelWidth = args.labelWidth;
			}
			if (args.margin != null) {
				margin = args.margin;
			}
			if (args.width != null) {
				width = args.width;
			}
		}

		for ( var i = 0; i < sessions.length; i++) {
			sessions[i]["startDateFormatted"] = moment(sessions[i].startDate).format("MMM Do YY");
			sessions[i]["sorter"] = moment(sessions[i].startDate).format("YYYYMMDD");
		}

		var store = Ext.create('Ext.data.Store', {
			fields : [ 'sessionId', 'startDateFormatted', 'beamlineName', 'startDate', 'endDate', 'beamlineOperator' ],
			data : sessions,
			sorters : [ 'sorter' ]
		});

		return Ext.create('Ext.form.ComboBox', {
			fieldLabel : 'Session',
			labelWidth : labelWidth,
			width : width,
			margin : margin,
			store : store,
			queryMode : 'local',
			valueField : 'sessionId',
			// Template for the dropdown menu.
			// Note the use of "x-boundlist-item" class,
			// this is required to make the items selectable.
			tpl : Ext.create('Ext.XTemplate', '<tpl for=".">',
					'<div class="x-boundlist-item">{startDateFormatted}<span style="font-weight:bold"> {beamlineName}</span></div>', '</tpl>'),
			// template for the content inside text field
			displayTpl : Ext.create('Ext.XTemplate', '<tpl for=".">', '{startDateFormatted} {beamlineName}', '</tpl>')

		});
	},
	getComboStorageTemperature : function(args) {
		var labelWidth = 200;
		var width = 500;

		if (args != null) {
			if (args.labelWidth != null) {
				labelWidth = args.labelWidth;
			}
			if (args.width != null) {
				width = args.width;
			}
		}
		
		var storageLocations = Ext.create('Ext.data.Store', {
		    fields: ['value', 'name'],
		    data : [
		        {"value":"Not set", "name":"Not set"},
		        {"value":"-80", "name":"-80"},
		        {"value":"-20", "name":"-20"},
		        {"value":"+4", "name":"+4"},
		        {"value":"Room Temperature", "name":"Room Temperature"}
		    ]
		});
		this.storageLocationComboBox = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: 'Storage Location',
		    store: storageLocations,
		    queryMode: 'local',
		    labelWidth : labelWidth,
		    width : width,
		    displayField: 'name',
		    valueField: 'value',
		    value : 'Not set'
		});
		return this.storageLocationComboBox;
	},
	getComboPuckType : function(args) {
		var labelWidth = 200;
		var width = 500;
		var margin = null;
		
		if (args != null) {
			if (args.labelWidth != null) {
				labelWidth = args.labelWidth;
			}
			if (args.width != null) {
				width = args.width;
			}
			if (args.margin != null) {
				margin = args.margin;
			}
		}
		
		var storageLocations = Ext.create('Ext.data.Store', {
		    fields: ['value', 'name'],
		    data : [
		        {"value":10, "name":"SPINE"},
		        {"value":16, "name":"UNIPUCK"}
		    ]
		});
		this.storageLocationComboBox = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: 'Type',
		    store: storageLocations,
		    queryMode: 'local',
		    labelWidth : labelWidth,
		    width : width,
		    margin : margin,
		    displayField: 'name',
		    valueField: 'value',
		    value : 'Not set'
		});
		return this.storageLocationComboBox;
	}
};


/**
 * Using dygraph it plots a chart. Params: targetId, labelsContainerId, args
 * 
 * @width
 * @height
 * @labelsWidth
 * @targetId
 * @customBars
 * @ylabel
 * @xlabel
 * @showRangeSelector Show or hide the range selector widget.
 */
function DygraphWidget(targetId, args) {
	this.width = 1000;
	this.height = 600;
	this.labelsWidth = 100;
	this.targetId = targetId;
	this.customBars = false;
	this.ylabel = "";
	this.xlabel = "";
	this.id = BUI.id();
	this.showRangeSelector = false;
	this.interactionModel = null;
	this.labelsDivStyles = null;

	this.ranges = [
//	               {
//		start : 100,
//		end : 200,
//		color : 'rgb(150,200,255)'
//	}
	               ];

	if (args != null) {
		if (args.width != null) {
			this.width = args.width;
		}
		if (args.height != null) {
			this.height = args.height;
		}

		if (args.labelsWidth != null) {
			this.labelsWidth = args.labelsWidth;
		}
		if (args.labelsDivStyles != null) {
			this.labelsDivStyles = args.labelsDivStyles;
		}
		if (args.customBars != null) {
			this.customBars = args.customBars;
		}
		if (args.ylabel != null) {
			this.ylabel = args.ylabel;
		}
		if (args.xlabel != null) {
			this.xlabel = args.xlabel;
		}
		if (args.showRangeSelector != null) {
			this.showRangeSelector = args.showRangeSelector;
		}
		if (args.interactionModel != null) {
			this.interactionModel = args.interactionModel;
		}

		if (args.scaled != null) {
			this.scaled = args.scaled;
		}
		if (args.ranges != null) {
			this.ranges = args.ranges;
		}

	}

	this.onZoomX = new Event(this);
	this.onResetZoom = new Event(this);
	this.dblclick = new Event(this);
}

/** Draws it on targetId 
 * data: dygraphs.com/data.html
 * 
 * **/

DygraphWidget.prototype.dblclick = function(event, g, context) {
	g.widget.dblclick.notify({
		x : g.lastx_ });
};

DygraphWidget.prototype._createHTLMWrapper = function(data, colors, labels) {
	/** If plot is set in a tab it is possible that it is not renderer yet **/
	if (document.getElementById(this.targetId) == null) {
		return;
	}
	document.getElementById(this.targetId).innerHTML = "";
	/** Creating legend in a table **/
	var table = document.createElement("table");
	var tr = document.createElement("tr");
	var tdCanvas = document.createElement("td");

	this.canvasDiv = document.createElement("div");
	this.canvasDiv.setAttribute("id", "dygraph_canvas_" + this.id);
	this.canvasDiv.setAttribute("style", "width:" + this.width + "px;height:" + this.height + "px");
	tdCanvas.appendChild(this.canvasDiv);

	this.legendDiv = document.createElement("div");
	tr.appendChild(tdCanvas);
	table.appendChild(tr);
	document.getElementById(this.targetId).appendChild(table);
};

DygraphWidget.prototype.draw = function(data, colors, labels) {
	var _this = this;
	this._createHTLMWrapper(data, colors, labels);
	this.dygraph = new Dygraph(this.canvasDiv, data, {
		labels : labels,
		labelsDiv : this.legendDiv,
		labelsSeparateLines : true,
		highlightCircleSize : 3,
		strokeWidth : 1,
		customBars : this.customBars,
		colors : colors,
		//		scaled : this.scaled,
		//		ranges : this.ranges,
		xlabel : this.xlabel,
		ylabel : this.ylabel,
		showRangeSelector : this.showRangeSelector,
		rangeSelectorPlotStrokeColor : 'rgba(50,50,50,0.3)',
		rangeSelectorPlotFillColor : 'rgba(50,50,50,0.1)',
		labelsDivStyles : this.labelsDivStyles,
		interactionModel : this.interactionModel,
		underlayCallback : function(canvas, area, g) {
			if (_this.ranges != null) {
				for ( var key in _this.ranges) {
					var bottom_left = g.toDomCoords(_this.ranges[key].start, -20);
					var top_right = g.toDomCoords(_this.ranges[key].end, +20);

					var left = bottom_left[0];
					var right = top_right[0];

					canvas.fillStyle = _this.ranges[key].color;
					canvas.fillRect(left, area.y, right - left, area.h);

				}
			}

		} });

};



function StdDevDyGraph(targetId, args) {
	this.scaled = false;
	if (args == null) {
		args = {};
	}
	args.customBars = true;
	DygraphWidget.prototype.constructor.call(this, targetId, args);
}

StdDevDyGraph.prototype.dblclick = DygraphWidget.prototype.dblclick;
StdDevDyGraph.prototype._createHTLMWrapper = DygraphWidget.prototype._createHTLMWrapper;
StdDevDyGraph.prototype.draw = DygraphWidget.prototype.draw;

StdDevDyGraph.prototype.input = function() {
	return {
		data : [ [ 1, [ 2, 3, 3.5 ], [ 4, 4.2, 5 ] ], [ 2, [ 5, 5.5, 5.7 ], [ 4, 4.2, 5 ] ] ],
		colors : [ "blue", "red" ],
		labels : [ "", 'data1', 'data2' ] };
};

StdDevDyGraph.prototype.test = function(targetId) {
	var dygraphObject = new StdDevDyGraph(targetId, {
		width : 500,
		height : 400,
		xlabel : "xLabel",
		showRangeSelector : false });

	dygraphObject.draw(dygraphObject.input().data, dygraphObject.input().colors, dygraphObject.input().labels);
};

/*
 * var Event = function (sender) { this._sender = sender; this._listeners = []; };
 */

function Event(sender) {
	this._sender = sender;
	this._listeners = [];
}

Event.prototype = {
	attach : function(listener) {
		this._listeners.push(listener);
	},
	notify : function(args) {
		for (var i = 0; i < this._listeners.length; i++) {
			this._listeners[i](this._sender, args);
		}
	}
};

function ProgressBar(){}

ProgressBar.prototype.getPanel = function(done, total){
	var percentage = (parseFloat(done)/parseFloat(total))*100;
	
	var color = '#337ab7';
	
	if (percentage == 100){
		color = 'green';
	}
	
	if (percentage < 50){
		color = 'orange';
	}
	return "<div class='progress'><div class='progress-bar' role='progressbar' aria-valuenow='10' aria-valuemin='0' aria-valuemax='100' style='background-color:"+ color + ";width:" + percentage + "%'></div></div>";
	
};
/** Function for String **/
String.prototype.format = function (args) {
	var str = this;
	return str.replace(String.prototype.format.regex, function(item) {
		var intVal = parseInt(item.substring(1, item.length - 1));
		var replace;
		if (intVal >= 0) {
			replace = args[intVal];
		} else if (intVal === -1) {
			replace = "{";
		} else if (intVal === -2) {
			replace = "}";
		} else {
			replace = "";
		}
		return replace;
	});
};
String.prototype.format.regex = new RegExp("{-?[0-9]+}", "g");
