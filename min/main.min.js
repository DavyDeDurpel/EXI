
function MainView() {
	this.id = BUI.id();
	this.title = "New Tab";
	this.closable = true; 
	this.onSelectionChange = new Event(this);
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
	
	this.bodyStyle = {"background-color":"#FAFAFA"};
//	this.bodyStyle = {"background-color":"rgb(255,253,236)"};
}

MainView.prototype.getContainer = function() {
	return this.container;
};

MainView.prototype.getPanel = function() {
	this.container = Ext.create('Ext.container.Container', {
		xtype : 'container',
		items : []
	});

	this.panel = Ext.create('Ext.panel.Panel', {
		autoScroll : true,
		title : this.title,
		closable: this.closable,
		icon : this.icon,
		bodyStyle: this.bodyStyle, 
		items :[this.getContainer() ]
	});
	return this.panel;
};
function PuckMainView() {
	
	this.icon = '../images/BasketView_24x24_01.png';
	MainView.call(this);
	
	var _this = this;
	this.puckForm = new PuckForm({width : 1500});
}

PuckMainView.prototype.getPanel = MainView.prototype.getPanel;
PuckMainView.prototype.getContainer = MainView.prototype.getContainer;

PuckMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'anchor'
	    },
	    cls : 'border-grid',
	    defaults : {
			anchor : '100%',
			hideEmptyLabel : false },
	    margin : 30,
		bodyStyle : {
			"background-color" : "#E6E6E6" 
		},
		 items: [ this.puckForm.getPanel()]
	});

};


PuckMainView.prototype.load = function(puck) {
	
	var _this = this;
	
	this.puckForm.load(puck, null);
	
};

function AddressMainView() {
	this.icon = '../images/icon/contacts.png';
	this.queueGridList = [];

	MainView.call(this);

	this.addressForm = new AddressForm();
	
	
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

AddressMainView.prototype.getPanel = MainView.prototype.getPanel;

AddressMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'hbox'
	    },
	    margin : 15,
	    border: 1,
	    defaults: {
	        labelWidth: 80,
	        flex: 1,
	    },
	    items: [this.addressForm.getPanel([])]
	});
};


AddressMainView.prototype.load = function(labContactId) {
	
	this.panel.setTitle("Address");
	var _this = this;
	var onSuccess = function(sender, data){
		_this.addressForm.load(data);
	};
	
	EXI.getDataAdapter({onSuccess : onSuccess}).proposal.labcontacts.getLabContactById(labContactId);
	
	
};

function UserWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Home";
	this.closable = false;
	
	
	this.proposalGrid = new ProposalGrid({
		height : 300
	});
	
	var _this = this;
	this.proposalGrid.onSelected.attach(function(sender, proposal){
		_this.panel.setLoading(true);
		_this.activeProposal(proposal);
		_this.panel.setLoading(false);
	});
	
	this.todaySessionsGrid = new SessionGrid(
			{
				width : null,
				height : 125,
				title : "You have got sessions scheduled for today",
				hiddenGoColumn : false
			}
	);
	
	this.futureSessionsGrid = new SessionGrid(
			{
				width : null,
				height : 450,
				title : "Next scheduled sessions",
				margin : "20 0 0 00",
			}
	);
	
	this.previousSessionsGrid = new SessionGrid(
			{
				width : null,
				height : 450,
				title : "Previous sessions",
				margin : "20 0 0 10",
				hiddenGoColumn : false
			}
	);

	
	EXI.credentialManager.onActiveProposalChanged.attach(function(sender, proposal){
//		debugger
//		_this.mainMenu.populateCredentialsMenu();
	});
//	EXI.proposalManager.onActiveProposalChanged = function(sender, proposal){
//		debugger
//		
//	};
//	
}

UserWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
UserWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;


UserWelcomeMainView.prototype.activeProposal = function(proposal) {
	EXI.credentialManager.setActiveProposal(this.username, proposal.Proposal_proposalCode + proposal.Proposal_proposalNumber);
	EXI.proposalManager.get(true);
};

UserWelcomeMainView.prototype.getContainer = function() {

		this.panel =  Ext.createWidget('tabpanel',
		{
			plain : true,
			margin : '20 10 10 10',
			items : [

				{
					tabConfig : {
						title : 'Sessions',
						
					},
					listeners : {
						afterrender : function(){
//							var cal = CALENDAR();
//							cal.init();
						}
					},
					items : [ {
						xtype : 'container',
						id : this.id + "sessions",
						layout : 'fit',
						padding : 10,
						style : {
							borderColor : 'gray',
							borderStyle : 'solid',
							borderWidth : '1px',
							'background-color' : 'white' 
						},
						items : [
						         {
									 	html : "<div>Where is my beamline? <a target='blank' href='http://www.esrf.eu/files/live/sites/www/files/UsersAndScience/Experiments/Beamlines/beamlines-2015.jpg'>Here there is a map</a></div>",
									 	height : 20
							     },
						         {
						        	 xtype : 'container',
						        	 layout : 'hbox',
						        	 items : [
						        	          		this.futureSessionsGrid.getPanel(),
						        	          		this.previousSessionsGrid.getPanel()
				        	          ]
						         }
						      
						]
					}

					]
				},
				{
					tabConfig : {
						title : 'Proposals',
						
					},
					items : [ {
						xtype : 'container',
						layout : 'fit',
						height : 700,
						padding : 20,
						style : {
							borderColor : 'gray',
							borderStyle : 'solid',
							borderWidth : '1px',
							'background-color' : 'white' 
						},
						items : [ 
						         
						         this.proposalGrid.getPanel()
						]
					}

					]
				}
		]});
		
		this.panel.on("afterrender", function(){
		});
		return this.panel;
};


UserWelcomeMainView.prototype.parseSessionsByDate = function(sessions) {
	var olderSessions = [];
	var futureSessions = [];
	var todaySessions = [];
	
	
	for (var i = 0; i < sessions.length; i++) {
		/** Older **/
		sessions[i].diff = moment(sessions[i].startDate).diff(moment(), 'days');
		if (sessions[i].diff == 0){
			todaySessions.push(sessions[i]);
		}
		else{
			if (sessions[i].diff < 0){
				olderSessions.push(sessions[i]);
			}
			else{
				futureSessions.push(sessions[i]);
			}
		}
	}
	
	futureSessions.sort(function(a, b){
		return a.diff - b.diff;
	});
	
	return {
		olderSessions : olderSessions,
		futureSessions : futureSessions,
		todaySessions : todaySessions
	};
};


UserWelcomeMainView.prototype.loadProposal = function(proposals) {
	var _this = this;
	
	function onSessions(sender, sessions){
			_this.panel.setLoading(false);
			var mySessions = _this.parseSessionsByDate(sessions);
			if (mySessions.olderSessions.length > 0){
				console.log(mySessions.olderSessions);
				_this.previousSessionsGrid.load(mySessions.olderSessions);
			}
			
			if (mySessions.futureSessions.length > 0){
				_this.futureSessionsGrid.load(mySessions.futureSessions);
			}
			
			if (mySessions.todaySessions.length > 0){
				Ext.getCmp(_this.id + "sessions").insert(0, _this.todaySessionsGrid.getPanel());
				_this.todaySessionsGrid.load(mySessions.todaySessions);
			}
			
	}
		
		
	for (var i = 0; i < proposals.length; i++) {
		_this.activeProposal(proposals[i]);
		_this.panel.setLoading("Loading Sessions");
		EXI.getDataAdapter({onSuccess:onSessions}).proposal.session.getSessions();
	}
};

UserWelcomeMainView.prototype.loadUserView = function() {
	var _this = this;
	this.panel.setLoading("Loading Proposal");
	var onSuccess = function(sender, proposals){
		proposals.sort(function(a, b)
		{
		  return a["Proposal_proposalId"] - b["Proposal_proposalId"];
		});
	
		
		_this.proposalGrid.load(proposals);
		console.log(proposals);
		if (proposals.length> 0){
			_this.loadProposal(proposals);
		}
	};
	EXI.proposalManager.get();
	EXI.getDataAdapter({onSuccess:onSuccess}).proposal.proposal.getProposals();
};

UserWelcomeMainView.prototype.load = function(username) {
	var _this = this;
	this.username = username;
	
	/** Loading proposals depending on your role **/
	var credential = EXI.credentialManager.getCredentialByUserName(username);
	if (credential != null){
		if (credential.roles != null){
			if (credential.roles.length == 0){
				/** Assuming they are always users **/
				credential.roles.push("user");
			}
			if (credential.isManager()){
				alert("You are manager");
				return;
			}
			
			if (credential.isLocalContact()){
				alert("You are localContact");
				return;
			}
			this.loadUserView();
		}
	}
	
};


/**
* Class for the manager landing page. It inherits from MainView
*
* @class ManagerWelcomeMainView
* @constructor
*/
function ManagerWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Home";
	this.closable = false;

}


ManagerWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;


/**
* This sets an active proposal into the credential Manager. It also retrieve all the information about the proposal: shipments, macromolecules, crystals, buffers, etc.. and store 
* them in a local storage
*
* @method activeProposal
* @param {Object} proposal Proposal object that should container at least: [code, number]
*/
ManagerWelcomeMainView.prototype.activeProposal = function(proposal) {
	EXI.credentialManager.setActiveProposal(this.username, proposal.code + proposal.number);
	/** I don't need this to be synchronous **/	
	EXI.proposalManager.get();
};


ManagerWelcomeMainView.prototype.getContainer = function() {
	this.container = Ext.create('Ext.panel.Panel', {
		autoScroll : true,
    cls : 'border-grid',
    tbar : this.getToolbar(),
		bodyStyle: this.bodyStyle,
		items :[

    ]
	});
	return this.container;
};

/**
* It receives a list of proposals and display them in the main container
*
* @param {Object} proposals Arrays of Proposal objects
* @method displayProposals
*/
ManagerWelcomeMainView.prototype.displayProposals = function(proposals) {
          var _this = this;
          this.container.removeAll();
          var proposalGrid = new ProposalGrid({
									        	  width: 900,
									              height:600,
									              margin : '10 10 10 10'

                                            });
          proposalGrid.onSelected.attach(function(sender, proposal){
	             _this.panel.setLoading(true);
	             var proposalCode = proposal.Proposal_proposalCode + proposal.Proposal_proposalNumber;
	             function onSuccess(sender, sessions){
		           	  _this.displaySessions(sessions, sessions.length + " sessions for proposal " + proposalCode);
		           	  _this.panel.setLoading(false);
	             }
	             EXI.getDataAdapter({onSuccess:onSuccess}).proposal.session.getSessionsByProposal(proposalCode);
          });
          
          this.container.insert(proposalGrid.getPanel());
          proposalGrid.load(proposals);
};

/**
* Retrieves a list of sessions based on a start date and end date and loads them on the session grid
*
* @param {String} start Date should be in the format of YYYYMMDD
* @param {String} end Date should be in the format of YYYYMMDD
* @method loadByDate
*/
ManagerWelcomeMainView.prototype.loadByDate = function(start, end) {
          var _this = this;
          this.panel.setLoading(true);
          function onSuccess(sender, data){
        	  _this.displaySessions(data, data.length + " sessions scheduled on " + start);
        	  _this.panel.setLoading(false);
          }
		  EXI.getDataAdapter({onSuccess:onSuccess}).proposal.session.getSessionsByDate(start, end);
};

ManagerWelcomeMainView.prototype.displaySessions = function(sessions, title) {
	var _this = this;
	 this.container.removeAll();
	 var sessionGrid = new SessionGrid({
						 width: 900,
						 height:600,
						 margin : '10 10 10 10'
    	 });
	 this.container.insert(sessionGrid.getPanel());
	 
	  /** Handling onSelected **/
     sessionGrid.onSelected.attach(function(sender, session){
         _this.activeProposal(session.proposalVO);
     });
	 sessionGrid.load(sessions);
	 sessionGrid.panel.setTitle(title);
};
ManagerWelcomeMainView.prototype.getToolbar = function() {
  var _this = this;

   var dateMenu = Ext.create('Ext.menu.DatePicker', {
        handler: function(dp, date){
          _this.loadByDate(Ext.Date.format(date, 'Ymd'), Ext.Date.format(date, 'Ymd'));
        }
    });

    return Ext.create('Ext.toolbar.Toolbar', {
        width   : 500,
        cls 	: 'exi-top-bar',
        items: [
          {
               text: 'Choose a Date',
               icon : '../images/icon/sessions.png',
               menu: dateMenu 
           },

            {
                xtype    : 'textfield',
                name     : 'field1',
                width    : 300,
                emptyText: 'enter search term (proposal or title)',
    			listeners : {
    				specialkey : function(field, e) {
    					if (e.getKey() == e.ENTER) {
    						var found = _this.searchProposalByTerm(field.getValue());
    						_this.displayProposals(found);
    					}
    				} 
    			} 
            }
        ]
    });
};

ManagerWelcomeMainView.prototype.searchProposalByTerm = function(term) {
	var result = [];
	if (this.proposals != null){
		for (var i = 0; i < this.proposals.length; i++) {
			var proposalId = this.proposals[i]["Proposal_proposalCode"] +  this.proposals[i]["Proposal_proposalNumber"];
			var title = this.proposals[i]["Proposal_title"];
			if (title == null){
				title = "";
			}
			if ((proposalId.toUpperCase().match(term.toUpperCase())) ||(title.toUpperCase().match(term.toUpperCase()))){
				result.push(this.proposals[i]);
			}
		}
	}
	return result;
};

/**
* Retrieves all proposas on ISPyB and stores them on this.proposal 
* It is useful for fast search later on
*
* @method loadProposals
*/
ManagerWelcomeMainView.prototype.loadProposals = function() {
	var _this = this;
	var onSuccess = function(sender, proposals){
		_this.proposals = proposals;
	};
	
	EXI.getDataAdapter({onSuccess:onSuccess}).proposal.proposal.getProposals();
};



ManagerWelcomeMainView.prototype.load = function(username) {
  this.username = username;
  var today = moment().format("YYYYMMDD");
  this.loadByDate(today, today);
  /** This is need for quick searchs on proposals **/
  this.loadProposals();
  
};



function ShippingMainView() {
	
	MainView.call(this);
	
	var _this = this;
	this.shipmentForm = new ShipmentForm();

	this.shipmentForm.onSaved.attach(function(sender, shipment){
		location.hash = "#/proposal/shipping/nav?nomain";
	});
	
	/*this.caseGrid = new CaseGrid({
		height : 300
	});
	
	this.caseGrid.onRemove.attach(function(sender, dewar){
		var onSuccess = function(sender){
			_this.load(_this.shippingId);
			_this.panel.setLoading(false);
		};
		EXI.getDataAdapter({onSuccess:onSuccess}).proposal.dewar.removeDewar(_this.shippingId, dewar.dewarId );
	});*/
	
	this.parcelGrid = new ParcelGrid({
		height : 300
	});
}

ShippingMainView.prototype.getPanel = MainView.prototype.getPanel;
ShippingMainView.prototype.getContainer = MainView.prototype.getContainer;

ShippingMainView.prototype.getContainer = function() {
	this.tabPanel =  Ext.createWidget('tabpanel',
			{
				margin : 10,
				defaults : {
						anchor : '100%'
				},
				items : [
				     		{
							tabConfig : {
								title : 'Delivery Details'
							},
							items : [ 
							         	this.shipmentForm.getPanel()
							]
						},
						{
							tabConfig : {
								id : this.id + "grid",
								title : 'Parcels',
								icon : '../images/icon/shipping.png'
							},
							items : [ 
							         	this.parcelGrid.getPanel()
							]
						}
					]
			});

	return this.tabPanel;

};


ShippingMainView.prototype.load = function(shippingId) {
	this.shippingId = shippingId;
	
	if (shippingId == null){
		Ext.getCmp(this.id + "grid").disable(true);
	}
	this.panel.setTitle("Shipment");
	var _this = this;
	if (shippingId != null){
		this.panel.setLoading();
		var onSuccess = function(sender, shipment){
			_this.shipmentForm.load(shipment);
			_this.parcelGrid.load(shipment);
			_this.panel.setLoading(false);
		};
		EXI.getDataAdapter({onSuccess : onSuccess}).proposal.shipping.getShipment(shippingId);
	}
};

function BufferWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Macromolecules";
	this.closable = false;
}

BufferWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
BufferWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

BufferWelcomeMainView.prototype.getOptions = function() {
	var html =  "<ul><li>Define beforehand an experiment</li>";
	html = html + "<li>Send your samples by courier</li>";
	return html + "</ul>";
};



BufferWelcomeMainView.prototype.getContainer = function() {
	return  Ext.createWidget('panel',
			{
				plain : true,
				margin : '20',
				layout : 'fit',
				items : [
					{
						tabConfig : {
							title : 'Welcome'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
//							height : 700,
							padding : 10,
							margin : 0,
							cls : 'border-grid',
							items : [ 
							        
							         {
							        	 html : '<div class="landing-title" ><h2>Buffers on ISPyB</h2></div>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	 html : '<div class="landing-text">A buffer is the matched solution which in a sample is suspended</div><br/>',
							        	 margin : '0 0 0 40'
							         },
							         {
							        	 html : '<div class="landing-text">You should define a macromolecule on ISPyB if you want:</div>',
							        	 margin : '0 0 0 40'
							         },
							         {
							        	 html : this.getOptions(),
							        	 margin : '0 0 0 40'
							         },
							         
							         {
							        	 html : '<br/><div class="landing-text">If your macromolecule is not in the list showed on the left you can create a new one</div><br/>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	xtype : 'container',
							        	layout : 'hbox',
							        	cls : 'option-bar-menu',
							        	items :[
							        	    
										         {
										        	 xtype : 'button',
										        	 cls : 'square-option',
										        	 maxWidth : 200,
										        	 minWidth : 200,
										        	 margin : '0 0 0 150',
										        	 height : 100,
										        	 text : '<div class="square-option-text"; >Add a new buffer</div>',
										        	 icon : '../images/icon/add.png',
										        	 iconAlign : 'top',
										        	 handler : function(){
										        		 location.hash = '/buffer/add';
										        	 }
										         }]
							         }
							       
							        
							]
						}
					
						]
					}
			]});
	};


BufferWelcomeMainView.prototype.load = function() {
	
};

function ExperimentWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Welcome";
	this.closable = false;
}

ExperimentWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
ExperimentWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

ExperimentWelcomeMainView.prototype.getContainer = function() {
	return  Ext.createWidget('panel',
			{
				plain : true,
				margin : '10',
				layout : 'fit',
				items : [
					{
						tabConfig : {
							title : 'Welcome'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							padding : 20,
							margin : 0,
							cls : 'border-grid',
							items : [ 
							        
							         {
							        	 html : '<div class="landing-title" ><h2>Designing your experiment on ISPyB</h2></div>'
							         },
							         {
							        	 html : '<div class="landing-text">A experiment is a set of measurements of samples.</div><br/>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	xtype : 'container',
							        	layout : 'hbox',
							        	cls : 'option-bar-menu',
							        	items :[
							        	    
										         {
										        	 xtype : 'button',
										        	 cls : 'square-option',
										        	 maxWidth : 200,
										        	 minWidth : 200,
										        	 margin : '0 0 0 150',
										        	 height : 100,
										        	 text : '<div class="square-option-text"; >Create a new Experiment</div>',
										        	 icon : '../images/icon/add.png',
										        	 iconAlign : 'top',
										        	 handler : function(){
										        		 location.hash = '/prepare/designer';
										        	 }
										         }]
							         }
							       
							        
							]
						}
					
						]
					}
			]});
	};


ExperimentWelcomeMainView.prototype.load = function() {
	
};

function MacromoleculeWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Macromolecules";
	this.closable = false;
}

MacromoleculeWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
MacromoleculeWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

MacromoleculeWelcomeMainView.prototype.getOptions = function() {
	var html =  "<ul><li>Define beforehand an experiment</li>";
	html = html + "<li>Send your samples by courier</li>";
	html = html + "<li>Online data analysis to run apriori data analysis (PDB information will be required on the advanced tab in the macromolecule view)</li>";
	return html + "</ul>";
};

MacromoleculeWelcomeMainView.prototype.getContainer = function() {
	return  Ext.createWidget('panel',
			{
				plain : true,
				margin : '10',
				layout : 'fit',
				items : [
					{
						tabConfig : {
							title : 'Welcome'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							padding : 20,
							margin : 0,
							cls : 'border-grid',
							items : [ 
							        
							         {
							        	 html : '<div class="landing-title" ><h2>Macromolecules on ISPyB</h2></div>'
							         },
							         {
							        	 html : '<div class="landing-text">A macromolecule is a biological contruct for investigation.</div><br/>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	 html : '<div class="landing-text">You should define a macromolecule on ISPyB if you want:</div>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	 html : this.getOptions(),
							        	 margin : '0 0 0 40'
							         },
							         
							         {
							        	 html : '<br/><div class="landing-text">If your macromolecule is not in the list showed on the left you can create a new one</div><br/>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	xtype : 'container',
							        	layout : 'hbox',
							        	cls : 'option-bar-menu',
							        	items :[
							        	    
										         {
										        	 xtype : 'button',
										        	 cls : 'square-option',
										        	 maxWidth : 200,
										        	 minWidth : 200,
										        	 margin : '0 0 0 150',
										        	 height : 100,
										        	 text : '<div class="square-option-text"; >Add a new macromolecule</div>',
										        	 icon : '../images/icon/add.png',
										        	 iconAlign : 'top',
										        	 handler : function(){
										        		 location.hash = '/macromolecule/add';
										        	 }
										         }]
							         }
							       
							        
							]
						}
					
						]
					}
			]});
	};


MacromoleculeWelcomeMainView.prototype.load = function() {
	
};

function ShipmentPreparationMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "How to prepare a Shipment?";
	this.closable = false;
	
}

ShipmentPreparationMainView.prototype.getPanel = MainView.prototype.getPanel;
ShipmentPreparationMainView.prototype.getContainer = MainView.prototype.getContainer;

ShipmentPreparationMainView.prototype.getContainer = function() {
	var text= "The aim of a BioSAXS experiment is to determine the low resolution shape of a macromolecule in solution \n" + 
			"under physiological conditions. In order to define an experiment or create a shipment ISPyB needs to know the macromolecules and buffers that compose your samples";
	
	return {
		    cls : 'border-grid',
		    margin : 10,
			items : [
						{
							 html : '<div class="welcome-title"><h2>How to define my samples on ISPyB?</h2> </div>'
						},
						{
							 html : '<div class="help-text"> ' + text +'</div>'
						},
						{
							 html :'<div class="welcome-title"><h4>What is a macromolecule and how can I define it on ISPyB?</h4> </div>'
						},
						{
							 html : '<div class="help-text">A macromolecule is a biological construct in solution for investigation</div>'
						},
						
			]
	};
};



ShipmentPreparationMainView.prototype.load = function(username) {
	
};

function ShippingWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Welcome";
	this.closable = false;
}

ShippingWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
ShippingWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

ShippingWelcomeMainView.prototype.getContainer = function() {
	return  Ext.createWidget('panel',
			{
				plain : true,
				margin : '10',
				layout : 'fit',
				items : [
					{
						tabConfig : {
							title : 'Welcome'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							padding : 20,
							margin : 0,
							cls : 'border-grid',
							items : [ 
							        
							         {
							        	 html : '<div class="landing-title" ><h2>Shipments</h2></div>'
							         },
							         {
							        	 html : '<div class="landing-text"> A Shipment consists of a set of Dewars which is sent from your home lab to the synchrotron via a courier company. Each dry shipping Dewar within the shipment is identified by a label (barcode or sticker). The dewars(s) contains a set of Containers (Pucks or canes). Containers (typically Pucks), contain Samples. A Sample (Sample Holder) contains the Crystal</div><br/>',
							        	 margin : '0 0 0 20'
							         },
//							         {
//							        	 html : '<div class="landing-text"><img src="../images/ShippingObjects_02.png" /></div>',
//							        	 margin : '0 0 0 20'
//							         },
//							         {
//							        	 html : '<div class="landing-text">Tracking your shipment & contents (Dewars, toolboxes etc) allows you to follow the progress of your shipment from your home Lab to The ESRF.</div>',
//							        	 margin : '0 0 0 20'
//							         },
//							         
//							         {
//							        	 html : '<div class="landing-text"><img src="../images/dewarTrackingWF_01.png" /></div>',
//							        	 margin : '0 0 0 20'
//							         },
//							         {
//							        	 html : this.getOptions(),
//							        	 margin : '0 0 0 40'
//							         },
							         
							         {
							        	 html : '<br/><div class="landing-text">Do you want to ship your samples to the beamline?</div><br/>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	xtype : 'container',
							        	layout : 'hbox',
							        	cls : 'option-bar-menu',
							        	items :[
							        	    
										         {
										        	 xtype : 'button',
										        	 cls : 'square-option',
										        	 maxWidth : 200,
										        	 minWidth : 200,
										        	 margin : '0 0 0 150',
										        	 height : 100,
										        	 text : '<div class="square-option-text"; >Create a new Shipment</div>',
										        	 icon : '../images/icon/add.png',
										        	 iconAlign : 'top',
										        	 handler : function(){

										        		 //if (EXI.proposalManager.getFutureSessions().length > 0){
										     				location.hash = '/shipping/main';
										     			 //}
										        		 //else{
											        	//	 BUI.showError("Sorry, there are not sessions scheduled for this proposal");
										        		 //}
										        	 }
										         }]
							         }
							       
							        
							]
						}
					
						]
					}
			]});
	};


ShippingWelcomeMainView.prototype.load = function() {
	
};

function StockSolutionWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Macromolecules";
	this.closable = false;
}

StockSolutionWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
StockSolutionWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

StockSolutionWelcomeMainView.prototype.getOptions = function() {
	var html =  "<ul><li>Define beforehand an experiment</li>";
	html = html + "<li>Send your samples by courier</li>";
	return html + "</ul>";
};

StockSolutionWelcomeMainView.prototype.getContainer = function() {
	return  Ext.createWidget('panel',
			{
				plain : true,
				margin : '20',
				layout : 'fit',
				items : [
					{
						tabConfig : {
							title : 'Welcome'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
//							height : 700,
							padding : 10,
							margin : 0,
							cls : 'border-grid',
							items : [ 
							        
							         {
							        	 html : '<div class="landing-title" ><h2>Stock Solutions on ISPyB</h2></div>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	 html : '<div class="landing-text">A buffer is the matched solution which in a sample is suspended</div><br/>',
							        	 margin : '0 0 0 40'
							         },
							         {
							        	 html : '<div class="landing-text">You should define a macromolecule on ISPyB if you want:</div>',
							        	 margin : '0 0 0 40'
							         },
							         {
							        	 html : this.getOptions(),
							        	 margin : '0 0 0 40'
							         },
							         
							         {
							        	 html : '<br/><div class="landing-text">If your macromolecule is not in the list showed on the left you can create a new one</div><br/>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	xtype : 'container',
							        	layout : 'hbox',
							        	cls : 'option-bar-menu',
							        	items :[
							        	    
										         {
										        	 xtype : 'button',
										        	 cls : 'square-option',
										        	 maxWidth : 200,
										        	 minWidth : 200,
										        	 margin : '0 0 0 150',
										        	 height : 100,
										        	 text : '<div class="square-option-text"; >Add a new Stock Solution</div>',
										        	 icon : '../images/icon/add.png',
										        	 iconAlign : 'top',
										        	 handler : function(){
										        		 location.hash = '/stocksolution/add';
										        	 }
										         }]
							         }
							       
							        
							]
						}
					
						]
					}
			]});
	};


StockSolutionWelcomeMainView.prototype.load = function() {
	
};

function HPLCMainView() {
	this.title = "Experiment";
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	MainView.call(this);

	this.grid = new QueueGrid({
		collapsed : true,
		positionColumnsHidden : true,
		maxHeight : Ext.getCmp("main_panel").getHeight() - 50,
		sorters : [ {
			property : 'macromoleculeAcronym',
			direction : 'ASC' } ] });

	this.grid.onSelectionChange.attach(function(sender, elements) {
		_this.onSelectionChange.notify(elements);
	});

	this.grid.onSelect.attach(function(sender, selected) {
		_this.onSelect.notify(selected);
	});

	this.grid.onDeselect.attach(function(sender, unselected) {
		_this.onDeselect.notify(unselected);
	});

	var _this = this;
	_this.annotations = [];
	_this.selectedFrameNumber = [];
	this.hplcGraph = new HPLCGraph({
		title : 'I0',
		width : 800,
		height : 350,
		bbar : true,
		plots : {
			"I0" : true,
			"Rg" : true },
		xlabel : "HPLC Frames",
		scaled : true,
		interactionModel : {
			'dblclick' : function(event, g, context) {
				_this.selectedFrameNumber.push(g.lastx_);
				_this.plotter.loadHPLCFrame(_this.experimentId, _this.selectedFrameNumber);

				_this.annotations.push({
					series : g.selPoints_[0].name,
					x : g.lastx_,
					width : 30,
					height : 23,
					tickHeight : 2,
					shortText : g.lastx_,
					text : g.lastx_,
					attachAtBottom : true });
				g.setAnnotations(_this.annotations);

			} } });

	this.hplcGraph.onClearSelection.attach(function(sender) {
		_this.annotations = [];
		_this.selectedFrameNumber = [];
		_this.hplcGraph.dygraphObject.dygraph.setAnnotations([]);
	});

	this.plotter = new CurvePlotter({
		margin : '10 0 0 0' });

	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

HPLCMainView.prototype.getPanel = MainView.prototype.getPanel;

HPLCMainView.prototype._selectFrame = function(frameNumber) {
	try {
		//		this._renderScatteringCurve(frameNumber);
		//		this.frameGrid.refresh([this.mainPlotPanel.getDataByFrameNumber(frameNumber)], this.experiment.experimentId);
	} catch (e) {
		console.log(e);
	}
};

HPLCMainView.prototype.getHeader = function(beamlineName, startDate) {
	return "<span class='item'>" + beamlineName + "</span><span class='item_description'>" + startDate + "</span>";
};

HPLCMainView.prototype.getPlotContainer = function() {
	return {
		xtype : 'container',
		//		layout : 'fit',
		//		 layout : 'vbox',
		cls : 'defaultGridPanel',
		border : 0,
		defaults : {
			height : 450 },
		//		items : [ 
		//		         {
		//		        	 xtype : 'panel',
		//		        	 layout : 'vbox',
		////		        	 layout: {
		////		        	        type: 'accordion',
		////		        	        titleCollapse: false,
		////		        	        animate: true,
		////		        	        activeOnTop: true
		////		        	    },
		//		        	    flex : 1,
		//		        		border : 1,
		//		        		style : {
		//		        			borderColor : '#000000',
		//		        			borderStyle : 'solid',
		//		        			borderWidth : '1px' },
		items : [ this.hplcGraph.getPanel(), this.plotter.getPanel()

		//			        	          ]
		//		         },

		] };
};

HPLCMainView.prototype.getContainer = function() {

	return {
		xtype : 'container',
		items : [ this.grid.getPanel(), this.getPlotContainer() ] };
};

HPLCMainView.prototype.getSelected = function() {
	var selected = [];
	for (var i = 0; i < this.queueGridList.length; i++) {
		selected = this.queueGridList[i].getSelected().concat(selected);
	}
	return selected;
};

HPLCMainView.prototype.loadHPLCGraph = function(experimentId) {
	var _this = this;
	var onSuccess = function(sender, data) {
		data = JSON.parse(data);
		var zeroArray = [];
		for (var i = 0; i < data.I0.length; i++) {
			zeroArray.push(0);
		}
		data = [ {
			param : "I0",
			data : data.I0,
			std : data.I0_Stdev,
			color : '#0066CC',
			label : "I0" }, {
			param : "sum_I",
			label : "sum_I",
			color : "#00FF00",
			data : data.sum_I,
			std : zeroArray }, {
			param : "Rg",
			label : "Rg",
			color : "#21610B",
			data : data.Rg,
			std : data.Rg_Stdev }, {
			param : "Mass",
			data : data.mass,
			std : data.mass_Stdev,
			color : '#FF9900',
			label : "Mass" }, {
			param : "Vc",
			data : data.Vc,
			std : data.Vc_Stdev,
			color : '#990099',
			label : "Vc" }, {
			param : "Qr",
			data : data.Qr,
			std : data.Qr_Stdev,
			color : '#FF0066',
			label : "Qr" }, {
			param : "quality",
			label : "quality",
			color : "#FF00FF",
			data : data.quality,
			std : zeroArray } ];
		_this.hplcGraph.loadData(data);

	};

	EXI.getDataAdapter({onSuccess : onSuccess}).saxs.hplc.getHPLCOverviewByExperimentId(experimentId);
};

HPLCMainView.prototype.load = function(experimentId) {
		var _this = this;
		this.experimentId = experimentId;

		this.grid.panel.setLoading();

		var onSuccess = function(sender, data) {
//			_this.panel.setTitle(data[0].name);
//			_this.grid.panel.setTitle(_this.getHeader(data[0].name, data[0].creationDate));
			_this.grid.load(data);
			_this.grid.panel.setLoading(false);

		};

		EXI.getDataAdapter({onSuccess : onSuccess}).saxs.dataCollection.getDataCollectionsByExperimentId(experimentId);
		this.loadHPLCGraph(experimentId);
};



function AddressWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Macromolecules";
	this.closable = false;

}

AddressWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
AddressWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

AddressWelcomeMainView.prototype.getOptions = function() {
	var html =  "<ul><li>Define beforehand an experiment</li>";
	html = html + "<li>Send your samples by courier</li>";
	return html + "</ul>";
};



AddressWelcomeMainView.prototype.getContainer = function() {
	return  Ext.createWidget('panel',
			{
				plain : true,
				margin : '20',
				layout : 'fit',
				items : [
					{
						tabConfig : {
							title : 'Welcome'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
//							height : 700,
							padding : 10,
							margin : 0,
							cls : 'border-grid',
							items : [ 
							        
							         {
							        	 html : '<div class="landing-title" ><h2>Manage Shipping Addresses on ISPyB</h2></div>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	 html : '<div class="landing-text">A buffer is the matched solution which in a sample is suspended</div><br/>',
							        	 margin : '0 0 0 40'
							         },
							         {
							        	 html : '<div class="landing-text">You should define a macromolecule on ISPyB if you want:</div>',
							        	 margin : '0 0 0 40'
							         },
							         {
							        	 html : this.getOptions(),
							        	 margin : '0 0 0 40'
							         },
							         
							         {
							        	 html : '<br/><div class="landing-text">If your macromolecule is not in the list showed on the left you can create a new one</div><br/>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	xtype : 'container',
							        	layout : 'hbox',
							        	cls : 'option-bar-menu',
							        	items :[
							        	    
										         {
										        	 xtype : 'button',
										        	 cls : 'square-option',
										        	 maxWidth : 200,
										        	 minWidth : 200,
										        	 margin : '0 0 0 150',
										        	 height : 100,
										        	 text : '<div class="square-option-text"; >Add a new Address</div>',
										        	 icon : '../images/icon/add.png',
										        	 iconAlign : 'top',
										        	 handler : function(){
										        		 location.hash = '/buffer/add';
										        	 }
										         }]
							         }
							       
							        
							]
						}
					
						]
					}
			]});
	};


AddressWelcomeMainView.prototype.load = function() {
	
};



function PuckWelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Macromolecules";
	this.closable = false;

}

PuckWelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
PuckWelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

PuckWelcomeMainView.prototype.getOptions = function() {
	var html =  "<ul><li>Define beforehand an experiment</li>";
	html = html + "<li>Send your samples by courier</li>";
	return html + "</ul>";
};



PuckWelcomeMainView.prototype.getContainer = function() {
	return  Ext.createWidget('panel',
			{
				plain : true,
				margin : '20',
				layout : 'fit',
				items : [
					{
						tabConfig : {
							title : 'Welcome'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
//							height : 700,
							padding : 10,
							margin : 0,
							cls : 'border-grid',
							items : [ 
							        
							         {
							        	 html : '<div class="landing-title" ><h2>Pucks on ISPyB</h2></div>',
							        	 margin : '0 0 0 20'
							         },
							         {
							        	 html : '<div class="landing-text">A puck is...</div><br/>',
							        	 margin : '0 0 0 40'
							         },
							         {
							        	xtype : 'container',
							        	layout : 'hbox',
							        	cls : 'option-bar-menu',
							        	items :[
							        	    
										         {
										        	 xtype : 'button',
										        	 cls : 'square-option',
										        	 maxWidth : 200,
										        	 minWidth : 200,
										        	 margin : '0 0 0 150',
										        	 height : 100,
										        	 text : '<div class="square-option-text"; >Add a new Puck</div>',
										        	 icon : '../images/icon/add.png',
										        	 iconAlign : 'top',
										        	 handler : function(){
										        		 location.hash = '/mx/puck/add';
										        	 }
										         }]
							         }
							       
							        
							]
						}
					
						]
					}
			]});
	};


PuckWelcomeMainView.prototype.load = function() {
	
};

function BufferMainView() {
	
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	MainView.call(this);

	this.bufferForm = new BufferForm({
		height : 800,
		collapsed : false,
		tbar : true
	});
	
	var _this = this;
//	this.bufferGrid.onUpdated.attach(function(sender){
//		_this.load();
//	});
	
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

BufferMainView.prototype.getPanel = MainView.prototype.getPanel;

BufferMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'hbox'
	    },
	    margin : 15,
//		bodyStyle : {
//			"background-color" : "#E6E6E6" 
//		},
	    border: 1,
//	    style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},
	    defaults: {
	        labelWidth: 80,
//	        xtype: 'datefield',
	        flex: 1,
	    },
	    items: [this.bufferForm.getPanel([])]
	});
};


BufferMainView.prototype.load = function(bufferId) {
//	this.bufferGrid.load(EXI.proposalManager.getBuffers());
	this.panel.setTitle("Buffer");
	this.bufferForm.load(EXI.proposalManager.getBufferById(bufferId));
};

function DesignerMainView() {
	
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	MainView.call(this);

	var _this = this;
	
	
	this.wizardWidget = new WizardWidget({
		windowMode : true,
		width : 1200 });
//
	this.wizardWidget.onFinished.attach(function(sender, result) {
//		wizardWidget.window.close();
		EXI.setLoading();
		var onSuccess = function(sender, experiment) {
			location.hash = "/experiment/templateId/" + experiment.experimentId + "/main";
		};
//		wizardWidget.current.setLoading("ISPyB: Creating experiment");
		EXI.getDataAdapter({onSuccess : onSuccess}).saxs.template.saveTemplate(result.name, result.comments, result.data);
	});
//
//	wizardWidget.draw(new MeasurementCreatorStepWizardForm(EXI.proposalManager.getMacromolecules(),EXI.proposalManager.getBuffers()));
		
		
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

DesignerMainView.prototype.getPanel = MainView.prototype.getPanel;

DesignerMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'hbox'
	    },
	    margin : 15,
	    border: 1,
	    defaults: {
	        labelWidth: 80,
	        flex: 1,
	    },
	    items: [this.wizardWidget.getPanel(new MeasurementCreatorStepWizardForm(EXI.proposalManager.getMacromolecules(),EXI.proposalManager.getBuffers()))]
	});
};


DesignerMainView.prototype.load = function(bufferId) {
//	this.bufferGrid.load(EXI.proposalManager.getBuffers());
	this.panel.setTitle("Experiment Designer");
	
};

function ExperimentDesignerMainView() {
	
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	MainView.call(this);

	this.templateGrid = new TemplateGrid({
		minHeight : 300,
		height : 440,
		gridType : 'Ext.grid.Panel',
		title : 'Experiments',
		grouping : false,
		tbar : true
	});
	
	
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

ExperimentDesignerMainView.prototype.getPanel = MainView.prototype.getPanel;

ExperimentDesignerMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'hbox'
	    },
	    margin : 30,
		bodyStyle : {
			"background-color" : "#E6E6E6" 
		},
	    border: 1,
	    style: {borderColor:'#000000', borderStyle:'solid', borderWidth:'1px'},
	    defaults: {
	        labelWidth: 80,
	        xtype: 'datefield',
	        flex: 1,
	    },
	    items: [this.templateGrid.getPanel([])]
	});
};

ExperimentDesignerMainView.prototype.load = function() {
	var _this = this;
	this.panel.setLoading();
	var manager = new ProposalUpdater(); 
	this.templateGrid.grid.setLoading();
	manager.onSuccess.attach(function(sender, proposals){
		_this.panel.setLoading(false);
		var adapter = new DataAdapter();
		adapter.onSuccess.attach(function(sender, experiments){
			_this.templateGrid.store.loadData(experiments);
			_this.templateGrid.grid.setLoading(false);
		});
		
		adapter.getByExperimentByKey("experimentType", "TEMPLATE");
	});
	manager.get();
	
	this.panel.setTitle("Experiment Designer");
};

function MacromoleculeMainView() {
	
	this.icon = '../images/icon/macromolecule.png';
	this.queueGridList = [];

	MainView.call(this);

	this.macromoleculeForm = new MacromoleculeForm({
		height : 800,
		collapsed : false,
		tbar : true
	});
	
	this.rigidBodyModelingForm = new RigidBodyModelingForm({
//		width : this.width - 30,
//		height : this.height - 50,
	});
	
	this.rigidBodyModelingForm.onSave.attach(function(sender, macromolecule) {
//		_this.onSave.notify(macromolecule);
	});
	
	
	var _this = this;
	
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

MacromoleculeMainView.prototype.getPanel = MainView.prototype.getPanel;

MacromoleculeMainView.prototype.getHeader = function(beamlineName, startDate) {
	return "<span class='item'>" + beamlineName + "</span><span class='item_description'>" + startDate + "</span>";
};

MacromoleculeMainView.prototype.getSelected = function() {
	var selected = [];
	for (var i = 0; i < this.queueGridList.length; i++) {
		selected = this.queueGridList[i].getSelected().concat(selected);
	}
	return selected;
};

MacromoleculeMainView.prototype.getTabs = function() {
	return  Ext.createWidget('tabpanel',
			{
				plain : true,
//				margin : '5 0 0 0',
				items : [
					{
						tabConfig : {
							title : 'General'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 600,
							padding : 0,
							items : [ 
							         
							         this.macromoleculeForm.getPanel()
							]
						}

						]
					},
					{
						tabConfig : {
							title : 'Advanced'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 500,
							padding : 0,
							items : [ 
							         this.rigidBodyModelingForm.getPanel()
							]
						}

						]
					}
			]});
};


MacromoleculeMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'anchor'
	    },
	    defaults : {
			anchor : '100%',
			hideEmptyLabel : false },
	    margin : 30,
		bodyStyle : {
			"background-color" : "#E6E6E6" 
		},
	    items: [
	            this.getTabs()
	            ]
	});
};


MacromoleculeMainView.prototype.load = function(macromoleculeId) {
	this.panel.setLoading();
	var macromolecule = EXI.proposalManager.getMacromoleculeById(macromoleculeId);
	this.panel.setTitle(macromolecule.acronym);
	this.macromoleculeForm.load(macromolecule);
	this.rigidBodyModelingForm.load(macromolecule);
	this.panel.setLoading(false);
};

function StockSolutionMainView() {
	
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	MainView.call(this);

	this.stockSolutionForm = new StockSolutionForm({
//		width : this.width - 10,
		minHeight : 800,
		height : 800,
		tbar : true,
		showTitle : true,
		isPackedVisible : false,
		btnAddExisting : false,
		btnRemoveVisible : false,
		btnUnpackVisible : false
	});
	
	var _this = this;
	
	
	this.stockSolutionForm.onSaved.attach(function(sender, stockSolution){
		var onSuccess2 = function(sender, proposals){
			_this.stockSolutionForm.load(EXI.proposalManager.getStockSolutionById(_this.stockSolutionId));	
			_this.panel.setLoading(false);
		};
		_this.panel.setLoading("Updading proposal information");
		EXI.getDataAdapter({onSuccess : onSuccess2}).proposal.proposal.update();
//		
	});
	
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

StockSolutionMainView.prototype.getPanel = MainView.prototype.getPanel;

StockSolutionMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'anchor'
	    },
	    defaults : {
			anchor : '100%',
			hideEmptyLabel : false },
	    margin : 30,
		bodyStyle : {
			"background-color" : "#E6E6E6" 
		},
		 items: [this.stockSolutionForm.getPanel([])]
	});
	
};


StockSolutionMainView.prototype.load = function(stockSolutionId) {
	this.stockSolutionId = stockSolutionId;
	
	this.stockSolutionForm.load(EXI.proposalManager.getStockSolutionById(stockSolutionId));	
	this.panel.setTitle("Stock Solutions");
};

function TemplateMainView() {
	
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	MainView.call(this);

	
	this.experimentHeaderForm = new ExperimentHeaderForm();
	
	var _this = this;
	
	
	/** Viscosity **/
	var storeViscosity = Ext.create('Ext.data.Store', {
		fields : [ 'name' ],
		data : [ {
			"name" : "low"
		}, {
			"name" : "medium"
		}, {
			"name" : "high"
		} ]
	});

	// Create the combo box, attached to the states data store
	var viscosityEditor = Ext.create('Ext.form.ComboBox', {
		fieldLabel : '',
		store : storeViscosity,
		queryMode : 'local',
		displayField : 'name',
		valueField : 'name'
	});
	
	
	/** Specimen Widget contains a specimenGrid and a sampleChangerWidget than can be displayed with are vertical or horizontal layout **/
	this.specimenWidget = new SpecimenWidget({
		height : this.height,
		width : 1200
	});
	
	this.measurementGrid = new MeasurementGrid({
//		maxWidth : 1500,
//		width : 1200,
		height : 600,
		minHeight : 600,
		maxHeight : 600,
		estimateTime : false,
		positionColumnsHidden : true,
		isPriorityColumnHidden : true,
		isStatusColumnHidden : true,
		addBtnEnable : true,
		isTimeColumnHidden : true,
		updateRowEnabled : true,
		collapsed : true,
		removeBtnEnabled : true,
		showTitle : false,
		collapseBtnEnable : false,
		addBtnMultipleEdit : true,
		sortingBtnEnable : true,
		editor : {
			exposureTemperature : {
				xtype : 'textfield',
				allowBlank : true
			},
			comments : {
				xtype : 'textfield',
				allowBlank : true
			},
			volumeToLoad : {
				xtype : 'numberfield',
				allowBlank : true
			},
			transmission : {
				xtype : 'numberfield',
				allowBlank : true
			},
			viscosity : viscosityEditor,
			waitTime : {
				xtype : 'numberfield',
				allowBlank : true
			},
			flow : {
				xtype : 'checkbox',
				allowBlank : true
			}
		}
	});


	this.measurementGrid.onMeasurementChanged.attach(function(sender, measurement) {
		_this.experiment.setMeasurement(measurement);
		_this.measurementGrid.loadExperiment(_this.experiment);
		_this.volumePlanificator.load(_this.experiment);
	});

	this.measurementGrid.onExperimentChanged.attach(function(sender, json) {
		_this.experiment = new Experiment(json);
		_this.measurementGrid.loadExperiment(_this.experiment);
		_this.specimenWidget.refresh(_this.experiment);
		_this.volumePlanificator.load(_this.experiment);
	});

	this.measurementGrid.onRemoved.attach(function(sender, experiments) {
		_this.experiment = new Experiment(experiments[0]);
		_this.specimenWidget.refresh(_this.experiment);
		_this.volumePlanificator.load(_this.experiment);
	});

	this.volumePlanificator = new VolumeGrid();
}

TemplateMainView.prototype.getPanel = MainView.prototype.getPanel;

TemplateMainView.prototype.getHeader = function(beamlineName, startDate) {
	return "<span class='item'>" + beamlineName + "</span><span class='item_description'>" + startDate + "</span>";
};

TemplateMainView.prototype.getSelected = function() {
	var selected = [];
	for (var i = 0; i < this.queueGridList.length; i++) {
		selected = this.queueGridList[i].getSelected().concat(selected);
	}
	return selected;
};


TemplateMainView.prototype.getTabs = function() {
	return  Ext.createWidget('tabpanel',
			{
				plain : true,
				margin : '20 0 0 0',
				items : [
					{
						tabConfig : {
							title : 'Measurements'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 700,
							padding : 20,
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
							         
							         this.measurementGrid.getPanel()
							]
						}

						]
					},
					{
						tabConfig : {
							title : "Sample Plate Setup"
						},
						items : [  
									{
										xtype : 'container',
										layout : 'vbox',
										height : 700,
										padding : 20,
										style : {
											borderColor : 'gray',
											borderStyle : 'solid',
											borderWidth : '1px',
											'background-color' : 'white' 
										},
										items : [ 
										     	this.specimenWidget.getPanel()
										     	]
									}
					]
			},
			{
				tabConfig : {
					title : "Sample Requirements"
				},
				items : [  
							{
								xtype : 'container',
								layout : 'fit',
								height : 700,
								padding : 20,
								style : {
									borderColor : 'gray',
									borderStyle : 'solid',
									borderWidth : '1px',
									'background-color' : 'white' 
								},
								items : [ 
								     	this.volumePlanificator.getPanel()
								     	]
							}
			]
			}
			]});
};


TemplateMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'anchor'
	    },
	    defaults : {
			anchor : '100%',
			hideEmptyLabel : false },
	    margin : 30,
		bodyStyle : {
			"background-color" : "#E6E6E6" 
		},
	    items: [
	            
	            this.experimentHeaderForm.getPanel(),
	            this.getTabs()
	            ]
	});
};



TemplateMainView.prototype.load = function(experiments) {
	var _this = this;
	_this.panel.setLoading();
	var onSuccess = function(sender, experiments){
		_this.experiment = new Experiment(experiments[0]);
		_this.experimentHeaderForm.load(_this.experiment);
		_this.measurementGrid.loadExperiment(_this.experiment);
		_this.specimenWidget.refresh(_this.experiment);
		_this.volumePlanificator.load(_this.experiment);
		_this.panel.setLoading(false);
	};
	EXI.getDataAdapter({onSuccess : onSuccess}).saxs.experiment.getExperimentById(experiments[0].experimentId);
	this.panel.setTitle("Template");
};

function DataCollectionMainView() {
	this.title = "Experiment";
	this.icon = 'images/icon/ic_satellite_black_18dp.png';

	MainView.call(this);

	this.grid = new QueueGrid({
		positionColumnsHidden : true,
		maxHeight : Ext.getCmp("main_panel").getHeight() - 50,
		sorters : [ {
			property : 'macromoleculeAcronym',
			direction : 'ASC' } ] });
	
	
	this.onSelect = new Event(this);
	this.onDeselect = new Event(this);
}

DataCollectionMainView.prototype.getPanel = MainView.prototype.getPanel;
DataCollectionMainView.prototype.getContainer = MainView.prototype.getContainer;

DataCollectionMainView.prototype.filter = function(macromoleculeAcronym, bufferAcronym) {
	this.grid.key = {};
	this.grid.store.filter( [{property : "bufferAcronym", value : bufferAcronym, anyMacth : true}]);
};

DataCollectionMainView.prototype.load = function(selected) {
	var _this = this;
	

	this.grid.onSelectionChange.attach(function(sender, elements) {
		_this.onSelectionChange.notify(elements);
	});

	this.grid.onSelect.attach(function(sender, selected) {
		_this.onSelect.notify(selected);
	});
	this.grid.onDeselect.attach(function(sender, unselected) {
		_this.onDeselect.notify(unselected);
	});

	this.container.insert(0, this.grid.getPanel());

	this.grid.panel.setLoading();
	this.grid.store.loadData(selected);
	this.grid.panel.setLoading(false);
};

function ExperimentMainView() {
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	MainView.call(this);
	this.experimentHeaderForm = new ExperimentHeaderForm();
	var _this = this;
	/** Viscosity **/
	var storeViscosity = Ext.create('Ext.data.Store', {
		fields : [ 'name' ],
		data : [ {
			"name" : "low"
		}, {
			"name" : "medium"
		}, {
			"name" : "high"
		} ]
	});

	// Create the combo box, attached to the states data store
	var viscosityEditor = Ext.create('Ext.form.ComboBox', {
		fieldLabel : '',
		store : storeViscosity,
		queryMode : 'local',
		displayField : 'name',
		valueField : 'name'
	});
	
	
	/** Specimen Widget contains a specimenGrid and a sampleChangerWidget than can be displayed with are vertical or horizontal layout **/
	this.specimenWidget = new SpecimenWidget({
		height : this.height,
		width : 1200
	});
	
	this.measurementGrid = new MeasurementGrid({
//		maxWidth : 1500,
//		width : 1200,
		height : 600,
		minHeight : 600,
		maxHeight : 600,
		estimateTime : false,
		positionColumnsHidden : false,
		isPriorityColumnHidden : true,
		isStatusColumnHidden : false,
		addBtnEnable : false,
		isTimeColumnHidden : false,
		updateRowEnabled : false,
		collapsed : false,
		removeBtnEnabled : false,
		showTitle : false,
		collapseBtnEnable : false,
		addBtnMultipleEdit : false,
		sortingBtnEnable : false,
		editor : {
			exposureTemperature : {
				xtype : 'textfield',
				allowBlank : true
			},
			comments : {
				xtype : 'textfield',
				allowBlank : true
			},
			volumeToLoad : {
				xtype : 'numberfield',
				allowBlank : true
			},
			transmission : {
				xtype : 'numberfield',
				allowBlank : true
			},
			viscosity : viscosityEditor,
			waitTime : {
				xtype : 'numberfield',
				allowBlank : true
			},
			flow : {
				xtype : 'checkbox',
				allowBlank : true
			}
		}
	});

//	this.measurementGrid.onSelected.attach(function(sender, measurements) {
//		var specimens = [];
//		for ( var i = 0; i < measurements.length; i++) {
//			specimens.push(_this.experiment.getSampleById(measurements[i].specimenId));
//		}
//	});

	this.measurementGrid.onMeasurementChanged.attach(function(sender, measurement) {
//		debugger
		_this.experiment.setMeasurement(measurement);
		_this.measurementGrid.loadExperiment(_this.experiment);
		_this.volumePlanificator.load(_this.experiment);
	});

	this.measurementGrid.onExperimentChanged.attach(function(sender, json) {
		_this.experiment = new Experiment(json);
		_this.measurementGrid.loadExperiment(_this.experiment);
		_this.specimenWidget.refresh(_this.experiment);
		_this.volumePlanificator.load(_this.experiment);
	});

	this.measurementGrid.onRemoved.attach(function(sender, experiments) {
		_this.experiment = new Experiment(experiments[0]);
		_this.specimenWidget.refresh(_this.experiment);
		_this.volumePlanificator.load(_this.experiment);
	});

	
	this.queueGrid = new QueueGrid({
		positionColumnsHidden : true,
//		maxHeight : Ext.getCmp("main_panel").getHeight() - 50,
		sorters : [ {
			property : 'macromoleculeAcronym',
			direction : 'ASC'
		} ]
	});
	
	
}

ExperimentMainView.prototype.getPanel = MainView.prototype.getPanel;

ExperimentMainView.prototype.getSelected = function() {
	var selected = [];
	for (var i = 0; i < this.queueGridList.length; i++) {
		selected = this.queueGridList[i].getSelected().concat(selected);
	}
	return selected;
};


ExperimentMainView.prototype.getTabs = function() {
	return  Ext.createWidget('tabpanel',
			{
				plain : true,
				margin : '20 0 0 0',
				activeTab: 2,
				items : [
					{
						tabConfig : {
							title : "Sample Plate Setup"
						},
						items : [  
									{
										xtype : 'container',
										layout : 'vbox',
										height : 700,
										padding : 20,
										style : {
											borderColor : 'gray',
											borderStyle : 'solid',
											borderWidth : '1px',
											'background-color' : 'white' 
										},
										items : [ 
										     	this.specimenWidget.getPanel()
										     	]
									}
									]
					},
					{
						tabConfig : {
							title : 'Measurements'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 700,
							padding : 20,
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
							         
							         this.measurementGrid.getPanel()
							]
						}

						]
					},
					{
						tabConfig : {
							title : 'Online Data Analysis'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 700,
							padding : 20,
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
							     this.queueGrid.getPanel()    
							]
						}
					
						]
					}
			]
	}
	);
};


ExperimentMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'anchor'
	    },
	    defaults : {
			anchor : '100%',
			hideEmptyLabel : false },
	    margin : 30,
		bodyStyle : {
			"background-color" : "#E6E6E6" 
		},
	    items: [
	            this.experimentHeaderForm.getPanel(),
	            this.getTabs()
	    ]
	});
};



ExperimentMainView.prototype.load = function(experimentId) {
	var _this = this;
	_this.panel.setLoading();
	_this.queueGrid.panel.setLoading();
	var onSuccess = function(sender, experiments){
		_this.experiment = new Experiment(experiments[0]);
		_this.experimentHeaderForm.load(_this.experiment);
		_this.measurementGrid.loadExperiment(_this.experiment);
		_this.specimenWidget.refresh(_this.experiment);
		_this.panel.setTitle(experiments[0].name);
		_this.panel.setLoading(false);	
		var onSuccess = function(sender, data){
			_this.queueGrid.load(data);
			_this.queueGrid.panel.setLoading(false);
		};
		EXI.getDataAdapter({onSuccess : onSuccess}).saxs.dataCollection.getDataCollectionsByExperimentId(experimentId);
	};
	EXI.getDataAdapter({onSuccess : onSuccess}).saxs.experiment.getExperimentById(experimentId);
};



function MergeMainView() {
	this.title = "Primary Data View";
	this.icon = 'images/icon/ic_blur_on_black_18dp.png';
	this.queueGridList = [];

	var _this = this;

	/** Curve plotter * */
	this.plotter = new CurvePlotter({});
	this.formPopulated = false;
	this.plotter.onRendered.attach(function(sender) {
		/** only once * */
		if (!_this.formPopulated) {
			/** colors * */
			var colors = {};
			for (var i = 1; i < sender.getLabels().length; i++) {
				colors[sender.getLabels()[i]] = sender.getColors()[i - 1];
			}

			_this.populateForm(sender.getPointCount(), colors);
			_this.formPopulated = true;
		}
		plotter = sender;
	});
}

MergeMainView.prototype.getPanel = MainView.prototype.getPanel;
MergeMainView.prototype.getContainer = MainView.prototype.getContainer;

MergeMainView.prototype.populateForm = function(pointCount, colors) {
	for (var i = 0; i < this.frames.length; i++) {
		this.editorPanel.add(this.getCurveContainer(this.frames[i].subtractionId, this.frames[i].fileName, 0, 5, this.frames[i].scale,
				pointCount, colors));
	}
};

MergeMainView.prototype.getSelected = function() {
	var selected = [];
	for (var i = 0; i < this.queueGridList.length; i++) {
		selected = this.queueGridList[i].getSelected().concat(selected);
	}
	return selected;
};

MergeMainView.prototype.getCurveContainer = function(subtractionId, fileName, from, to, scale, pointCount, colors) {
	var _this = this;
	return Ext.create('Ext.Panel', {
		width : 380,
		layout : 'vbox',
		border : 1,
		style : {
			// borderColor : colors[fileName],
			borderStyle : 'solid',
			borderWidth : '1px' },
		margin : '10 0 0 5',
		items : [ {
			xtype : 'container',
			margin : '0 0 0 0',
			layout : 'hbox',
			items : [ {
				xtype : 'container',
				layout : 'vbox',
				items : [ {
					html : '<span style="font-size:12px;color:' + colors[fileName] + ';">' + fileName + '</span>',
					margin : '10 0 0 10' },

				{
					xtype : 'sliderfield',
					margin : '10 0 0 2',
					hideLabel : true,
					width : 275,
					minValue : 0,
					subtractionId : subtractionId,
					id : "slider" + subtractionId,
					maxValue : pointCount,
					increment : 1,
					values : [ 0, pointCount ],
					listeners : {
						changecomplete : function(slider, newValue, thumb, eOpts) {
							var values = slider.getValues();
							for (var i = 0; i < _this.frames.length; i++) {
								if (_this.frames[i].subtractionId == slider.subtractionId) {
									_this.frames[i].from = _this.plotter.dygraph.getValue(values[0] - 1, 0);
									_this.frames[i].to = _this.plotter.dygraph.getValue(values[1] - 1, 0);
								}
							}
							_this.updateCurve();
						} } } ] }, {
				xtype : 'container',
				layout : 'vbox',
				items : [ {
					xtype : 'container',
					layout : 'hbox',
					items : [ {
						xtype : 'button',
						text : '<',
						width : 30,
						margin : '2 0 0 10',
						subtractionId : subtractionId,
						handler : function(sender) {
							var id = "slider" + sender.subtractionId;
							Ext.getCmp(id).setValue(0, Ext.getCmp(id).getValues()[0] - 1);
							var values = Ext.getCmp(id).getValues();
							for (var i = 0; i < _this.frames.length; i++) {
								if (_this.frames[i].subtractionId == sender.subtractionId) {
									_this.frames[i].from = _this.plotter.dygraph.getValue(values[0] - 1, 0);
								}
							}

							_this.updateCurve();
						} }, {
						xtype : 'button',
						text : '>',
						width : 30,
						margin : '2 0 0 5',
						subtractionId : subtractionId,
						handler : function(sender) {
							var id = "slider" + sender.subtractionId;
							Ext.getCmp(id).setValue(1, Ext.getCmp(id).getValues()[1] + 1);
							var values = Ext.getCmp(id).getValues();
							for (var i = 0; i < _this.frames.length; i++) {
								if (_this.frames[i].subtractionId == sender.subtractionId) {
									_this.frames[i].to = _this.plotter.dygraph.getValue(values[1] - 1, 0);
								}
							}
							_this.updateCurve();
						} }

					]

				}, {
					xtype : 'container',
					layout : 'hbox',
					margin : '2 0 2 0',
					items : [ {
						xtype : 'button',
						text : '+',
						margin : '0 0 0 10',
						width : 30,
						subtractionId : subtractionId,
						handler : function(sender) {
							for (var i = 0; i < _this.frames.length; i++) {
								console.log(sender.subtractionId);
								if (_this.frames[i].subtractionId == sender.subtractionId) {
									_this.frames[i].scale = _this.frames[i].scale + 0.1;
								}
							}
							_this.updateCurve();
						} }, {
						xtype : 'button',
						text : '-',
						width : 30,
						margin : '0 0 0 5',
						subtractionId : subtractionId,
						handler : function(sender) {
							for (var i = 0; i < _this.frames.length; i++) {
								if (_this.frames[i].subtractionId == sender.subtractionId) {
									_this.frames[i].scale = _this.frames[i].scale - 0.1;
								}
							}
							_this.updateCurve();
						} } ] } ] }

			] }

		] });
};

MergeMainView.prototype.getSubtractionEditor = function() {
	var _this = this;
	this.editorPanel = Ext.create('Ext.Panel', {
		border : 1,
		height : 600,
		width : 400,
		layout : 'vbox',
		scrollable : true,
		style : {
			borderColor : '#000000',
			borderStyle : 'solid',
			borderWidth : '1px' },
		items : [],
		bbar : [ {
					text : "Download",
					xtype : 'button',
					handler : function(sender) {
						var params = _this.getParams();
						window.open(new DataAdapter().getMergeURL(params.subtractionIds.toString(), params.from.toString(), params.to.toString(), params.scale.toString()));
					}
		}]
//		{
//			xtype : 'button',
//			text : 'Download',
//			margin : '0 0 0 10',
//			width : 30,
//			handler : function(sender) {
//
//			} } ] 
			
	});
	return this.editorPanel;
};

MergeMainView.prototype.getParams = function() {
	var from = [];
	var to = [];
	var scale = [];
	var subtractionIds = [];
	for (var i = 0; i < this.frames.length; i++) {
		var frame = this.frames[i];
		if (frame.from != null) {
			from.push(frame.from);
		} else {
			from.push("");
		}
		if (frame.to != null) {
			to.push(frame.to);
		} else {
			to.push("");
		}
		if (frame.scale != null) {
			scale.push(frame.scale);
		} else {
			scale.push("");
		}
		if (frame.subtractionId != null) {
			subtractionIds.push(frame.subtractionId);
		} else {
			subtractionIds.push("");
		}
	}
	return {
		from : from,
		to : to,
		scale : scale,
		subtractionIds : subtractionIds,
		
	};
};

MergeMainView.prototype.updateCurve = function() {
	

	/** Saving zoom * */
	this.xAxisRange = this.plotter.dygraph.xAxisRange();
	this.yAxisRange = this.plotter.dygraph.yAxisRange();

	var params = this.getParams();
	this.plotter.loadMerge(params.subtractionIds.toString(), params.from.toString(), params.to.toString(), params.scale.toString());
	this.plotter.dygraph.updateOptions({
		dateWindow : this.xAxisRange,
		valueRange : this.yAxisRange });
};

MergeMainView.prototype.getSlavePanel = function() {
	return {
		xtype : 'container',
		layout : 'hbox',
		cls : 'defaultGridPanel',
		border : 0,
		defaults : {
			xtype : 'container',
			height : 600 },
		items : [ this.getSubtractionEditor(), this.plotter.getPanel() ] };
};

MergeMainView.prototype.load = function(selected) {
	var _this = this;

	var grid = new QueueGrid({
		maxHeight : 300

	});

	this.panel.setTitle("Merge Tool");
	this.container.insert(0, grid.getPanel());

	this.container.insert(1, this.getSlavePanel());
	grid.load(selected);
	grid.panel.setLoading(false);

	var dataCollectionIds = [];
	var subtractionIds = [];
	var subtractionKey = [];

	this.frames = [];
	for (var i = 0; i < selected.length; i++) {

		dataCollectionIds.push(selected[i].dataCollectionId);
		if (subtractionKey[selected[i].subtractionId] == null) {
			subtractionIds.push(selected[i].subtractionId);
			this.frames.push({
				'fileName' : selected[i].substractedFilePath.substr(selected[i].substractedFilePath.lastIndexOf("/") + 1),
				'subtractionId' : selected[i].subtractionId,
				'scale' : 1 });

			subtractionKey[selected[i].subtractionId] = true;
		}
	}

	/** Loading the subtraction on the curve Plotter * */
	this.plotter.load({
		subtracted : subtractionIds });

};

function PrimaryDataMainView() {
	this.title = "Primary Data View";
	this.icon = 'images/icon/ic_blur_on_black_18dp.png';

	MainView.call(this);
	
	this.onMeasurementSelectionChange = new Event(this);
	
	var _this = this;
	
	this.frameSelectorGrid = new FrameSelectorGrid();
	this.frameSelectorGrid.onSelectionChange.attach(function(sender, selections){
		_this.plotter.load(selections);
	});
	
	/** Curve plotter * */
	this.plotter = new CurvePlotter({
	});

	this.grid = new QueueGrid({
		maxHeight : 300
	});
	
	
	/** Abinitio **/
	this.abinitioForm = new AbinitioForm({
		height : 700
	});
	
}

PrimaryDataMainView.prototype.getPanel = MainView.prototype.getPanel;

PrimaryDataMainView.prototype.getSlavePanel = function() {
	return {
		xtype : 'container',
		layout : 'hbox',
		cls 	: 'defaultGridPanel',
		margin : 5,
		border : 0,
		defaults : {
			height : 600 
		},
		items : [ 
		         {
		        	 xtype : 'panel',
		        	 layout: {
		        	        type: 'accordion',
		        	        titleCollapse: false,
		        	        animate: true,
		        	        activeOnTop: true
		        	    },
		        	    flex : 0.3,
		        		border : 1,
		        		style : {
		        			borderColor : '#000000',
		        			borderStyle : 'solid',
		        			borderWidth : '1px' },
		        	 items : [
		        	          this.frameSelectorGrid.getPanel()
		        	         
		        	          ]
		         },
		         this.plotter.getPanel()
		        
		    ]
	};

};


PrimaryDataMainView.prototype.getContainer = function() {
	return  Ext.createWidget('tabpanel',
			{
				plain : true,
				height : 900,
				margin : '10 0 0 0',
				items : [
					{
						tabConfig : {
							title : 'Primary Data Reduction'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 850,
							padding : 20,
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
										{
											xtype : 'container',
											items : [
											         	this.grid.getPanel(),
											        	this.getSlavePanel()         
											]
										}
							]
						}

						]
					},
					{
						tabConfig : {
							title : 'Abinitio Modeling'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 850,
							padding : 20,
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
										{
											xtype : 'container',
											items : [
											         	this.abinitioForm.getPanel()
											]
										}
							]
						}

						]
					}
			]
			});
};


//PrimaryDataMainView.prototype.getContainer = function() {
//	return {
//		xtype : 'container',
//		items : [
//		         	this.grid.getPanel(),
//		        	this.getSlavePanel()         
//		]
//	};
//};

PrimaryDataMainView.prototype.load = function(selected) {
	var _this = this;
	this.panel.setTitle(" Data Collection");
	this.grid.panel.setLoading();
	var onSuccess = function(sender, data) {
		_this.grid.load(data);
		_this.grid.panel.setLoading(false);
		/** Measurements Grid * */
		_this.frameSelectorGrid.load(data);
		
		/** Getting abinitio **/
		if (data[0].subtractionId){
			var onSuccessSubtraction = function(sender, subtractions) {
				_this.abinitioForm.load(subtractions);
			};
			
			EXI.getDataAdapter({onSuccess : onSuccessSubtraction}).saxs.subtraction.getSubtractionsBySubtractionIdList([data[0].subtractionId]);
			
		}
	};

	var dataCollectionIds = [];
	for (var i = 0; i < selected.length; i++) {
		dataCollectionIds.push(selected[i].dataCollectionId);

	}
	EXI.getDataAdapter({onSuccess : onSuccess}).saxs.dataCollection.getDataCollectionsByDataCollectionId(dataCollectionIds);
	
	
	
};


function AutoProcIntegrationMainView() {
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	MainView.call(this);
	var _this = this;
	
	this.autoProcIntegrationGrid = new AutoProcIntegrationGrid({ maxHeight: 400});
	
	this.autoProcIntegrationGrid.onSelected.attach(function(sender, records){
		
		var ids = [];
		for (var i = 0; i < records.length; i++) {
			ids.push(records[i].autoProcIntegrationId);
		}
		try{
			_this.loadPlots(ids);
		}
		catch(e){}
		if (records.length == 1){
			var record = _this.getByAutoProcId(records[0].v_datacollection_summary_phasing_autoproc_autoprocId);
			if (record != null){
				_this.autoProcIntegrationAttachmentGrid.load(record);
			}
		}
	});
	
	this.autoProcIntegrationAttachmentGrid = new AutoProcIntegrationAttachmentGrid({margin : '0 20 0 10', maxHeight: 400, width : 300});
	
	
	/** Curve completenessPlotter * */
	this.completenessPlotter = new AutoProcIntegrationCurvePlotter({
		height : 150,
		title : "Completeness vs Resolution",
		legend : 'never'
	});
	
	this.completenessPlotter.onPointClickCallback.attach(function(sender, id){
		_this.onPlotClicked(id);
	});
	
	this.rFactorPlotter = new AutoProcIntegrationCurvePlotter({
		height : 150,
		title : "Rfactor vs Resolution",
		legend : 'never'
	});
	
	this.rFactorPlotter.onPointClickCallback.attach(function(sender, id){
		_this.onPlotClicked(id);
	});
	
	this.isigmaPlotter = new AutoProcIntegrationCurvePlotter({
		height : 150,
		title : "I/SigmaI vs Resolution",
		legend : 'never'
	});

	this.isigmaPlotter.onPointClickCallback.attach(function(sender, id){
		_this.onPlotClicked(id);
	});
	
	this.cc2Plotter = new AutoProcIntegrationCurvePlotter({
		height : 150,
		title : "CC/2 vs Resolution",
		legend : 'never'
	});
	
	this.cc2Plotter.onPointClickCallback.attach(function(sender, id){
		_this.onPlotClicked(id);
	});
	
	this.sigmaAnnoPlotter = new AutoProcIntegrationCurvePlotter({
		height : 150,
		title : "SigAno vs Resolution",
		legend : 'never'
	});
	
	this.sigmaAnnoPlotter.onPointClickCallback.attach(function(sender, id){
		_this.onPlotClicked(id);
	});
	
	this.wilsonPlotter = new AutoProcIntegrationCurvePlotter({
		height : 150,
		title : "Wilson Plot",
		legend : 'never'
	});
	
	this.wilsonPlotter.onPointClickCallback.attach(function(sender, id){
		_this.onPlotClicked(id);
	});
	
	this.annoCorrPlotter = new AutoProcIntegrationCurvePlotter({
		height : 150,
		title : "Anom Corr vs Resolution",
		legend : 'never'
	});

	this.annoCorrPlotter.onPointClickCallback.attach(function(sender, id){
		_this.onPlotClicked(id);
	});
	
	
	/** Phasing **/
	this.autoProcIntegrationPhasingGrid = new AutoProcIntegrationGrid({ maxHeight: 500});

	this.autoProcIntegrationPhasingGrid.onSelected.attach(function(sender, records){
		var ids = [];
		for (var i = 0; i < records.length; i++) {
			ids.push(records[i].autoProcId);
		}
		
		_this.phasingGrid.panel.setLoading(); 
		
		var onSuccessPhasing = function(sender, data){
			var parsed = [];
			if (data != null){
				if (data.length > 0){
					if (data[0].phasinganalysis != null){
						for (var i = 0; i < data[0].phasinganalysis.length; i++) {
							var j = 0;
							if (data[0].phasinganalysis[i].modelbuilding.length > 0){
								for (j = 0; j < data[0].phasinganalysis[i].modelbuilding.length; j++) {
									parsed.push(data[0].phasinganalysis[i].modelbuilding[j]);
									parsed[parsed.length -1]["name"] = "modelbuilding";
									parsed[parsed.length -1] = $.extend({}, parsed[parsed.length -1], data[0].phasinganalysis[i].modelbuilding[j].spaceGroupVO);
									parsed[parsed.length -1]["phasingAnalysisId"] =  data[0].phasinganalysis[i].modelbuilding[j].phasingAnalysisVO.phasingAnalysisId;
								}
							}
							
							if (data[0].phasinganalysis[i].preparephasingdata.length > 0){
								for ( j = 0; j < data[0].phasinganalysis[i].preparephasingdata.length; j++) {
									parsed.push(data[0].phasinganalysis[i].preparephasingdata[j]);
									parsed[parsed.length -1]["name"] = "preparephasingdata";
									parsed[parsed.length -1] = $.extend({}, parsed[parsed.length -1], data[0].phasinganalysis[i].preparephasingdata[j].spaceGroupVO);
									parsed[parsed.length -1]["phasingAnalysisId"] =  data[0].phasinganalysis[i].preparephasingdata[j].phasingAnalysisVO.phasingAnalysisId;
								}
							}
							
							if (data[0].phasinganalysis[i].phasing.length > 0){
								for (j = 0; j < data[0].phasinganalysis[i].phasing.length; j++) {
									parsed.push(data[0].phasinganalysis[i].phasing[j]);
									parsed[parsed.length -1]["name"] = "phasing";
									parsed[parsed.length -1] = $.extend({}, parsed[parsed.length -1], data[0].phasinganalysis[i].phasing[j].spaceGroup3VO);
									parsed[parsed.length -1]["phasingAnalysisId"] =  data[0].phasinganalysis[i].phasing[j].phasingAnalysisVO.phasingAnalysisId;
								}
							}
		
							if (data[0].phasinganalysis[i].substructureDetermination3VO.length > 0){
								for (j = 0; j < data[0].phasinganalysis[i].substructureDetermination3VO.length; j++) {
									parsed.push(data[0].phasinganalysis[i].substructureDetermination3VO[j]);
									parsed[parsed.length -1]["name"] = "substructureDetermination";
									parsed[parsed.length -1] = $.extend({}, parsed[parsed.length -1], data[0].phasinganalysis[i].substructureDetermination3VO[j].spaceGroupVO);
									parsed[parsed.length -1]["phasingAnalysisId"] =  data[0].phasinganalysis[i].substructureDetermination3VO[j].phasingAnalysisVO.phasingAnalysisId;
								}
							}
							
							
						}
					}
				}
			}
			
			_this.phasingGrid.load(parsed);
			_this.phasingGrid.panel.setLoading(false);
			
		};
		EXI.getDataAdapter({onSuccess : onSuccessPhasing}).mx.autoproc.getPhasingByAutoprocIds(ids);
		
	});
	
	this.phasingGrid = new PhasingGrid({margin : '0 0 0 10'});
}

AutoProcIntegrationMainView.prototype.getPanel = MainView.prototype.getPanel;


AutoProcIntegrationMainView.prototype.getByAutoProcProgramAttachmentId = function(autoProcProgramAttachmentId) {
	for (var i = 0; i < this.data.length; i++) {
		for (var j = 0; j < this.data[i].autoprocprogram.attachmentVOs.length; j++) {
				var attachment = this.data[i].autoprocprogram.attachmentVOs[j];
				if (attachment.autoProcProgramAttachmentId == autoProcProgramAttachmentId){
					return this.data[i];
					
				} 
		}
	}
};



AutoProcIntegrationMainView.prototype.getByAutoProcId = function(autoProcId) {
	for (var i = 0; i < this.data.length; i++) {
				if (this.data[i].autoproc.autoProcId == autoProcId){
					return this.data[i];
				} 
	}
};


AutoProcIntegrationMainView.prototype.onPlotClicked = function(autoProcProgramAttachmentId) {
	var record = this.getByAutoProcProgramAttachmentId(autoProcProgramAttachmentId);
	if (record != null){
		this.autoProcIntegrationGrid.selectRowByAutoProcIntegrationId(record.autointegration.autoProcIntegrationId);
	}
};

AutoProcIntegrationMainView.prototype.getPlotContainer = function(panel) {
	return {
  	  xtype : 'container',
	  margin : 10,
	  layout: {
	        	type: 'fit'
	       },
	       flex : 0.5,
	       items : [ 
	                	panel
	       ]
	  
  };
};


AutoProcIntegrationMainView.prototype.getAutoProcPanel = function() {
	return Ext.create('Ext.container.Container', {
		layout: {
	        type: 'fit'
	    },
		margin : 5,
		items : [ 
		          Ext.create('Ext.container.Container', {
		        	 layout: 'hbox',
		        	 margin : '10 0 0 20',
		        	 items : [
		        	          	this.autoProcIntegrationGrid.getPanel(),
		        	          	this.autoProcIntegrationAttachmentGrid.getPanel()
		        	          ]
		         }),
		         Ext.create('Ext.container.Container', {
		        	 layout: 'hbox', 
		        	 margin : '0 50 0 0',
		        	 items : [
		        	          this.getPlotContainer( this.rFactorPlotter.getPanel()),
		        	          this.getPlotContainer( this.isigmaPlotter.getPanel()),
		        	          this.getPlotContainer( this.completenessPlotter.getPanel())
		        	 ]
		         }),
		         Ext.create('Ext.container.Container', {
		        	 layout: 'hbox', 
		        	 margin : '0 50 0 0',
		        	 items : [
		        	          this.getPlotContainer( this.cc2Plotter.getPanel()),
		        	          this.getPlotContainer( this.sigmaAnnoPlotter.getPanel()),
		        	          this.getPlotContainer(this.annoCorrPlotter.getPanel())
		        	          
		        	 ]
		         })
		    ]
	});
};



AutoProcIntegrationMainView.prototype.getContainer = function() {
	return  Ext.createWidget('tabpanel',
			{
				plain : true,
				margin : '10 30 10 10',
				items : [
					{
						tabConfig : {
							title : 'Auto Processing'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
							         this.getAutoProcPanel()
							]
						}
						]
				  }
				  ]
		});
};


AutoProcIntegrationMainView.prototype.groupBy = function(array , f ){
	  var groups = {};
	  array.forEach( function( o )
	  {
	    var group = JSON.stringify( f(o) );
	    groups[group] = groups[group] || [];
	    groups[group].push( o );  
	  });
	  return Object.keys(groups).map( function( group ){
		  return groups[group]; 
	  });
	};


AutoProcIntegrationMainView.prototype.loadPlots = function(autoProcIntegrationsIds) {
 	this.completenessPlotter.loadUrl(EXI.getDataAdapter().mx.autoproc.getXScaleCompleteness(autoProcIntegrationsIds.toString()));
	this.rFactorPlotter.loadUrl(EXI.getDataAdapter().mx.autoproc.getXScaleRfactor(autoProcIntegrationsIds.toString()));
	this.isigmaPlotter.loadUrl(EXI.getDataAdapter().mx.autoproc.getXScaleISigma(autoProcIntegrationsIds.toString()));
	this.cc2Plotter.loadUrl(EXI.getDataAdapter().mx.autoproc.getXScaleCC2(autoProcIntegrationsIds.toString()));
	this.sigmaAnnoPlotter.loadUrl(EXI.getDataAdapter().mx.autoproc.getXScaleSigmaAno(autoProcIntegrationsIds.toString()));
	this.annoCorrPlotter.loadUrl(EXI.getDataAdapter().mx.autoproc.getXScaleAnnoCorrection(autoProcIntegrationsIds.toString()));
};


AutoProcIntegrationMainView.prototype.loadGeneral = function(dataCollection) {
	for (var key in dataCollection){
		Ext.getCmp(this.id + "general").insert({
			xtype : 'container',
			
			layout : 'hbox',
			items : [ 
			          {
					        xtype: 'label',
					        forId: 'myFieldId',
					        text: key + ':',
					        margin: '0 0 0 10'
					  },
					  {
					        xtype: 'label',
					        forId: 'myFieldId',
					        text: dataCollection[key],
					        margin: '0 0 0 10'
					    }
			]
		});
	}
};
	


	
AutoProcIntegrationMainView.prototype.load = function(dataCollectionId) {
	var _this = this;
	this.panel.setTitle("Data Collection");
	this.panel.setLoading("Generating plots");
	var onSuccess = function(sender, data){
		_this.data = data;
//		var autoProcIntegrationsIds = []; 
//		var autoProcs = [];
//		var autoProcIds = [];
//		for (var i = 0; i < data.length; i++) {
//			autoProcIntegrationsIds.push(data[i].autointegration.autoProcIntegrationId);
//			autoProcs.push(data[i].autoproc);
//			autoProcIds.push(data[i].autoproc.autoProcId);
//		}
////		_this.autoProcIntegrationGrid.load(data);
//		_this.panel.setLoading(false);
//		
////		_this.loadPlots(autoProcIntegrationsIds);
//	
//		
	};
	EXI.getDataAdapter({onSuccess : onSuccess}).mx.autoproc.getByDataCollectionId(dataCollectionId);
	
	var onSuccess2 = function(sender, data){
		
		data =  BUI.groupBy(data[0], function(item){
			  			return [item.v_datacollection_summary_phasing_autoProcIntegrationId];
		});
		var autoProcIntegrationIds = [];
		for (var i = 0; i < data.length; i++) {
			autoProcIntegrationIds.push(data[i][0].v_datacollection_summary_phasing_autoProcIntegrationId);
		}
		_this.autoProcIntegrationGrid.load(data);
		_this.panel.setLoading(false);
		console.log(data);
		_this.loadPlots(autoProcIntegrationIds);
	};
	EXI.getDataAdapter({onSuccess : onSuccess2}).mx.phasing.getViewByDataCollectionId(dataCollectionId);
};



function CrystalMainView() {
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	MainView.call(this);
	var _this = this;
	
	this.crystalForm = new CrystalForm();
}

CrystalMainView.prototype.getPanel = MainView.prototype.getPanel;

CrystalMainView.prototype.getContainer = function() {
	this.panel =  Ext.createWidget('tabpanel',
			{
				plain : true,
				margin : '10 30 10 10',
				items : [
					{
						tabConfig : {
							title : 'Summary'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : 
								[
							        this.crystalForm.getPanel() 	
							]
						}
						]
				  }]
		});
	
	



	return this.panel;
	
};

CrystalMainView.prototype.load = function(crystal) {
	var _this = this;
	this.panel.setTitle(crystal.proteinVO.acronym);
	this.crystalForm.load(crystal);
	
};

















function DataCollectionMxMainView() {
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	MainView.call(this);
	var _this = this;
	
	this.dataCollectionSummaryGrid = new DataCollectionSummaryGrid();
}

DataCollectionMxMainView.prototype.getPanel = MainView.prototype.getPanel;

DataCollectionMxMainView.prototype.getContainer = function() {
	this.panel =  Ext.createWidget('tabpanel',
			{
				plain : true,
				margin : '10 30 10 10',
				cls : 'border-grid',
				items : [this.dataCollectionSummaryGrid.getPanel()]
		});
	
	



	return this.panel;
	
};
/*
DataCollectionMxMainView.prototype.load = function(sessionsId) {
	var _this = this;
	this.panel.setTitle("Data Collection ");
	var onSuccess = function(sender, data){
		_this.dataCollectionSummaryGrid.load(data);
		_this.dataCollectionSummaryGrid.grid.setTitle((data.length) + " Data Collections ");
	};
	EXI.getDataAdapter({onSuccess : onSuccess}).mx.dataCollection.getBySessionsId(sessionsId);
};
*/
DataCollectionMxMainView.prototype.load = function(data) {
	var _this = this;
	this.panel.setTitle("Data Collection ");
	if (data.length>0){
		_this.dataCollectionSummaryGrid.load(data);
	}
	else{
		BUI.showError("No data collections");
	}
	
};














function ImageMainView() {
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	MainView.call(this);
	var _this = this;

	this.imageViewer = new ImageResolutionViewer();

	this.detectorResolution = {
				pixelSize: {
						x : 1475,
						y : 1679
				},
				sensitiveArea : {
						x : 253.7,
						y : 288.8
				},
				pixelSizeHorizontal : 0.172

	};

	this.surfaceScatteringViewer = new SurfaceScatteringViewer();

	this.imageViewer.onImageRendered.attach(function(sender, data){
		_this.surfaceScatteringViewer.load(data);

	});
}

ImageMainView.prototype.getPanel = MainView.prototype.getPanel;

ImageMainView.prototype.getContainer = function() {
	return  Ext.createWidget('tabpanel',
			{
				plain : true,
				margin : '10 30 10 10',
				items : [

					{
						tabConfig : {
							title : '2D'
						},
						items : [ {
							xtype : 'container',
							layout : 'hbox',
							paddding : 5,
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
								this.imageViewer.getPanel(),
								{

									html : "<div id='" +  this.id+ "detector' ></div>",
									margin : '0 0 0 5',
									height : 800
								}
								
							]
						}
						]
				  	},
					{
						tabConfig : {
							title : '3D'
						},
						items : [ {
							xtype : 'container',
							layout : 'hbox',
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
								this.surfaceScatteringViewer.getPanel()
								
							]
						}
						]
				  	},
					{
						tabConfig : {
							title : 'Parameters'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							style : {
								borderColor : 'gray',
								borderStyle : 'solid',
								borderWidth : '1px',
								'background-color' : 'white' 
							},
							items : [ 
								this.getParametersGrid()
							]
						}
						]
				  	}
					



				  ]
		});
};




ImageMainView.prototype.getParametersGrid = function(imageId, dataCollectionId) {
	this.storeParameters = Ext.create('Ext.data.Store', {
	    fields:['key', 'value'],
            sorters : 'key'
	});

	this.parametersPanel = Ext.create('Ext.grid.Panel', {
	    title: 'Parameters',
	    store: this.storeParameters,
	    columns: [
		{ text: 'Key',  dataIndex: 'key', flex: 0.2 },
		{ text: 'Value', dataIndex: 'value', flex: 1 }
	    ],
	    height: 800,
	    viewConfig : {
			enableTextSelection : true
	    }
	});
	return this.parametersPanel;

};

ImageMainView.prototype.loadDetectorPanel = function(detector, dataCollection) {
	var dataHTML =  this.makeHTMLTable("Detector", [
						[ "Model" ,dataCollection.Detector_detectorModel],
						[ "Manufacturer" ,dataCollection.Detector_detectorManufacturer],  
						[ "Mode" ,dataCollection.Detector_detectorMode],
						[ "Pixel Size" , detector.pixelSize.x + " x " + detector.pixelSize.y],
						[ "sensitive Area" , detector.sensitiveArea.x + " x " + detector.sensitiveArea.y]
						
	], null, detector.img);

	var dataColletionHTML =  this.makeHTMLTable("Data Collection", [
						[ "Collected on" ,dataCollection.DataCollectionGroup_endTime],
						[ "Experiment Type" ,dataCollection.DataCollectionGroup_experimentType],  
						[ "Centering" ,dataCollection.DataCollection_centeringMethod],
						[ "Exposure Timee" , dataCollection.DataCollection_exposureTime],
						[ "Directory" , dataCollection.DataCollection_imageDirectory],
						[ "BeamLine" , dataCollection.BLSession_beamLineName],
						[ "Detector Distance" , dataCollection.DataCollection_detectorDistance],
						[ "Flux" , dataCollection.DataCollection_flux],
						[ "Resolution" , dataCollection.DataCollection_resolution],
						[ "Transmission" , dataCollection.DataCollection_transmission],
						[ "WaveLength" , dataCollection.DataCollection_wavelength]


	]);


	return "<span style='color:orange;font-weight:bold;'>WARNING: If image is not displayed please, refresh the page (F5)</span><br />" + dataColletionHTML +dataHTML  ;
			
		

};

ImageMainView.prototype.makeHTMLTable = function(title,  data, args, img) {
	var width = 800;
	if (args != null){
		if (args.with != null){
			width = args.with;
		}
	}	


	var html = "<table>";
	


	if (data != null){
		for(var i =0 ; i< data.length; i++){
			html = html + "<tr>";
			for(var j =0 ; j< data[i].length; j++){

				var css = "key_subgrid";
				if (j == 1){
					css = "value_subgrid";
				}
				html = html + "<td class='" + css+ "'>" + data[i][j] + "</td>";

				if (img != null){
					if (i==0){
						if (j == data[i].length -1){
  							html = html + '<td rowspan="' + data.length+'"><img src=' + img +'/></td>';
						}
	
					}

				}
			}
			html = html + "</tr>";

		}


	}
	html = html + "</table>";

	if (title != null){
		html = '<div  class="header-component-table" >' + title +'</div><div  style="margin:0px 0px 0px 0px !important;width:' + width +'px;">' + html + '</div>';
	}
	return html; 
};


ImageMainView.prototype.load = function(imageId, dataCollectionId) {
	var _this = this;
	this.panel.setTitle("Image");
	var url = EXI.getDataAdapter().mx.dataCollection.getImageById(imageId);

	
	var onSuccess = function(sender, dataCollection){
		var dc = (dataCollection[0]);

		for (var key in dc){
			//console.log(key + " " + dc[key]);
			_this.storeParameters.loadData([{key: key, value: dc[key]}], true);
		}
		var waveLength = dataCollection[0].DataCollection_wavelength;
		var detectorDistance = dataCollection[0].DataCollection_detectorDistance;
		var xBeam = dataCollection[0].DataCollection_xBeam;
		var yBeam = dataCollection[0].DataCollection_yBeam;

		if (ExtISPyB.detectors[dataCollection[0].Detector_detectorModel] != null){
			 _this.detectorResolution = ExtISPyB.detectors[dataCollection[0].Detector_detectorModel];
		}
		else{
			alert("Not detector loaded");
		}

		
		_this.imageViewer.load(url, waveLength, detectorDistance, xBeam, yBeam, _this.detectorResolution);

		document.getElementById(_this.id + "detector").innerHTML = _this.loadDetectorPanel(_this.detectorResolution, dataCollection[0]);

		_this.surfaceScatteringViewer.load();
		
	};
	EXI.getDataAdapter({onSuccess: onSuccess}).mx.dataCollection.getByDataCollectionId(dataCollectionId );
	

};



function WorkflowStepMainView() {
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	MainView.call(this);
	
	var _this = this;
	
}

WorkflowStepMainView.prototype.getPanel = MainView.prototype.getPanel;


WorkflowStepMainView.prototype.getTabs = function() {
	this.summaryTab = Ext.createWidget('tabpanel',{
			cls 	: 'border-grid',
			items 	: [
			      	   {html : "test"},
			      	   {html : "test"}
			]
	});
	
	return this.summaryTab;
	
};

WorkflowStepMainView.prototype.getSummaryTab = function() {
	this.summaryTab = Ext.create('Ext.panel.Panel', {
	    bodyPadding: 5,  
	    cls : 'border-grid',
	    title: 'Summary',
	    layout: {
	        type: 'hbox'
	    },
	    autoScroll : true,
	    items: [
	            
	            
	    ]
	});
	return this.summaryTab;
};


WorkflowStepMainView.prototype.getContainer = function() {
	return  Ext.create('Ext.tab.Panel', {
		
	    items: [
	            	this.getSummaryTab(),
	    
				    {
				        title: 'Bar',
				        tabConfig: {
				            title: 'Custom Title',
				            tooltip: 'A button tooltip'
				        }
				    }
    	]
	});
};



	
WorkflowStepMainView.prototype.load = function(workflowSteps) {
	var _this = this;
	this.panel.setTitle("Workflow");
	
	
	for (var i = 0; i < workflowSteps.length; i++) {
		
		/** SUMMARY TAB **/
		
		/** Creating the img **/
		var img = Ext.create('Ext.Img', {
		    src: EXI.getDataAdapter().mx.workflowstep.getImageByWorkflowStepId(workflowSteps[i].workflowStepId),
		    width: 150,
		    height: 150
		});
		/** Creating the status **/
		var status = "<div class='summary_datacollection_failed'></div>";
		if ( workflowSteps[i].status == "Success"){
			status = "<div class='summary_datacollection_success'></div>";
		}
		
		/** Adding as container within the symmary tab **/
		this.summaryTab.insert(
				{
					xtype 	: 'container',
					margin : 5,
					items 	: [
					         	{
					         		html 	: "<div style='border-bottom:1px solid gray;width:140px;'>" + status + workflowSteps[i].workflowStepType + "</div>",
					         		margin 	: 10
					         	},
					         	img
					]
				}
		);
	}
};



function WelcomeMainView() {
	this.icon = '../images/icon/rsz_ic_home_black_24dp.png';

	MainView.call(this);
	this.title = "Welcome";
	this.closable = true;
}

WelcomeMainView.prototype.getPanel = MainView.prototype.getPanel;
WelcomeMainView.prototype.getContainer = MainView.prototype.getContainer;

WelcomeMainView.prototype.getContainer = function() {
	return {
		  layout: {
		        type: 'fit'
		    },
		items : [
		         	{
		         		html : "<iframe style='width:900px;height:900px;' frameBorder='0' src='../html/welcome.html'></iframe>",
		         		margin : '50 0 0 50'
		         	}
		]
	};
};

WelcomeMainView.prototype.load = function() {
	
};

function SubtractionMainView() {
	this.title = "Experiment";
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	this.id = BUI.id();
	MainView.call(this);

	this.subtractionSelectorWindow = new SubtractionSelectorWindow();
	
	var _this = this;
	
	this.subtractionSelectorWindow.onSelect.attach(function(sender, selected){
		_this.grid.store.removeAll();
		_this.grid.load(selected);
		Ext.getCmp(_this.id + "hiddenSutractions").setValue(JSON.stringify(selected[0].subtractionId));
		
		
	}) ;
	
	
	this.grid = new QueueGrid({
		maxHeight : 120,
		minHeight : 120,
		title : false,
		collapsible : false
	});
}

SubtractionMainView.prototype.getPanel = MainView.prototype.getPanel;

SubtractionMainView.prototype.getToolDescription = function(name, description, reference) {
	return {
		html : "<span class='toolName'>" + name +"</span><span class='toolDescription'>" + description +"</span><br /><span class='toolReference'> " + reference + "</span>",
		bodyStyle:{"background-color":"#E6E6E6"},
		margin : 10
	};
};

SubtractionMainView.prototype.getFirstStepContainer = function() {
	var _this = this;
	return {
		xtype : 'container',
		height : 250,
		items : [
		         
		         {
		        	 xtype : 'container',
		        	 layout : 'hbox',
		        	 margin : 20,
		        	 
		        	 height : 50,
		        	 items : [
		        	          {
		        	        	  html : "<span class='toolPanelText'>1) Select a Data Collection</span>",
		        	        	  margin : "5 0 0 20",
		        	        	  bodyStyle:{"background-color":"#E6E6E6"}
		        	          },
		        	          {
		        	        	  xtype : "button",
		        	        	  text: 'Select',
		        	        	  width :  150,
		        	        	  margin : "0 0 0 20",
		        	        	  handler: function() {
		        	        	        _this.subtractionSelectorWindow.show();
		        	        	  }
		        	          }
		        	 ]
		         },
		         this.grid.getPanel()
		        
		]
	};
	
};


SubtractionMainView.prototype.getContainer = function() {
var _this = this;
return Ext.create('Ext.form.Panel', {
	height : 500,
	margin : 30,
	border : 1,
    bodyStyle:{"background-color":"#E6E6E6"},
    bodypadding : 10,
    items: [
	            {
		             xtype: 'hiddenfield',
		             id : _this.id + 'hiddenSutractions',
		             name: 'subtractionId',
		             value: ''
		         },
		         {
		             xtype: 'hiddenfield',
		             id : _this.id +'hiddenProject',
		             name: 'projectId',
		             value: ''
		         },
		         {
		             xtype: 'hiddenfield',
		             id : _this.id +'pdbFileName',
		             name: 'pdbFileName',
		             value: ''
		         },
				this.getToolDescription(
							"CRYSOL: ",
							"Evaluation of the solution scattering from macromolecules with known atomic structure and fitting to experimental data",
							"Written by D. Svergun, C. Barberato, M. Malfois, V. Volkov, P. Konarev1, M. Petoukhov & A. Shkumatov"
							
				),
				this.getFirstStepContainer(),
				{
					xtype : 'fileuploadfield',
					id : _this.id + 'fileupload',
					width: 600,
					labelWidth : 150,
					margin : 30,
					fieldLabel: '<span class="toolPanelText">2) Upload PDB</span>',
					cls : 'toolPanelText',
				    name: 'file',
				    hideLabel: false
				}
	],
    buttons: [{
        text: 'Run',
        handler: function(){
            var form = this.up('form').getForm();
            if(form.isValid()){
            	Ext.getCmp(_this.id + "hiddenProject").setValue(exiSAXS.localExtorage.userManager.getActiveProject().internalId);
            	var fileUploadFilePath = Ext.getCmp(_this.id + 'fileupload').value;
            	Ext.getCmp(_this.id + "pdbFileName").setValue(fileUploadFilePath.split("\\")[fileUploadFilePath.split("\\").length - 1]);
                form.submit({
                    url: new ExiDataAdapter().server +'/token/tool/crysol/run',
                    waitMsg: 'Sending job to server...',
                    success: function(fp, o) {
                        msg('Success', 'Processed file "' + o.result.file + '" on the server');
                    },
                    failure: function(fp, o) {
                    	
                        msg('Failure', 'Processed file "' + o.result.file + '" on the server');
                    }
                });
            }
        }
    }
    ]
});
};

SubtractionMainView.prototype.load = function() {
	this.panel.setTitle("Subtraction Tool");
};

















function DimpleRunMainView() {
	this.title = "Experiment";
	this.icon = 'images/icon/ic_satellite_black_18dp.png';
	this.queueGridList = [];

	this.id = BUI.id();
	RunMainView.call(this);
}

DimpleRunMainView.prototype.getPanel = RunMainView.prototype.getPanel;
DimpleRunMainView.prototype.getOutputPanel = RunMainView.prototype.getOutputPanel;
DimpleRunMainView.prototype.getTabs = RunMainView.prototype.getTabs;
DimpleRunMainView.prototype.getContainer = RunMainView.prototype.getContainer;
DimpleRunMainView.prototype.load = RunMainView.prototype.load;

DimpleRunMainView.prototype.getFilesGrid = function() {
	var _this = this;
	
	this.filesStore = Ext.create('Ext.data.Store', {
	    fields:['name', 'targetId']
	});
	
	var selModel = Ext.create('Ext.selection.RowModel', {
		allowDeselect : true,
		listeners : {
			selectionchange : function(sm, selections) {
				console.log(selections[0].data);
				var onSuccess = function(sender, content){
					document.getElementById(_this.id + "display").innerHTML = "<textarea rows='100' cols='100'> " + content + "</textarea>" ;
				};
				if (selections[0].data.name.indexOf(".mtz") == -1){
					EXI.getDataAdapter({onSuccess:onSuccess}).exi.offline.getFileContent(selections[0].data.targetId);
				}
				else{
					onSuccess(this, "No text available");
				}
			}

		} });
	
	return  Ext.create('Ext.grid.Panel', {
	    title: 'Files',
	    store:this.filesStore,
	    selModel : selModel,
	    cls : 'border-grid',
	    height : 400,
	    columns: [
	        { text: 'Name',     dataIndex: 'name', flex : 1}
	    ]
	});
};






DimpleRunMainView.prototype.getMainPanel = function() {
	var store = Ext.create('Ext.data.Store', {
	    fields:['key', 'value']
	});
	
	this.generalGrid = Ext.create('Ext.grid.Panel', {
	    title: 'General',
	    store:store,
	    layout : 'fit',
	    columns: [
	        { text: 'Name',     dataIndex: 'name' },
	        { text: 'Seniority', dataIndex: 'seniority' }
	    ],
	    flex : 1
	});
	
	
	return {
		tabConfig : {
			title : 'Dimple'
		},
		items : [ {
							xtype : 'container',
//							layout : 'fit',
							height : 700,
							cls : 'border-grid',
							items : [ 
							         {
											xtype : 'container',
											layout : 'hbox',
											items : [
											         {
															xtype : 'container',
															layout : 'fit',
															flex : 0.4,
															margin: 5,
															items : [
																	this.getFilesGrid(),
																	{
																		html : "<br />"
																	},
																	 {
															        	 html : '<div id="' + this.id +'blobs";><div>'
															        	 
															         }
															]
											         },
											         {
															xtype : 'container',
															layout : 'fit',
															flex : 0.6,
															margin: 5,
															height : 400,
															cls : 'border-grid',
															items : [
															         {
															        	 html : '<div id="' + this.id +'display";><div>'
															        	 
															         }
													         ]
											         }
									         ]
							         },
							         {
											xtype : 'container',
											margin: 5,
											height : 210,
											layout : 'fit',
											flex : 1,
//											cls : 'border-grid',
											items : [
											         {
											        	 html : '<div style="height:200px"  id="' + this.id +'snapshots";><div>'
											        	 
											         }
									         ]
							         }
							 ]
			         
			}
		]
	};
};

DimpleRunMainView.prototype.loadBlobs = function(job) {
	var blobs = [];
	var i = 0;
	for (i = 0; i < job.output.length; i++) {
		if (job.output[i].type == "blob"){
			blobs.push(job.output[i]);
		}
	}
	
	/** Rendering blobs **/
//	var table = document.createElement("table");
	var container = document.createElement("div");
	var table = document.createElement("table");
	var tr = document.createElement("tr");
	for (i = 0; i < blobs.length; i++) {
		var td = document.createElement("td");
		var img = document.createElement("img");
		img.setAttribute("src", EXI.getDataAdapter().exi.offline.getFileImage(blobs[i].targetId));
		img.setAttribute("height", "180px");
		img.setAttribute("width", "180px");
		img.setAttribute("hspace", "10");
		
		img.setAttribute("onclick", "window.open(this.src)");
		td.appendChild(img);
		tr.appendChild(td);
		
		
	}
	table.appendChild(tr);
	document.getElementById(this.id + "snapshots").innerHTML =  table.innerHTML;
//	document.getElementById(this.id + "blobs").innerHTML = table.innerHTML;
};

DimpleRunMainView.prototype.loadFiles = function(job) {
	var files = [];
	for (var i = 0; i < job.output.length; i++) {
		if (job.output[i].type != "blob"){
			files.push(job.output[i]);
		}
	}
	this.filesStore.loadData(files);
};



DimpleRunMainView.prototype.loadMain = function(run) {
	console.log(run);
	if (run != null){
		if (run.jobs != null){
			if (run.jobs.length > 0){
				for (var i = 0; i < run.jobs.length; i++) {
					this.loadBlobs(run.jobs[i]);
					this.loadFiles(run.jobs[i]);
				}
			}
		}
	}
};
function RunMainView() {
	this.id = BUI.id();
	MainView.call(this);
}

RunMainView.prototype.getPanel = MainView.prototype.getPanel;

RunMainView.prototype.getOutputPanel = function() {
	this.outputStore = Ext.create('Ext.data.Store', {
	    fields:['name', 'value', 'type', 'targetId', 'tool', 'i' ],
	    groupField: 'tool',
	    sorters : [{property: 'i', direction : 'DESC'}]
	});

	return Ext.create('Ext.grid.Panel', {
	    store: this.outputStore,
	    cls : 'border-grid',
	    features: [{ftype:'grouping'}],
	    columns: [
	        { text: 'Tool',  dataIndex: 'tool', flex : 1, hidden:true },
	        { text: 'id',  dataIndex: 'i', flex : 1, hidden:true },
	        { text: 'Name',  dataIndex: 'name', flex : 1 },
	        { text: 'value', dataIndex: 'value', flex : 1 },
	        { text: 'type', dataIndex: 'type', flex : 1 },
	        { text: 'target', dataIndex: 'targetId', flex : 1, hidden:true },
	        { text: '', dataIndex: 'targetId', flex : 1, renderer : function(grid, opt, record){
        		var url =EXI.credentialManager.getConnections()[0].exiUrl + "/file/" + record.data.targetId + "/download";
        		return "<div><a style='color:blue;' href='"+ url +"'>Download</a></div>";
	        } 
        }
	    ]
	});
};


RunMainView.prototype.getGeneralContainerList = function(run) {
	var li = "<ul class='generalContainerRunList'>";
	li = li + "<li>Name: " + run.name + "</li>";
	li = li + "<li>Status: " + run.status + "</li>";
	li = li + "<li>" + run.creationDate + "</li>";
	return li;
};

RunMainView.prototype.getGeneralContainer = function(run) {
	return {
		xtype : 'panel',
		title : "General",
		margin : 10,
		border : 1,
		style: {borderColor:'gray', borderStyle:'solid', borderWidth:'1px'},
		items : [
		         {
		        	 html 		: this.getGeneralContainerList(run),
		        	 margin 	: '10 0 0 50'
		         }
		]
	};
};

RunMainView.prototype.getMainPanel = function() {
	
};

RunMainView.prototype.getTabs = function() {
	return  Ext.createWidget('tabpanel',
			{
				plain : true,
				margin : '20 0 0 0',
				items : [
				     	this.getMainPanel(),
					{
						tabConfig : {
							title : 'Output Files'
						},
						items : [ {
							xtype : 'container',
							layout : 'fit',
							height : 700,
							padding : 20,
							cls : 'border-grid',
							items : [ 
							         this.getOutputPanel()
							]
						}

						]
					}
//				     	,
//					{
//						tabConfig : {
//							title : "Input",
//						},
//						items : [  
//									{
//										xtype : 'container',
//										layout : 'vbox',
//										height : 700,
//										padding : 20,
//										cls : 'border-grid',
//										items : [ 
//										     	]
//									}
//					]
//			}
			]});
};

RunMainView.prototype.getContainer = function() {
	return Ext.create('Ext.container.Container', {
	    layout: {
	        type: 'anchor'
	    },
	    defaults : {
			anchor : '100%',
			hideEmptyLabel : false },
	    margin : 5,
		bodyStyle : {
			"background-color" : "#E6E6E6" 
		},
	    items: [
	            
	            	this.getTabs()
	            ]
	});
};

RunMainView.prototype.loadMain = function(run) {
	
};

RunMainView.prototype.load = function(run) {
	if (run != null) {
		this.panel.setTitle(run.name);
		var parsed = [];
		for (var i = 0; i < run.jobs.length; i++) {
			for (var j = 0; j < run.jobs[i].output.length; j++) {
				run.jobs[i].output[j]["tool"] = run.jobs[i].name + " " + run.jobs[i].version;
				run.jobs[i].output[j]["i"] = i;
				parsed.push(run.jobs[i].output[j]);
			}
		}
		this.outputStore.loadData(parsed);
	}
	this.loadMain(run);
};
